
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080097d0  080097d0  000197d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d40  08009d40  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d40  08009d40  00019d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d48  08009d48  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  200001e0  08009f2c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001454  08009f2c  00021454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018261  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c9f  00000000  00000000  0003846d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  0003b110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  0003c358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e75  00000000  00000000  0003d438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa1f  00000000  00000000  000612ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da8a1  00000000  00000000  00070ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  0014b5e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097b8 	.word	0x080097b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080097b8 	.word	0x080097b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b972 	b.w	8000f04 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <read_from_eeprom_single_byte>:
		HAL_Delay(500);
	}
}

ERRORS read_from_eeprom_single_byte(uint16_t addr, uint8_t* read_buffer)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af04      	add	r7, sp, #16
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	80fb      	strh	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr, 1, read_buffer, sizeof(*read_buffer), HAL_MAX_DELAY)!= HAL_OK)
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	21a0      	movs	r1, #160	; 0xa0
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <read_from_eeprom_single_byte+0x3c>)
 8000f2a:	f003 fc27 	bl	800477c <HAL_I2C_Mem_Read>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <read_from_eeprom_single_byte+0x30>
	{
		/*char msg[] = "EEPROM_READ_ERROR";
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);*/
		return EEPROM_READ_ERROR;
 8000f34:	2306      	movs	r3, #6
 8000f36:	e000      	b.n	8000f3a <read_from_eeprom_single_byte+0x32>
	}
	return OK;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000021c 	.word	0x2000021c

08000f48 <read_from_eeprom_byte_by_byte>:

ERRORS read_from_eeprom_byte_by_byte(uint16_t addr, uint8_t num_of_bytes, uint8_t* read_buffer)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	4603      	mov	r3, r0
 8000f50:	603a      	str	r2, [r7, #0]
 8000f52:	80fb      	strh	r3, [r7, #6]
 8000f54:	460b      	mov	r3, r1
 8000f56:	717b      	strb	r3, [r7, #5]
	for(uint8_t i=0;i<num_of_bytes;++i)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e01f      	b.n	8000f9e <read_from_eeprom_byte_by_byte+0x56>
	{
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr+i, 1, (uint8_t*)(read_buffer+i), sizeof(read_buffer[i]), HAL_MAX_DELAY)!= HAL_OK)
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4413      	add	r3, r2
 8000f66:	b299      	uxth	r1, r3
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f72:	9202      	str	r2, [sp, #8]
 8000f74:	2201      	movs	r2, #1
 8000f76:	9201      	str	r2, [sp, #4]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	21a0      	movs	r1, #160	; 0xa0
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <read_from_eeprom_byte_by_byte+0x68>)
 8000f82:	f003 fbfb 	bl	800477c <HAL_I2C_Mem_Read>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <read_from_eeprom_byte_by_byte+0x48>
		{
			/*char msg[] = "EEPROM_READ_ERROR";
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);*/
			return EEPROM_READ_ERROR;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	e00b      	b.n	8000fa8 <read_from_eeprom_byte_by_byte+0x60>
		}
		HAL_Delay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f001 fbd0 	bl	8002738 <HAL_Delay>
	for(uint8_t i=0;i<num_of_bytes;++i)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3db      	bcc.n	8000f5e <read_from_eeprom_byte_by_byte+0x16>
	}
	return OK;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000021c 	.word	0x2000021c

08000fb4 <check_eeprom_data>:
		}
	HAL_Delay(5000);
}

ERRORS check_eeprom_data()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	char data_start_check = 0, data_end_check = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71bb      	strb	r3, [r7, #6]
	if((read_from_eeprom_single_byte(EEPROM_DATA_START_ADDR, (uint8_t*)&data_start_check) != OK)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ff9e 	bl	8000f08 <read_from_eeprom_single_byte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <check_eeprom_data+0x2e>
			|| 	(read_from_eeprom_single_byte(EEPROM_DATA_END_ADDR, (uint8_t*)&data_end_check) != OK))
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f7ff ff96 	bl	8000f08 <read_from_eeprom_single_byte>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <check_eeprom_data+0x32>
	{
		return EEPROM_READ_ERROR;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e008      	b.n	8000ff8 <check_eeprom_data+0x44>
	}
	if(data_start_check != '<' || data_end_check != '>')
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b3c      	cmp	r3, #60	; 0x3c
 8000fea:	d102      	bne.n	8000ff2 <check_eeprom_data+0x3e>
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b3e      	cmp	r3, #62	; 0x3e
 8000ff0:	d001      	beq.n	8000ff6 <check_eeprom_data+0x42>
	{
		return EEPROM_DATA_INVALID;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e000      	b.n	8000ff8 <check_eeprom_data+0x44>
	}
	return OK;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <add_end_chars_to_sensor_info>:

void add_end_chars_to_sensor_info(struct sensor_info* si)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	si->version_num[VERSION_NUM_SIZE] 													= '\0';
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	709a      	strb	r2, [r3, #2]
	si->sensor_id[SENSOR_ID_SIZE] 														= '\0';
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	715a      	strb	r2, [r3, #5]
	si->sensor_type[SENSOR_TYPE_SIZE]													= '\0';
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	721a      	strb	r2, [r3, #8]
	si->current_per_ppm_coefficient_dec[CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE] 			= '\0';
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	72da      	strb	r2, [r3, #11]
	si->current_per_ppm_coefficient_frac[CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE] 		= '\0';
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	73da      	strb	r2, [r3, #15]
	si->threshold[THRESHOLD_SIZE]														= '\0';
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	74da      	strb	r2, [r3, #19]
	si->device_turned_on_with_sensor_counter[DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE] = '\0';
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
	si->sensor_fired_counter[SENSOR_FIRED_COUNTER_SIZE]									= '\0';
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	77da      	strb	r2, [r3, #31]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <map_sensor_info_to_sensor_data>:

//TODO check if there is any way to inspect if conversion went bad.
void map_sensor_info_to_sensor_data(struct sensor_info* si, struct sensor_data* sd) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	sd->version_num = (uint8_t)strtoul(si->version_num, NULL, 16);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2210      	movs	r2, #16
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f007 f895 	bl	8008184 <strtoul>
 800105a:	4603      	mov	r3, r0
 800105c:	b2da      	uxtb	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	701a      	strb	r2, [r3, #0]
	sd->sensor_id = (uint8_t)strtoul(si->sensor_id, NULL, 16);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3303      	adds	r3, #3
 8001066:	2210      	movs	r2, #16
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f007 f88a 	bl	8008184 <strtoul>
 8001070:	4603      	mov	r3, r0
 8001072:	b2da      	uxtb	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	705a      	strb	r2, [r3, #1]
	sd->sensor_type = (uint8_t)strtoul(si->sensor_type, NULL, 16);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3306      	adds	r3, #6
 800107c:	2210      	movs	r2, #16
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f007 f87f 	bl	8008184 <strtoul>
 8001086:	4603      	mov	r3, r0
 8001088:	b2da      	uxtb	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	709a      	strb	r2, [r3, #2]
	sd->current_per_ppm_coefficient_dec = (uint8_t)strtoul(si->current_per_ppm_coefficient_dec, NULL, 16);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3309      	adds	r3, #9
 8001092:	2210      	movs	r2, #16
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f007 f874 	bl	8008184 <strtoul>
 800109c:	4603      	mov	r3, r0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	70da      	strb	r2, [r3, #3]
	sd->current_per_ppm_coefficient_frac = (uint16_t)strtoul(si->current_per_ppm_coefficient_frac, NULL, 16);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	330c      	adds	r3, #12
 80010a8:	2210      	movs	r2, #16
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 f869 	bl	8008184 <strtoul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	809a      	strh	r2, [r3, #4]
	sd->threshold = (uint16_t)strtoul(si->threshold, NULL, 16);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3310      	adds	r3, #16
 80010be:	2210      	movs	r2, #16
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f007 f85e 	bl	8008184 <strtoul>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	80da      	strh	r2, [r3, #6]
	sd->device_turned_on_with_sensor_counter = (uint16_t)strtoul(si->device_turned_on_with_sensor_counter, NULL, 16);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3314      	adds	r3, #20
 80010d4:	2210      	movs	r2, #16
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 f853 	bl	8008184 <strtoul>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	811a      	strh	r2, [r3, #8]
	sd->sensor_fired_counter = (uint32_t)strtoul(si->sensor_fired_counter, NULL, 16);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3319      	adds	r3, #25
 80010ea:	2210      	movs	r2, #16
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 f848 	bl	8008184 <strtoul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	60da      	str	r2, [r3, #12]
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <read_sensor_data_from_eeprom>:


ERRORS read_sensor_data_from_eeprom(struct sensor_data* sd) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b08c      	sub	sp, #48	; 0x30
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	struct sensor_info si;
	ERRORS last_error=read_sensor_info_from_eeprom(&si);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f810 	bl	8001134 <read_sensor_info_from_eeprom>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	map_sensor_info_to_sensor_data(&si, sd);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff8f 	bl	8001044 <map_sensor_info_to_sensor_data>
	return last_error;
 8001126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800112a:	4618      	mov	r0, r3
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <read_sensor_info_from_eeprom>:

ERRORS read_sensor_info_from_eeprom(struct sensor_info* si)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	if(check_eeprom_data() != OK)
 800113c:	f7ff ff3a 	bl	8000fb4 <check_eeprom_data>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <read_sensor_info_from_eeprom+0x16>
		return EEPROM_DATA_INVALID;
 8001146:	2304      	movs	r3, #4
 8001148:	e077      	b.n	800123a <read_sensor_info_from_eeprom+0x106>


	if(read_from_eeprom_byte_by_byte(VERSION_NUM_ADDR, VERSION_NUM_SIZE, (uint8_t*)(si->version_num)) != OK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	461a      	mov	r2, r3
 800114e:	2102      	movs	r1, #2
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff fef9 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d001      	beq.n	8001160 <read_sensor_info_from_eeprom+0x2c>
	{
		return CRITICAL_ERROR;
 800115c:	2302      	movs	r3, #2
 800115e:	e06c      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	char forbidden_version[] = "00";
 8001160:	4a38      	ldr	r2, [pc, #224]	; (8001244 <read_sensor_info_from_eeprom+0x110>)
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	4611      	mov	r1, r2
 800116a:	8019      	strh	r1, [r3, #0]
 800116c:	3302      	adds	r3, #2
 800116e:	0c12      	lsrs	r2, r2, #16
 8001170:	701a      	strb	r2, [r3, #0]
	if(strcmp(si->version_num,forbidden_version) == 0) //if they are identical
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <read_sensor_info_from_eeprom+0x56>
	{
		return EEPROM_SENSOR_VERSION_INVALID;
 8001186:	2305      	movs	r3, #5
 8001188:	e057      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}

	if(read_from_eeprom_byte_by_byte(SENSOR_ID_ADDR, SENSOR_ID_SIZE, (uint8_t*)(si->sensor_id)) != OK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3303      	adds	r3, #3
 800118e:	461a      	mov	r2, r3
 8001190:	2102      	movs	r1, #2
 8001192:	2003      	movs	r0, #3
 8001194:	f7ff fed8 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <read_sensor_info_from_eeprom+0x6e>
	{
		return CRITICAL_ERROR;
 800119e:	2302      	movs	r3, #2
 80011a0:	e04b      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(SENSOR_TYPE_ADDR, SENSOR_TYPE_SIZE, (uint8_t*)(si->sensor_type)) != OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3306      	adds	r3, #6
 80011a6:	461a      	mov	r2, r3
 80011a8:	2102      	movs	r1, #2
 80011aa:	2005      	movs	r0, #5
 80011ac:	f7ff fecc 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <read_sensor_info_from_eeprom+0x86>
	{
		return CRITICAL_ERROR;
 80011b6:	2302      	movs	r3, #2
 80011b8:	e03f      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE,
			(uint8_t*)(si->current_per_ppm_coefficient_dec)) != OK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3309      	adds	r3, #9
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE,
 80011be:	461a      	mov	r2, r3
 80011c0:	2102      	movs	r1, #2
 80011c2:	2007      	movs	r0, #7
 80011c4:	f7ff fec0 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <read_sensor_info_from_eeprom+0x9e>
	{
		return CRITICAL_ERROR;
 80011ce:	2302      	movs	r3, #2
 80011d0:	e033      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE,
			(uint8_t*)(si->current_per_ppm_coefficient_frac)) != OK)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	330c      	adds	r3, #12
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE,
 80011d6:	461a      	mov	r2, r3
 80011d8:	2103      	movs	r1, #3
 80011da:	2009      	movs	r0, #9
 80011dc:	f7ff feb4 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <read_sensor_info_from_eeprom+0xb6>
	{
		return CRITICAL_ERROR;
 80011e6:	2302      	movs	r3, #2
 80011e8:	e027      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(THRESHOLD_ADDR, THRESHOLD_SIZE, (uint8_t*)(si->threshold)) != OK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3310      	adds	r3, #16
 80011ee:	461a      	mov	r2, r3
 80011f0:	2103      	movs	r1, #3
 80011f2:	200c      	movs	r0, #12
 80011f4:	f7ff fea8 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d001      	beq.n	8001202 <read_sensor_info_from_eeprom+0xce>
	{
		return CRITICAL_ERROR;
 80011fe:	2302      	movs	r3, #2
 8001200:	e01b      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE,
			(uint8_t*)(si->device_turned_on_with_sensor_counter)) != OK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3314      	adds	r3, #20
	if(read_from_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE,
 8001206:	461a      	mov	r2, r3
 8001208:	2104      	movs	r1, #4
 800120a:	200f      	movs	r0, #15
 800120c:	f7ff fe9c 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d001      	beq.n	800121a <read_sensor_info_from_eeprom+0xe6>
	{
		return CRITICAL_ERROR;
 8001216:	2302      	movs	r3, #2
 8001218:	e00f      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, SENSOR_FIRED_COUNTER_SIZE,
			(uint8_t*)(si->sensor_fired_counter)) != OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3319      	adds	r3, #25
	if(read_from_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, SENSOR_FIRED_COUNTER_SIZE,
 800121e:	461a      	mov	r2, r3
 8001220:	2106      	movs	r1, #6
 8001222:	2013      	movs	r0, #19
 8001224:	f7ff fe90 	bl	8000f48 <read_from_eeprom_byte_by_byte>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d001      	beq.n	8001232 <read_sensor_info_from_eeprom+0xfe>
	{
		return CRITICAL_ERROR;
 800122e:	2302      	movs	r3, #2
 8001230:	e003      	b.n	800123a <read_sensor_info_from_eeprom+0x106>
	}

	add_end_chars_to_sensor_info(si);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fee4 	bl	8001000 <add_end_chars_to_sensor_info>

	return OK;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	080098c4 	.word	0x080098c4

08001248 <show_read_sensor_data>:
	sprintf(msg_buffer,"+========================+\n\r");
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
}

void show_read_sensor_data(struct sensor_data* sd)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b0c2      	sub	sp, #264	; 0x108
 800124c:	af00      	add	r7, sp, #0
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	6018      	str	r0, [r3, #0]
	char msg_buffer[256];
	sprintf(msg_buffer,"+======EEPROM[d]=========+\n\r");
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4a75      	ldr	r2, [pc, #468]	; (800142c <show_read_sensor_data+0x1e4>)
 8001258:	461c      	mov	r4, r3
 800125a:	4615      	mov	r5, r2
 800125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001264:	c407      	stmia	r4!, {r0, r1, r2}
 8001266:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffb9 	bl	80001e4 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f107 0108 	add.w	r1, r7, #8
 800127a:	230a      	movs	r3, #10
 800127c:	486c      	ldr	r0, [pc, #432]	; (8001430 <show_read_sensor_data+0x1e8>)
 800127e:	f005 fbdd 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"VERSION NUMBER: %u\n\r", sd->version_num);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4969      	ldr	r1, [pc, #420]	; (8001434 <show_read_sensor_data+0x1ec>)
 8001290:	4618      	mov	r0, r3
 8001292:	f006 fedd 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe ffa2 	bl	80001e4 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f107 0108 	add.w	r1, r7, #8
 80012a8:	230a      	movs	r3, #10
 80012aa:	4861      	ldr	r0, [pc, #388]	; (8001430 <show_read_sensor_data+0x1e8>)
 80012ac:	f005 fbc6 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR ID: %u\n\r", sd->sensor_id);
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	785b      	ldrb	r3, [r3, #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	495e      	ldr	r1, [pc, #376]	; (8001438 <show_read_sensor_data+0x1f0>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fec6 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ff8b 	bl	80001e4 <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f107 0108 	add.w	r1, r7, #8
 80012d6:	230a      	movs	r3, #10
 80012d8:	4855      	ldr	r0, [pc, #340]	; (8001430 <show_read_sensor_data+0x1e8>)
 80012da:	f005 fbaf 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR TYPE: %u\n\r", sd->sensor_type);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	789b      	ldrb	r3, [r3, #2]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4954      	ldr	r1, [pc, #336]	; (800143c <show_read_sensor_data+0x1f4>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 feaf 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ff74 	bl	80001e4 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f107 0108 	add.w	r1, r7, #8
 8001304:	230a      	movs	r3, #10
 8001306:	484a      	ldr	r0, [pc, #296]	; (8001430 <show_read_sensor_data+0x1e8>)
 8001308:	f005 fb98 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"CURRENT_DEC: %u\n\r", sd->current_per_ppm_coefficient_dec);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	461a      	mov	r2, r3
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4949      	ldr	r1, [pc, #292]	; (8001440 <show_read_sensor_data+0x1f8>)
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fe98 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff5d 	bl	80001e4 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f107 0108 	add.w	r1, r7, #8
 8001332:	230a      	movs	r3, #10
 8001334:	483e      	ldr	r0, [pc, #248]	; (8001430 <show_read_sensor_data+0x1e8>)
 8001336:	f005 fb81 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"CURRENT FRAC: %u\n\r", sd->current_per_ppm_coefficient_frac);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	461a      	mov	r2, r3
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	493f      	ldr	r1, [pc, #252]	; (8001444 <show_read_sensor_data+0x1fc>)
 8001348:	4618      	mov	r0, r3
 800134a:	f006 fe81 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ff46 	bl	80001e4 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	f107 0108 	add.w	r1, r7, #8
 8001360:	230a      	movs	r3, #10
 8001362:	4833      	ldr	r0, [pc, #204]	; (8001430 <show_read_sensor_data+0x1e8>)
 8001364:	f005 fb6a 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"THRESHOLD: %u\n\r", sd->threshold);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	88db      	ldrh	r3, [r3, #6]
 800136e:	461a      	mov	r2, r3
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4934      	ldr	r1, [pc, #208]	; (8001448 <show_read_sensor_data+0x200>)
 8001376:	4618      	mov	r0, r3
 8001378:	f006 fe6a 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ff2f 	bl	80001e4 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	230a      	movs	r3, #10
 8001390:	4827      	ldr	r0, [pc, #156]	; (8001430 <show_read_sensor_data+0x1e8>)
 8001392:	f005 fb53 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"DEVICE ON COUNTER: %u\n\r", sd->device_turned_on_with_sensor_counter);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	891b      	ldrh	r3, [r3, #8]
 800139c:	461a      	mov	r2, r3
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	492a      	ldr	r1, [pc, #168]	; (800144c <show_read_sensor_data+0x204>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fe53 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe ff18 	bl	80001e4 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f107 0108 	add.w	r1, r7, #8
 80013bc:	230a      	movs	r3, #10
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <show_read_sensor_data+0x1e8>)
 80013c0:	f005 fb3c 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR FIRED COUNTER: %lu\n\r", sd->sensor_fired_counter);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4920      	ldr	r1, [pc, #128]	; (8001450 <show_read_sensor_data+0x208>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fe3d 	bl	8008050 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff02 	bl	80001e4 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	230a      	movs	r3, #10
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <show_read_sensor_data+0x1e8>)
 80013ec:	f005 fb26 	bl	8006a3c <HAL_UART_Transmit>
	sprintf(msg_buffer,"+========================+\n\r");
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <show_read_sensor_data+0x20c>)
 80013f6:	461c      	mov	r4, r3
 80013f8:	4615      	mov	r5, r2
 80013fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001402:	c407      	stmia	r4!, {r0, r1, r2}
 8001404:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe feea 	bl	80001e4 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0108 	add.w	r1, r7, #8
 8001418:	230a      	movs	r3, #10
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <show_read_sensor_data+0x1e8>)
 800141c:	f005 fb0e 	bl	8006a3c <HAL_UART_Transmit>
}
 8001420:	bf00      	nop
 8001422:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	080099b0 	.word	0x080099b0
 8001430:	20000334 	.word	0x20000334
 8001434:	080099d0 	.word	0x080099d0
 8001438:	080099e8 	.word	0x080099e8
 800143c:	080099f8 	.word	0x080099f8
 8001440:	08009a0c 	.word	0x08009a0c
 8001444:	08009a20 	.word	0x08009a20
 8001448:	08009a34 	.word	0x08009a34
 800144c:	08009a44 	.word	0x08009a44
 8001450:	08009a5c 	.word	0x08009a5c
 8001454:	08009990 	.word	0x08009990

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b0a9      	sub	sp, #164	; 0xa4
 800145c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f001 f8f6 	bl	800264e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f977 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f000 fb83 	bl	8001b70 <MX_GPIO_Init>
  MX_DMA_Init();
 800146a:	f000 fb63 	bl	8001b34 <MX_DMA_Init>
  MX_ADC1_Init();
 800146e:	f000 fa1f 	bl	80018b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001472:	f000 fa93 	bl	800199c <MX_I2C1_Init>
  MX_RTC_Init();
 8001476:	f000 fad1 	bl	8001a1c <MX_RTC_Init>
  MX_USART1_UART_Init();
 800147a:	f000 fb2b 	bl	8001ad4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800147e:	f000 fa03 	bl	8001888 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  button_pressed = 0;
 8001482:	4ba9      	ldr	r3, [pc, #676]	; (8001728 <main+0x2d0>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2108      	movs	r1, #8
 800148c:	48a7      	ldr	r0, [pc, #668]	; (800172c <main+0x2d4>)
 800148e:	f003 f8b5 	bl	80045fc <HAL_GPIO_WritePin>
#endif
  last_error=read_sensor_data_from_eeprom(&sd);
 8001492:	48a7      	ldr	r0, [pc, #668]	; (8001730 <main+0x2d8>)
 8001494:	f7ff fe35 	bl	8001102 <read_sensor_data_from_eeprom>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4ba5      	ldr	r3, [pc, #660]	; (8001734 <main+0x2dc>)
 800149e:	701a      	strb	r2, [r3, #0]
  #ifdef DEBUG_MODE
  show_read_sensor_data(&sd);
 80014a0:	48a3      	ldr	r0, [pc, #652]	; (8001730 <main+0x2d8>)
 80014a2:	f7ff fed1 	bl	8001248 <show_read_sensor_data>
  #endif


#ifdef DEBUG_MODE
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2108      	movs	r1, #8
 80014aa:	48a0      	ldr	r0, [pc, #640]	; (800172c <main+0x2d4>)
 80014ac:	f003 f8a6 	bl	80045fc <HAL_GPIO_WritePin>
#endif
  uint16_t max_value1 = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  uint16_t carbon_monoxide_measurements[CARBON_MONOXIDE_TWO_MINUTES];
  uint16_t carbon_monoxide_measurements_buffer[CARBON_MONOXIDE_TWO_MINUTES];
  uint8_t carbon_monoxide_triggered = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  double avg = 0;
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f04f 0400 	mov.w	r4, #0
 80014c4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  uint8_t carbon_monoxide_buffer_full = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int loop_counter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(last_error == OK)
 80014d4:	4b97      	ldr	r3, [pc, #604]	; (8001734 <main+0x2dc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f040 810f 	bne.w	80016fc <main+0x2a4>
	  {
		  if(sd.sensor_type == ETHANOL) {
 80014de:	4b94      	ldr	r3, [pc, #592]	; (8001730 <main+0x2d8>)
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d178      	bne.n	80015d8 <main+0x180>
			  if(!loop_counter) {
 80014e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10b      	bne.n	8001506 <main+0xae>
				  power_mode_sleep(&hrtc, INFINITE_SLEEP_TIME); //or just sleep until interrupt comes.
 80014ee:	2100      	movs	r1, #0
 80014f0:	4891      	ldr	r0, [pc, #580]	; (8001738 <main+0x2e0>)
 80014f2:	f000 fde3 	bl	80020bc <power_mode_sleep>
				  reinitializePeriphs();
 80014f6:	f000 fbf3 	bl	8001ce0 <reinitializePeriphs>
				  avg = 0;
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	f04f 0400 	mov.w	r4, #0
 8001502:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			  }
			  if(loop_counter != ETHANOL_LOOPS)
 8001506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d019      	beq.n	8001542 <main+0xea>
			  {
				  loop_counter++;
 800150e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				  single_measurement(ETHANOL_DELAY_BETWEEN_MEASUREMENTS);
 8001518:	20c8      	movs	r0, #200	; 0xc8
 800151a:	f000 fd83 	bl	8002024 <single_measurement>
				  //max_value1=(measured_values[0]>max_value1)?measured_values[0]:max_value1;
				  avg+=measured_values[0];
 800151e:	4b87      	ldr	r3, [pc, #540]	; (800173c <main+0x2e4>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f80e 	bl	8000544 <__aeabi_i2d>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001534:	f7fe feba 	bl	80002ac <__adddf3>
 8001538:	4603      	mov	r3, r0
 800153a:	460c      	mov	r4, r1
 800153c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8001540:	e7c8      	b.n	80014d4 <main+0x7c>
			  }
			  else
			  {
				  avg/=ETHANOL_LOOPS;
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b7e      	ldr	r3, [pc, #504]	; (8001740 <main+0x2e8>)
 8001548:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800154c:	f7ff f98e 	bl	800086c <__aeabi_ddiv>
 8001550:	4603      	mov	r3, r0
 8001552:	460c      	mov	r4, r1
 8001554:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				  loop_counter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				  char* buffer = (char*)malloc(140);
 800155e:	208c      	movs	r0, #140	; 0x8c
 8001560:	f006 f852 	bl	8007608 <malloc>
 8001564:	4603      	mov	r3, r0
 8001566:	67fb      	str	r3, [r7, #124]	; 0x7c
				  double holder = (avg-200)/27.65;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <main+0x2ec>)
 800156e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001572:	f7fe fe99 	bl	80002a8 <__aeabi_dsub>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	4618      	mov	r0, r3
 800157c:	4621      	mov	r1, r4
 800157e:	a364      	add	r3, pc, #400	; (adr r3, 8001710 <main+0x2b8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f972 	bl	800086c <__aeabi_ddiv>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
				  double brac = (holder/260);
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <main+0x2f0>)
 8001596:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800159a:	f7ff f967 	bl	800086c <__aeabi_ddiv>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				  double bac = brac*2.1;
 80015a6:	a35c      	add	r3, pc, #368	; (adr r3, 8001718 <main+0x2c0>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80015b0:	f7ff f832 	bl	8000618 <__aeabi_dmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
				  sprintf(buffer,"Wynik BrAC: %.2f. Wynik BAC: %.2f", brac, bac);
 80015bc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80015c0:	e9cd 3400 	strd	r3, r4, [sp]
 80015c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015c8:	4960      	ldr	r1, [pc, #384]	; (800174c <main+0x2f4>)
 80015ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80015cc:	f006 fd40 	bl	8008050 <siprintf>
//				  sprintf(buffer,"Wynik[ADC]: measured[0] %u", max_value1);
//				  send_sms(buffer);
				  button_pressed = 0;
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <main+0x2d0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	e77d      	b.n	80014d4 <main+0x7c>
//			  else
//			  {
//				  carbon_monoxide_measurements[loop_counter] = measured_values[0];
//				  loop_counter++;
//			  }
			  power_mode_sleep(&hrtc, CARBON_MONOXIDE_SLEEP_TIME);
 80015d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80015dc:	4856      	ldr	r0, [pc, #344]	; (8001738 <main+0x2e0>)
 80015de:	f000 fd6d 	bl	80020bc <power_mode_sleep>
			  reinitializePeriphs();
 80015e2:	f000 fb7d 	bl	8001ce0 <reinitializePeriphs>
			  single_measurement(STANDARD_DELAY_AFTER_MEASUREMENT);
 80015e6:	2064      	movs	r0, #100	; 0x64
 80015e8:	f000 fd1c 	bl	8002024 <single_measurement>
			  if(carbon_monoxide_buffer_full)
 80015ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d06b      	beq.n	80016cc <main+0x274>
			  {
				  for(uint8_t i=1;i<CARBON_MONOXIDE_TWO_MINUTES; ++i)
 80015f4:	2301      	movs	r3, #1
 80015f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80015fa:	e02d      	b.n	8001658 <main+0x200>
				  {
					  carbon_monoxide_measurements[i-1]=carbon_monoxide_measurements[i];
 80015fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001600:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001604:	3a01      	subs	r2, #1
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800160c:	440b      	add	r3, r1
 800160e:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 8001612:	0053      	lsls	r3, r2, #1
 8001614:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001618:	4413      	add	r3, r2
 800161a:	460a      	mov	r2, r1
 800161c:	f823 2c68 	strh.w	r2, [r3, #-104]
					  avg+=carbon_monoxide_measurements[i];
 8001620:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800162a:	4413      	add	r3, r2
 800162c:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff87 	bl	8000544 <__aeabi_i2d>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	461a      	mov	r2, r3
 800163c:	4623      	mov	r3, r4
 800163e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001642:	f7fe fe33 	bl	80002ac <__adddf3>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				  for(uint8_t i=1;i<CARBON_MONOXIDE_TWO_MINUTES; ++i)
 800164e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001652:	3301      	adds	r3, #1
 8001654:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001658:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800165c:	2b17      	cmp	r3, #23
 800165e:	d9cd      	bls.n	80015fc <main+0x1a4>
				  }
				  carbon_monoxide_measurements[CARBON_MONOXIDE_TWO_MINUTES-1] = measured_values[0];
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <main+0x2e4>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				  avg+= carbon_monoxide_measurements[CARBON_MONOXIDE_TWO_MINUTES-1];
 8001668:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff69 	bl	8000544 <__aeabi_i2d>
 8001672:	4603      	mov	r3, r0
 8001674:	460c      	mov	r4, r1
 8001676:	461a      	mov	r2, r3
 8001678:	4623      	mov	r3, r4
 800167a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800167e:	f7fe fe15 	bl	80002ac <__adddf3>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				  avg /= CARBON_MONOXIDE_TWO_MINUTES;
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <main+0x2f8>)
 8001690:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001694:	f7ff f8ea 	bl	800086c <__aeabi_ddiv>
 8001698:	4603      	mov	r3, r0
 800169a:	460c      	mov	r4, r1
 800169c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				  if(avg >= CARBON_MONOXIDE_THIRD_TIER)
 80016a0:	a31f      	add	r3, pc, #124	; (adr r3, 8001720 <main+0x2c8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80016aa:	f7ff fa3b 	bl	8000b24 <__aeabi_dcmpge>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <main+0x268>
				  {
					  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2108      	movs	r1, #8
 80016b8:	481c      	ldr	r0, [pc, #112]	; (800172c <main+0x2d4>)
 80016ba:	f002 ff9f 	bl	80045fc <HAL_GPIO_WritePin>
 80016be:	e709      	b.n	80014d4 <main+0x7c>
				  }
				  else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2108      	movs	r1, #8
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <main+0x2d4>)
 80016c6:	f002 ff99 	bl	80045fc <HAL_GPIO_WritePin>
 80016ca:	e703      	b.n	80014d4 <main+0x7c>
			  }
			  else
			  {
				  carbon_monoxide_measurements[loop_counter] = measured_values[0];
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <main+0x2e4>)
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80016da:	440b      	add	r3, r1
 80016dc:	f823 2c68 	strh.w	r2, [r3, #-104]
				  loop_counter++;
 80016e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				  if(loop_counter == CARBON_MONOXIDE_TWO_MINUTES)
 80016ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016ee:	2b18      	cmp	r3, #24
 80016f0:	f47f aef0 	bne.w	80014d4 <main+0x7c>
					  carbon_monoxide_buffer_full=1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80016fa:	e6eb      	b.n	80014d4 <main+0x7c>
			  }
		  }
	  }
	  else
	  {
		  signal_error(last_error);
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <main+0x2dc>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fc7f 	bl	8002004 <signal_error>
		  while(1)
		  {
			  HAL_Delay(1000);
 8001706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170a:	f001 f815 	bl	8002738 <HAL_Delay>
 800170e:	e7fa      	b.n	8001706 <main+0x2ae>
 8001710:	66666666 	.word	0x66666666
 8001714:	403ba666 	.word	0x403ba666
 8001718:	cccccccd 	.word	0xcccccccd
 800171c:	4000cccc 	.word	0x4000cccc
 8001720:	00000000 	.word	0x00000000
 8001724:	40966800 	.word	0x40966800
 8001728:	20000330 	.word	0x20000330
 800172c:	48000400 	.word	0x48000400
 8001730:	20001438 	.word	0x20001438
 8001734:	2000020c 	.word	0x2000020c
 8001738:	20001404 	.word	0x20001404
 800173c:	20001448 	.word	0x20001448
 8001740:	40590000 	.word	0x40590000
 8001744:	40690000 	.word	0x40690000
 8001748:	40704000 	.word	0x40704000
 800174c:	08009a78 	.word	0x08009a78
 8001750:	40380000 	.word	0x40380000

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0ac      	sub	sp, #176	; 0xb0
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800175e:	2244      	movs	r2, #68	; 0x44
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f005 ff58 	bl	8007618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2254      	movs	r2, #84	; 0x54
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 ff4a 	bl	8007618 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001784:	f003 fb8e 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <SystemClock_Config+0x12c>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a3c      	ldr	r2, [pc, #240]	; (8001880 <SystemClock_Config+0x12c>)
 8001790:	f023 0318 	bic.w	r3, r3, #24
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001798:	2314      	movs	r3, #20
 800179a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80017c4:	2310      	movs	r3, #16
 80017c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017ca:	2307      	movs	r3, #7
 80017cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fc4f 	bl	8005084 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017ec:	f000 fc5e 	bl	80020ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2303      	movs	r3, #3
 80017f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001804:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001808:	2101      	movs	r1, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f004 f85a 	bl	80058c4 <HAL_RCC_ClockConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001816:	f000 fc49 	bl	80020ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <SystemClock_Config+0x130>)
 800181c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800182c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001830:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001832:	2301      	movs	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800183a:	2310      	movs	r3, #16
 800183c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800183e:	2307      	movs	r3, #7
 8001840:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001846:	2302      	movs	r3, #2
 8001848:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800184a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800184e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4618      	mov	r0, r3
 8001854:	f004 fa3a 	bl	8005ccc <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800185e:	f000 fc25 	bl	80020ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001866:	f003 fb6f 	bl	8004f48 <HAL_PWREx_ControlVoltageScaling>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001870:	f000 fc1c 	bl	80020ac <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001874:	f004 fc1c 	bl	80060b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001878:	bf00      	nop
 800187a:	37b0      	adds	r7, #176	; 0xb0
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	00024041 	.word	0x00024041

08001888 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200b      	movs	r0, #11
 8001892:	f002 fa9c 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001896:	200b      	movs	r0, #11
 8001898:	f002 fab5 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* RTC_WKUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2003      	movs	r0, #3
 80018a2:	f002 fa94 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80018a6:	2003      	movs	r0, #3
 80018a8:	f002 faad 	bl	8003e06 <HAL_NVIC_EnableIRQ>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <MX_ADC1_Init+0xdc>)
 80018c8:	4a31      	ldr	r2, [pc, #196]	; (8001990 <MX_ADC1_Init+0xe0>)
 80018ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <MX_ADC1_Init+0xdc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <MX_ADC1_Init+0xdc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <MX_ADC1_Init+0xdc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <MX_ADC1_Init+0xdc>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e4:	4b29      	ldr	r3, [pc, #164]	; (800198c <MX_ADC1_Init+0xdc>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <MX_ADC1_Init+0xdc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <MX_ADC1_Init+0xdc>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <MX_ADC1_Init+0xdc>)
 80018f8:	2202      	movs	r2, #2
 80018fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_ADC1_Init+0xdc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_ADC1_Init+0xdc>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <MX_ADC1_Init+0xdc>)
 800190c:	2200      	movs	r2, #0
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <MX_ADC1_Init+0xdc>)
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_ADC1_Init+0xdc>)
 800191a:	2200      	movs	r2, #0
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_ADC1_Init+0xdc>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001926:	4819      	ldr	r0, [pc, #100]	; (800198c <MX_ADC1_Init+0xdc>)
 8001928:	f001 f95e 	bl	8002be8 <HAL_ADC_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001932:	f000 fbbb 	bl	80020ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_ADC1_Init+0xe4>)
 8001938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800193a:	2306      	movs	r3, #6
 800193c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800193e:	2307      	movs	r3, #7
 8001940:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001942:	237f      	movs	r3, #127	; 0x7f
 8001944:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001946:	2304      	movs	r3, #4
 8001948:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <MX_ADC1_Init+0xdc>)
 8001954:	f001 fb88 	bl	8003068 <HAL_ADC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800195e:	f000 fba5 	bl	80020ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <MX_ADC1_Init+0xe8>)
 8001964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001966:	230c      	movs	r3, #12
 8001968:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800196a:	2302      	movs	r3, #2
 800196c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <MX_ADC1_Init+0xdc>)
 8001974:	f001 fb78 	bl	8003068 <HAL_ADC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800197e:	f000 fb95 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200003b8 	.word	0x200003b8
 8001990:	50040000 	.word	0x50040000
 8001994:	25b00200 	.word	0x25b00200
 8001998:	2e300800 	.word	0x2e300800

0800199c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <MX_I2C1_Init+0x78>)
 80019a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <MX_I2C1_Init+0x7c>)
 80019aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019d8:	f002 fe40 	bl	800465c <HAL_I2C_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019e2:	f000 fb63 	bl	80020ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019ea:	f003 f9c3 	bl	8004d74 <HAL_I2CEx_ConfigAnalogFilter>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019f4:	f000 fb5a 	bl	80020ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019f8:	2100      	movs	r1, #0
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_I2C1_Init+0x74>)
 80019fc:	f003 fa05 	bl	8004e0a <HAL_I2CEx_ConfigDigitalFilter>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a06:	f000 fb51 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000021c 	.word	0x2000021c
 8001a14:	40005400 	.word	0x40005400
 8001a18:	00707cbb 	.word	0x00707cbb

08001a1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a36:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <MX_RTC_Init+0xb4>)
 8001a38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a42:	227f      	movs	r2, #127	; 0x7f
 8001a44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a48:	22ff      	movs	r2, #255	; 0xff
 8001a4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a64:	4819      	ldr	r0, [pc, #100]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a66:	f004 fc23 	bl	80062b0 <HAL_RTC_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001a70:	f000 fb1c 	bl	80020ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480f      	ldr	r0, [pc, #60]	; (8001acc <MX_RTC_Init+0xb0>)
 8001a90:	f004 fc89 	bl	80063a6 <HAL_RTC_SetTime>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001a9a:	f000 fb07 	bl	80020ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8001aa6:	2312      	movs	r3, #18
 8001aa8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x99;
 8001aaa:	2399      	movs	r3, #153	; 0x99
 8001aac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_RTC_Init+0xb0>)
 8001ab6:	f004 fd13 	bl	80064e0 <HAL_RTC_SetDate>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001ac0:	f000 faf4 	bl	80020ac <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20001404 	.word	0x20001404
 8001ad0:	40002800 	.word	0x40002800

08001ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <MX_USART1_UART_Init+0x5c>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_USART1_UART_Init+0x58>)
 8001b18:	f004 ff42 	bl	80069a0 <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b22:	f000 fac3 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200002b0 	.word	0x200002b0
 8001b30:	40013800 	.word	0x40013800

08001b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_DMA_Init+0x38>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <MX_DMA_Init+0x38>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6493      	str	r3, [r2, #72]	; 0x48
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_DMA_Init+0x38>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200f      	movs	r0, #15
 8001b58:	f002 f939 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b5c:	200f      	movs	r0, #15
 8001b5e:	f002 f952 	bl	8003e06 <HAL_NVIC_EnableIRQ>

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b52      	ldr	r3, [pc, #328]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SIM808_PWR_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2128      	movs	r1, #40	; 0x28
 8001bea:	483a      	ldr	r0, [pc, #232]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001bec:	f002 fd06 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7
                           PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 8001bf0:	f641 13aa 	movw	r3, #6570	; 0x19aa
 8001bf4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 fb8e 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2a:	f002 fb7d 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001c2e:	2311      	movs	r3, #17
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c32:	2303      	movs	r3, #3
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4824      	ldr	r0, [pc, #144]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001c42:	f002 fb71 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001c46:	2302      	movs	r3, #2
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	481e      	ldr	r0, [pc, #120]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001c5a:	f002 fb65 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c70:	2303      	movs	r3, #3
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7e:	f002 fb53 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SIM808_PWR_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SIM808_PWR_Pin;
 8001c82:	2328      	movs	r3, #40	; 0x28
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001c9a:	f002 fb45 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <MX_GPIO_Init+0x16c>)
 8001cb2:	f002 fb39 	bl	8004328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2101      	movs	r1, #1
 8001cba:	2007      	movs	r0, #7
 8001cbc:	f002 f887 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cc0:	2007      	movs	r0, #7
 8001cc2:	f002 f8a0 	bl	8003e06 <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	10210000 	.word	0x10210000
 8001cdc:	48001c00 	.word	0x48001c00

08001ce0 <reinitializePeriphs>:

/* USER CODE BEGIN 4 */
void reinitializePeriphs()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8001ce4:	f7ff fd36 	bl	8001754 <SystemClock_Config>
	MX_GPIO_Init();
 8001ce8:	f7ff ff42 	bl	8001b70 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001cec:	f7ff fde0 	bl	80018b0 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001cf0:	f7ff fe54 	bl	800199c <MX_I2C1_Init>
	MX_DMA_Init();
 8001cf4:	f7ff ff1e 	bl	8001b34 <MX_DMA_Init>
	HAL_UART_MspInit(&huart1);
 8001cf8:	4803      	ldr	r0, [pc, #12]	; (8001d08 <reinitializePeriphs+0x28>)
 8001cfa:	f000 fb33 	bl	8002364 <HAL_UART_MspInit>
	MX_USART1_UART_Init();
 8001cfe:	f7ff fee9 	bl	8001ad4 <MX_USART1_UART_Init>
//	HAL_UART_MspInit(&huart2);
//	MX_USART2_UART_Init();
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002b0 	.word	0x200002b0

08001d0c <GPIO_AnalogState_Config>:
/*
 * TODO
 * leave one port/PIN for Ethanol sensor to wake up from the button press
 */
void GPIO_AnalogState_Config()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d72:	2303      	movs	r3, #3
 8001d74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Pin = GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14);
 8001d7e:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001d82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f002 facb 	bl	8004328 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_All & ~(BUTTON_Pin);
 8001d92:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001d96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4816      	ldr	r0, [pc, #88]	; (8001df8 <GPIO_AnalogState_Config+0xec>)
 8001da0:	f002 fac2 	bl	8004328 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <GPIO_AnalogState_Config+0xf0>)
 8001dac:	f002 fabc 	bl	8004328 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4812      	ldr	r0, [pc, #72]	; (8001e00 <GPIO_AnalogState_Config+0xf4>)
 8001db8:	f002 fab6 	bl	8004328 <HAL_GPIO_Init>

	__HAL_RCC_GPIOA_CLK_DISABLE();
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001dce:	f023 0302 	bic.w	r3, r3, #2
 8001dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <GPIO_AnalogState_Config+0xe8>)
 8001de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dea:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000400 	.word	0x48000400
 8001dfc:	48000800 	.word	0x48000800
 8001e00:	48001c00 	.word	0x48001c00

08001e04 <SystemClock_Low>:

void SystemClock_Low(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b096      	sub	sp, #88	; 0x58
 8001e08:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2244      	movs	r2, #68	; 0x44
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 fbf9 	bl	8007618 <memset>

  /* MSI is enabled after System reset, update MSI to 24Mhz (RCC_MSIRANGE_9) */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e26:	2310      	movs	r3, #16
 8001e28:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8001e36:	2301      	movs	r3, #1
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 f921 	bl	8005084 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Low+0x48>
  {
    /* Initialization Error */
    Error_Handler();
 8001e48:	f000 f930 	bl	80020ac <Error_Handler>
  }

  /* Select MSI as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e50:	2300      	movs	r3, #0
 8001e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e64:	2103      	movs	r1, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fd2c 	bl	80058c4 <HAL_RCC_ClockConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SystemClock_Low+0x72>
  {
    /* Initialization Error */
    Error_Handler();
 8001e72:	f000 f91b 	bl	80020ac <Error_Handler>
  }

}
 8001e76:	bf00      	nop
 8001e78:	3758      	adds	r7, #88	; 0x58
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
		if(!filter_done)
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x110>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d17b      	bne.n	8001f88 <HAL_ADC_ConvCpltCallback+0x108>
		{
			filter_buffer_sensor[filter_counter] = adc_vals[0];
 8001e90:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x114>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x118>)
 8001e98:	8819      	ldrh	r1, [r3, #0]
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			filter_buffer_battery[filter_counter] = adc_vals[1];
 8001ea0:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x114>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x118>)
 8001ea8:	8859      	ldrh	r1, [r3, #2]
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_ADC_ConvCpltCallback+0x120>)
 8001eac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if(filter_counter == FILTER_BUFFER_SIZE-1)
 8001eb0:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x114>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d15f      	bne.n	8001f7c <HAL_ADC_ConvCpltCallback+0xfc>
			{
				for(int i=0;i<FILTER_BUFFER_SIZE;++i)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e014      	b.n	8001eec <HAL_ADC_ConvCpltCallback+0x6c>
				{
					holder[0] += filter_buffer_sensor[i];
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_ADC_ConvCpltCallback+0x11c>)
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a34      	ldr	r2, [pc, #208]	; (8001fa4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ed2:	6013      	str	r3, [r2, #0]
					holder[1] += filter_buffer_battery[i];
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4931      	ldr	r1, [pc, #196]	; (8001fa0 <HAL_ADC_ConvCpltCallback+0x120>)
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ee4:	6053      	str	r3, [r2, #4]
				for(int i=0;i<FILTER_BUFFER_SIZE;++i)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef2:	dbe6      	blt.n	8001ec2 <HAL_ADC_ConvCpltCallback+0x42>
				}
				for(int i=0;i<NUM_OF_MEASUREMENTS;++i)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	e036      	b.n	8001f68 <HAL_ADC_ConvCpltCallback+0xe8>
				{
					measured_values_double[i] = 54 + ((holder[i]/FILTER_BUFFER_SIZE)*3300)/MAX_ADC_VALUE;
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	4a29      	ldr	r2, [pc, #164]	; (8001fa8 <HAL_ADC_ConvCpltCallback+0x128>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001f0e:	fb02 f203 	mul.w	r2, r2, r3
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_ADC_ConvCpltCallback+0x12c>)
 8001f14:	fba3 1302 	umull	r1, r3, r3, r2
 8001f18:	1ad2      	subs	r2, r2, r3
 8001f1a:	0852      	lsrs	r2, r2, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	3336      	adds	r3, #54	; 0x36
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fafe 	bl	8000524 <__aeabi_ui2d>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4920      	ldr	r1, [pc, #128]	; (8001fb0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	00d2      	lsls	r2, r2, #3
 8001f32:	440a      	add	r2, r1
 8001f34:	e9c2 3400 	strd	r3, r4, [r2]
					measured_values[i] = (uint16_t)measured_values_double[i];
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f44:	4618      	mov	r0, r3
 8001f46:	4621      	mov	r1, r4
 8001f48:	f7fe fe3e 	bl	8000bc8 <__aeabi_d2uiz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0x134>)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					holder[i] = 0;
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<NUM_OF_MEASUREMENTS;++i)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	ddc5      	ble.n	8001efa <HAL_ADC_ConvCpltCallback+0x7a>
				}
				filter_done = 1;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x110>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
				filter_counter = 0;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x114>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	801a      	strh	r2, [r3, #0]
		}
		else
		{
			//do nothing
		}
}
 8001f7a:	e005      	b.n	8001f88 <HAL_ADC_ConvCpltCallback+0x108>
				filter_counter++;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x114>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x114>)
 8001f86:	801a      	strh	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	20000202 	.word	0x20000202
 8001f94:	20000200 	.word	0x20000200
 8001f98:	200001fc 	.word	0x200001fc
 8001f9c:	20000bec 	.word	0x20000bec
 8001fa0:	2000041c 	.word	0x2000041c
 8001fa4:	20000204 	.word	0x20000204
 8001fa8:	10624dd3 	.word	0x10624dd3
 8001fac:	00100101 	.word	0x00100101
 8001fb0:	20001428 	.word	0x20001428
 8001fb4:	20001448 	.word	0x20001448

08001fb8 <signal_with_diodes_ms>:

void signal_with_diodes_ms(int num_of_loops, uint32_t ms)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<num_of_loops;++i)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e012      	b.n	8001fee <signal_with_diodes_ms+0x36>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2108      	movs	r1, #8
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <signal_with_diodes_ms+0x48>)
 8001fce:	f002 fb15 	bl	80045fc <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 8001fd2:	6838      	ldr	r0, [r7, #0]
 8001fd4:	f000 fbb0 	bl	8002738 <HAL_Delay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2108      	movs	r1, #8
 8001fdc:	4808      	ldr	r0, [pc, #32]	; (8002000 <signal_with_diodes_ms+0x48>)
 8001fde:	f002 fb0d 	bl	80045fc <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 8001fe2:	6838      	ldr	r0, [r7, #0]
 8001fe4:	f000 fba8 	bl	8002738 <HAL_Delay>
	for(int i=0;i<num_of_loops;++i)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbe8      	blt.n	8001fc8 <signal_with_diodes_ms+0x10>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	48000400 	.word	0x48000400

08002004 <signal_error>:

void signal_error(ERRORS err)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	signal_with_diodes_ms(err, 1000);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ffcf 	bl	8001fb8 <signal_with_diodes_ms>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <single_measurement>:
	else return THRESHOLD_LEVEL_EXCEEDED;
}



void single_measurement(uint16_t delay_after_measurement) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_vals, 2);
 800202e:	2202      	movs	r2, #2
 8002030:	4910      	ldr	r1, [pc, #64]	; (8002074 <single_measurement+0x50>)
 8002032:	4811      	ldr	r0, [pc, #68]	; (8002078 <single_measurement+0x54>)
 8002034:	f000 ff1e 	bl	8002e74 <HAL_ADC_Start_DMA>
	while(!filter_done){}
 8002038:	bf00      	nop
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <single_measurement+0x58>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0fb      	beq.n	800203a <single_measurement+0x16>
	HAL_ADC_Stop_DMA(&hadc1);
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <single_measurement+0x54>)
 8002044:	f000 ff9a 	bl	8002f7c <HAL_ADC_Stop_DMA>
	filter_done = 0;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <single_measurement+0x58>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	2108      	movs	r1, #8
 8002052:	480b      	ldr	r0, [pc, #44]	; (8002080 <single_measurement+0x5c>)
 8002054:	f002 fad2 	bl	80045fc <HAL_GPIO_WritePin>
	HAL_Delay(delay_after_measurement);
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fb6c 	bl	8002738 <HAL_Delay>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2108      	movs	r1, #8
 8002064:	4806      	ldr	r0, [pc, #24]	; (8002080 <single_measurement+0x5c>)
 8002066:	f002 fac9 	bl	80045fc <HAL_GPIO_WritePin>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200001fc 	.word	0x200001fc
 8002078:	200003b8 	.word	0x200003b8
 800207c:	20000202 	.word	0x20000202
 8002080:	48000400 	.word	0x48000400

08002084 <HAL_GPIO_EXTI_Callback>:
//	MX_GPIO_Init();
//}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d102      	bne.n	800209a <HAL_GPIO_EXTI_Callback+0x16>
		button_pressed = 1;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
	}
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000330 	.word	0x20000330

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	signal_with_diodes_ms(10,200);
  /* USER CODE END Error_Handler_Debug */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <power_mode_sleep>:
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON,PWR_STOPENTRY_WFI);
}


void power_mode_sleep(RTC_HandleTypeDef* hrtc, uint16_t timer)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
	/* Set all GPIO in analog state to reduce power consumption */
	GPIO_AnalogState_Config();
 80020c8:	f7ff fe20 	bl	8001d0c <GPIO_AnalogState_Config>

	/* Set the System clock to low freq TODO 1MHz? */
	SystemClock_Low();
 80020cc:	f7ff fe9a 	bl	8001e04 <SystemClock_Low>

	/* Enable Power Clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <power_mode_sleep+0xac>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <power_mode_sleep+0xac>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6593      	str	r3, [r2, #88]	; 0x58
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <power_mode_sleep+0xac>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
	/* Configure the main internal regulator output voltage */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020ec:	f002 ff2c 	bl	8004f48 <HAL_PWREx_ControlVoltageScaling>

	/* Set timer for timer s */
	if(timer)
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <power_mode_sleep+0x46>
		HAL_RTCEx_SetWakeUpTimer_IT(hrtc, timer, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f004 fb2d 	bl	800675c <HAL_RTCEx_SetWakeUpTimer_IT>

	/* Suspend Tick increment to prevent wakeup by Systick interrupt.         */
	/* Otherwise the Systick interrupt will wake up the device within 1ms     */
	/* (HAL time base).                                                       */
	HAL_SuspendTick();
 8002102:	f000 fb3b 	bl	800277c <HAL_SuspendTick>

	/* Switch off all clock enable ... */
	RCC->AHB1SMENR = 0x0;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <power_mode_sleep+0xac>)
 8002108:	2200      	movs	r2, #0
 800210a:	669a      	str	r2, [r3, #104]	; 0x68
	RCC->AHB2SMENR = 0x0;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <power_mode_sleep+0xac>)
 800210e:	2200      	movs	r2, #0
 8002110:	66da      	str	r2, [r3, #108]	; 0x6c
	RCC->AHB3SMENR = 0x0;
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <power_mode_sleep+0xac>)
 8002114:	2200      	movs	r2, #0
 8002116:	671a      	str	r2, [r3, #112]	; 0x70
	RCC->APB1SMENR1 = 0x0;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <power_mode_sleep+0xac>)
 800211a:	2200      	movs	r2, #0
 800211c:	679a      	str	r2, [r3, #120]	; 0x78
	RCC->APB1SMENR2 = 0x0;
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <power_mode_sleep+0xac>)
 8002120:	2200      	movs	r2, #0
 8002122:	67da      	str	r2, [r3, #124]	; 0x7c
	RCC->APB2SMENR = 0x0;
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <power_mode_sleep+0xac>)
 8002126:	2200      	movs	r2, #0
 8002128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Enter SLEEP Mode, Main regulator is ON */
	if(!timer)
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <power_mode_sleep+0x8a>
	{
		while(!button_pressed)
 8002132:	e003      	b.n	800213c <power_mode_sleep+0x80>
		{
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002134:	2101      	movs	r1, #1
 8002136:	2000      	movs	r0, #0
 8002138:	f002 fec4 	bl	8004ec4 <HAL_PWR_EnterSLEEPMode>
		while(!button_pressed)
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <power_mode_sleep+0xb0>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f7      	beq.n	8002134 <power_mode_sleep+0x78>
 8002144:	e003      	b.n	800214e <power_mode_sleep+0x92>
		}
	}
	else
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002146:	2101      	movs	r1, #1
 8002148:	2000      	movs	r0, #0
 800214a:	f002 febb 	bl	8004ec4 <HAL_PWR_EnterSLEEPMode>

	HAL_ResumeTick();
 800214e:	f000 fb25 	bl	800279c <HAL_ResumeTick>
	if(timer)
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <power_mode_sleep+0xa2>
		HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f004 fb93 	bl	8006884 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	20000330 	.word	0x20000330

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_MspInit+0x44>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_MspInit+0x44>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6613      	str	r3, [r2, #96]	; 0x60
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_MspInit+0x44>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_MspInit+0x44>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x44>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x44>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_ADC_MspInit+0xcc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d14f      	bne.n	800227a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_ADC_MspInit+0xd0>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_ADC_MspInit+0xd0>)
 80021e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_ADC_MspInit+0xd0>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_ADC_MspInit+0xd0>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4a24      	ldr	r2, [pc, #144]	; (8002288 <HAL_ADC_MspInit+0xd0>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_ADC_MspInit+0xd0>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800220a:	2350      	movs	r3, #80	; 0x50
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800220e:	230b      	movs	r3, #11
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f002 f882 	bl	8004328 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_ADC_MspInit+0xd8>)
 8002228:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_ADC_MspInit+0xd4>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_ADC_MspInit+0xd4>)
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002248:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_ADC_MspInit+0xd4>)
 800224c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002250:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002254:	2220      	movs	r2, #32
 8002256:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_ADC_MspInit+0xd4>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800225e:	480b      	ldr	r0, [pc, #44]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002260:	f001 fdec 	bl	8003e3c <HAL_DMA_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800226a:	f7ff ff1f 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002272:	64da      	str	r2, [r3, #76]	; 0x4c
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_ADC_MspInit+0xd4>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	50040000 	.word	0x50040000
 8002288:	40021000 	.word	0x40021000
 800228c:	200013bc 	.word	0x200013bc
 8002290:	40020008 	.word	0x40020008

08002294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_I2C_MspInit+0x8c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12f      	bne.n	8002316 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_I2C_MspInit+0x90>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_I2C_MspInit+0x90>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_I2C_MspInit+0x90>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d2:	2312      	movs	r3, #18
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022de:	2304      	movs	r3, #4
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	480f      	ldr	r0, [pc, #60]	; (8002328 <HAL_I2C_MspInit+0x94>)
 80022ea:	f002 f81d 	bl	8004328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_I2C_MspInit+0x90>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_I2C_MspInit+0x90>)
 80022f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f8:	6593      	str	r3, [r2, #88]	; 0x58
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_I2C_MspInit+0x90>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	201f      	movs	r0, #31
 800230c:	f001 fd5f 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002310:	201f      	movs	r0, #31
 8002312:	f001 fd78 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	; 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40005400 	.word	0x40005400
 8002324:	40021000 	.word	0x40021000
 8002328:	48000400 	.word	0x48000400

0800232c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_RTC_MspInit+0x30>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d107      	bne.n	800234e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RTC_MspInit+0x34>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_RTC_MspInit+0x34>)
 8002346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40002800 	.word	0x40002800
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a30      	ldr	r2, [pc, #192]	; (8002444 <HAL_UART_MspInit+0xe0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d15a      	bne.n	800243c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_UART_MspInit+0xe4>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238a:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_UART_MspInit+0xe4>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6613      	str	r3, [r2, #96]	; 0x60
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_UART_MspInit+0xe4>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_UART_MspInit+0xe4>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_UART_MspInit+0xe4>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_UART_MspInit+0xe4>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c8:	2307      	movs	r3, #7
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d6:	f001 ffa7 	bl	8004328 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_UART_MspInit+0xe8>)
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_UART_MspInit+0xec>)
 80023de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_UART_MspInit+0xe8>)
 80023e2:	2202      	movs	r2, #2
 80023e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_UART_MspInit+0xe8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_UART_MspInit+0xe8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_UART_MspInit+0xe8>)
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_UART_MspInit+0xe8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_UART_MspInit+0xe8>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0xe8>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_UART_MspInit+0xe8>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002410:	480e      	ldr	r0, [pc, #56]	; (800244c <HAL_UART_MspInit+0xe8>)
 8002412:	f001 fd13 	bl	8003e3c <HAL_DMA_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800241c:	f7ff fe46 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_UART_MspInit+0xe8>)
 8002424:	66da      	str	r2, [r3, #108]	; 0x6c
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_UART_MspInit+0xe8>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2025      	movs	r0, #37	; 0x25
 8002432:	f001 fccc 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002436:	2025      	movs	r0, #37	; 0x25
 8002438:	f001 fce5 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800243c:	bf00      	nop
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40013800 	.word	0x40013800
 8002448:	40021000 	.word	0x40021000
 800244c:	20000268 	.word	0x20000268
 8002450:	40020058 	.word	0x40020058

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a8:	f000 f926 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <RTC_WKUP_IRQHandler+0x10>)
 80024b6:	f004 fa43 	bl	8006940 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20001404 	.word	0x20001404

080024c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024c8:	2002      	movs	r0, #2
 80024ca:	f002 f8af 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <DMA1_Channel1_IRQHandler+0x10>)
 80024da:	f001 fe46 	bl	800416a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200013bc 	.word	0x200013bc

080024e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <DMA1_Channel5_IRQHandler+0x10>)
 80024ee:	f001 fe3c 	bl	800416a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000268 	.word	0x20000268

080024fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <I2C1_EV_IRQHandler+0x10>)
 8002502:	f002 fa55 	bl	80049b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000021c 	.word	0x2000021c

08002510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USART1_IRQHandler+0x10>)
 8002516:	f004 fb25 	bl	8006b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200002b0 	.word	0x200002b0

08002524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <_sbrk+0x5c>)
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <_sbrk+0x60>)
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <_sbrk+0x64>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <_sbrk+0x68>)
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	429a      	cmp	r2, r3
 8002552:	d207      	bcs.n	8002564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002554:	f005 f82e 	bl	80075b4 <__errno>
 8002558:	4602      	mov	r2, r0
 800255a:	230c      	movs	r3, #12
 800255c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	e009      	b.n	8002578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <_sbrk+0x64>)
 8002574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002576:	68fb      	ldr	r3, [r7, #12]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20010000 	.word	0x20010000
 8002584:	00000400 	.word	0x00000400
 8002588:	20000210 	.word	0x20000210
 800258c:	20001458 	.word	0x20001458

08002590 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <SystemInit+0x64>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <SystemInit+0x64>)
 800259c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <SystemInit+0x68>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <SystemInit+0x68>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <SystemInit+0x68>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <SystemInit+0x68>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <SystemInit+0x68>)
 80025bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <SystemInit+0x68>)
 80025c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <SystemInit+0x68>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <SystemInit+0x68>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <SystemInit+0x68>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SystemInit+0x64>)
 80025e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e6:	609a      	str	r2, [r3, #8]
#endif
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00
 80025f8:	40021000 	.word	0x40021000

080025fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002600:	f7ff ffc6 	bl	8002590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002604:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002606:	e003      	b.n	8002610 <LoopCopyDataInit>

08002608 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800260a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800260c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800260e:	3104      	adds	r1, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002610:	480a      	ldr	r0, [pc, #40]	; (800263c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002614:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002616:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002618:	d3f6      	bcc.n	8002608 <CopyDataInit>
	ldr	r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopForever+0x12>)
	b	LoopFillZerobss
 800261c:	e002      	b.n	8002624 <LoopFillZerobss>

0800261e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800261e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002620:	f842 3b04 	str.w	r3, [r2], #4

08002624 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <LoopForever+0x16>)
	cmp	r2, r3
 8002626:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002628:	d3f9      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262a:	f004 ffc9 	bl	80075c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262e:	f7fe ff13 	bl	8001458 <main>

08002632 <LoopForever>:

LoopForever:
    b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002634:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002638:	08009d50 	.word	0x08009d50
	ldr	r0, =_sdata
 800263c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002640:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002644:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002648:	20001454 	.word	0x20001454

0800264c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_IRQHandler>

0800264e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f001 fbad 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265e:	2000      	movs	r0, #0
 8002660:	f000 f80e 	bl	8002680 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	e001      	b.n	8002674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002670:	f7ff fd7e 	bl	8002170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002674:	79fb      	ldrb	r3, [r7, #7]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_InitTick+0x6c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_InitTick+0x70>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_InitTick+0x6c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 fbb9 	bl	8003e22 <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d809      	bhi.n	80026d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026bc:	2200      	movs	r2, #0
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f001 fb83 	bl	8003dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_InitTick+0x74>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e004      	b.n	80026e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e001      	b.n	80026e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000008 	.word	0x20000008
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000008 	.word	0x20000008
 800271c:	2000144c 	.word	0x2000144c

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000144c 	.word	0x2000144c

08002738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff ffee 	bl	8002720 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d005      	beq.n	800275e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_Delay+0x40>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800275e:	bf00      	nop
 8002760:	f7ff ffde 	bl	8002720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8f7      	bhi.n	8002760 <HAL_Delay+0x28>
  {
  }
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000008 	.word	0x20000008

0800277c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_SuspendTick+0x1c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_SuspendTick+0x1c>)
 8002786:	f023 0302 	bic.w	r3, r3, #2
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_ResumeTick+0x1c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_ResumeTick+0x1c>)
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3360      	adds	r3, #96	; 0x60
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <LL_ADC_SetOffset+0x44>)
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	4313      	orrs	r3, r2
 8002854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	03fff000 	.word	0x03fff000

0800286c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3360      	adds	r3, #96	; 0x60
 800287a:	461a      	mov	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3360      	adds	r3, #96	; 0x60
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3330      	adds	r3, #48	; 0x30
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	4413      	add	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	211f      	movs	r1, #31
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 011f 	and.w	r1, r3, #31
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	431a      	orrs	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002940:	bf00      	nop
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3314      	adds	r3, #20
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0e5b      	lsrs	r3, r3, #25
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0d1b      	lsrs	r3, r3, #20
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2107      	movs	r1, #7
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	0d1b      	lsrs	r3, r3, #20
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	431a      	orrs	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0318 	and.w	r3, r3, #24
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029c8:	40d9      	lsrs	r1, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	400b      	ands	r3, r1
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	0007ffff 	.word	0x0007ffff

080029ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6093      	str	r3, [r2, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac4:	f043 0202 	orr.w	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_IsEnabled+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_IsEnabled+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d101      	bne.n	8002b16 <LL_ADC_IsDisableOngoing+0x18>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_ADC_IsDisableOngoing+0x1a>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d101      	bne.n	8002b8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002baa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e12a      	b.n	8002e58 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fad1 	bl	80021b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fef1 	bl	8002a10 <LL_ADC_IsDeepPowerDownEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fed7 	bl	80029ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff0c 	bl	8002a60 <LL_ADC_IsInternalRegulatorEnabled>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d113      	bne.n	8002c76 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fef0 	bl	8002a38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c58:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_ADC_Init+0x278>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	4a81      	ldr	r2, [pc, #516]	; (8002e64 <HAL_ADC_Init+0x27c>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c68:	e002      	b.n	8002c70 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f9      	bne.n	8002c6a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fef0 	bl	8002a60 <LL_ADC_IsInternalRegulatorEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff64 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 8002cac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 80c5 	bne.w	8002e46 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80c1 	bne.w	8002e46 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ccc:	f043 0202 	orr.w	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fefd 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce4:	4860      	ldr	r0, [pc, #384]	; (8002e68 <HAL_ADC_Init+0x280>)
 8002ce6:	f7ff fef7 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	485d      	ldr	r0, [pc, #372]	; (8002e6c <HAL_ADC_Init+0x284>)
 8002cf8:	f7ff fd60 	bl	80027bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7e5b      	ldrb	r3, [r3, #25]
 8002d00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d106      	bne.n	8002d38 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	045b      	lsls	r3, r3, #17
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <HAL_ADC_Init+0x288>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff01 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 8002d72:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff22 	bl	8002bc2 <LL_ADC_INJ_IsConversionOngoing>
 8002d7e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d13d      	bne.n	8002e02 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13a      	bne.n	8002e02 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d90:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d98:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da8:	f023 0302 	bic.w	r3, r3, #2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	69b9      	ldr	r1, [r7, #24]
 8002db2:	430b      	orrs	r3, r1
 8002db4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d118      	bne.n	8002df2 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002de2:	430a      	orrs	r2, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	611a      	str	r2, [r3, #16]
 8002df0:	e007      	b.n	8002e02 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10c      	bne.n	8002e24 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f023 010f 	bic.w	r1, r3, #15
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
 8002e22:	e007      	b.n	8002e34 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 020f 	bic.w	r2, r2, #15
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f023 0303 	bic.w	r3, r3, #3
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
 8002e44:	e007      	b.n	8002e56 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000000 	.word	0x20000000
 8002e64:	053e2d63 	.word	0x053e2d63
 8002e68:	50040000 	.word	0x50040000
 8002e6c:	50040300 	.word	0x50040300
 8002e70:	fff0c007 	.word	0xfff0c007

08002e74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fe75 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d167      	bne.n	8002f60 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Start_DMA+0x2a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e063      	b.n	8002f66 <HAL_ADC_Start_DMA+0xf2>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fd70 	bl	800398c <ADC_Enable>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d14f      	bne.n	8002f56 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f023 0206 	bic.w	r2, r3, #6
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ee2:	e002      	b.n	8002eea <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <HAL_ADC_Start_DMA+0xfc>)
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_ADC_Start_DMA+0x100>)
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_ADC_Start_DMA+0x104>)
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	221c      	movs	r2, #28
 8002f08:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0210 	orr.w	r2, r2, #16
 8002f20:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3340      	adds	r3, #64	; 0x40
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f001 f833 	bl	8003fac <HAL_DMA_Start_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fde8 	bl	8002b24 <LL_ADC_REG_StartConversion>
 8002f54:	e006      	b.n	8002f64 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f5e:	e001      	b.n	8002f64 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
 8002f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	08003af1 	.word	0x08003af1
 8002f74:	08003bc9 	.word	0x08003bc9
 8002f78:	08003be5 	.word	0x08003be5

08002f7c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Stop_DMA+0x16>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e051      	b.n	8003036 <HAL_ADC_Stop_DMA+0xba>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fc41 	bl	8003824 <ADC_ConversionStop>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13f      	bne.n	800302c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d10f      	bne.n	8002fea <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 f84c 	bl	800406c <HAL_DMA_Abort>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0210 	bic.w	r2, r2, #16
 8002ff8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fd1d 	bl	8003a40 <ADC_Disable>
 8003006:	4603      	mov	r3, r0
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	e002      	b.n	8003012 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fd17 	bl	8003a40 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b0b6      	sub	sp, #216	; 0xd8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x22>
 8003086:	2302      	movs	r3, #2
 8003088:	e3b8      	b.n	80037fc <HAL_ADC_ConfigChannel+0x794>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fd6c 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 839d 	bne.w	80037de <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d824      	bhi.n	80030f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	3b02      	subs	r3, #2
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d81b      	bhi.n	80030ee <HAL_ADC_ConfigChannel+0x86>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_ADC_ConfigChannel+0x54>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030e5 	.word	0x080030e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	220c      	movs	r2, #12
 80030d0:	605a      	str	r2, [r3, #4]
          break;
 80030d2:	e011      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2212      	movs	r2, #18
 80030d8:	605a      	str	r2, [r3, #4]
          break;
 80030da:	e00d      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2218      	movs	r2, #24
 80030e0:	605a      	str	r2, [r3, #4]
          break;
 80030e2:	e009      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ea:	605a      	str	r2, [r3, #4]
          break;
 80030ec:	e004      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2206      	movs	r2, #6
 80030f2:	605a      	str	r2, [r3, #4]
          break;
 80030f4:	e000      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80030f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	f7ff fbf5 	bl	80028f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd30 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 8003114:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fd50 	bl	8002bc2 <LL_ADC_INJ_IsConversionOngoing>
 8003122:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 81a6 	bne.w	800347c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 81a1 	bne.w	800347c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	461a      	mov	r2, r3
 8003148:	f7ff fc00 	bl	800294c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00a      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6919      	ldr	r1, [r3, #16]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800317e:	f7ff fb51 	bl	8002824 <LL_ADC_SetOffset>
 8003182:	e17b      	b.n	800347c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fb6e 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x148>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fb63 	bl	800286c <LL_ADC_GetOffsetChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 021f 	and.w	r2, r3, #31
 80031ae:	e01e      	b.n	80031ee <HAL_ADC_ConfigChannel+0x186>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fb58 	bl	800286c <LL_ADC_GetOffsetChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e004      	b.n	80031ec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80031e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x19e>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	e018      	b.n	8003238 <HAL_ADC_ConfigChannel+0x1d0>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800321a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800321e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800322a:	2320      	movs	r3, #32
 800322c:	e004      	b.n	8003238 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800322e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003238:	429a      	cmp	r2, r3
 800323a:	d106      	bne.n	800324a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fb27 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fb0b 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fb00 	bl	800286c <LL_ADC_GetOffsetChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	e01e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x24c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff faf5 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800329c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80032a4:	2320      	movs	r3, #32
 80032a6:	e004      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80032a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x264>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	e018      	b.n	80032fe <HAL_ADC_ConfigChannel+0x296>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e004      	b.n	80032fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80032f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032fe:	429a      	cmp	r2, r3
 8003300:	d106      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fac4 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2102      	movs	r1, #2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff faa8 	bl	800286c <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x2d4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2102      	movs	r1, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fa9d 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	e01e      	b.n	800337a <HAL_ADC_ConfigChannel+0x312>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fa92 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800335a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800335e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e004      	b.n	8003378 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800336e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x32a>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	e016      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x358>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80033b2:	2320      	movs	r3, #32
 80033b4:	e004      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80033b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fa63 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2103      	movs	r1, #3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fa47 	bl	800286c <LL_ADC_GetOffsetChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x396>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2103      	movs	r1, #3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fa3c 	bl	800286c <LL_ADC_GetOffsetChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	e017      	b.n	800342e <HAL_ADC_ConfigChannel+0x3c6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2103      	movs	r1, #3
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fa31 	bl	800286c <LL_ADC_GetOffsetChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003418:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800341a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003420:	2320      	movs	r3, #32
 8003422:	e003      	b.n	800342c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x3de>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	e011      	b.n	800346a <HAL_ADC_ConfigChannel+0x402>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003456:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e003      	b.n	800346a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800346a:	429a      	cmp	r2, r3
 800346c:	d106      	bne.n	800347c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	2103      	movs	r1, #3
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fa0e 	bl	8002898 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb29 	bl	8002ad8 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 813f 	bne.w	800370c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f7ff fa82 	bl	80029a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a8e      	ldr	r2, [pc, #568]	; (80036e0 <HAL_ADC_ConfigChannel+0x678>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f040 8130 	bne.w	800370c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x46c>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e019      	b.n	8003508 <HAL_ADC_ConfigChannel+0x4a0>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034ec:	2320      	movs	r3, #32
 80034ee:	e003      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80034f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b09      	cmp	r3, #9
 8003500:	bf94      	ite	ls
 8003502:	2301      	movls	r3, #1
 8003504:	2300      	movhi	r3, #0
 8003506:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003508:	2b00      	cmp	r3, #0
 800350a:	d079      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x4c0>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	069b      	lsls	r3, r3, #26
 8003522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003526:	e015      	b.n	8003554 <HAL_ADC_ConfigChannel+0x4ec>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800353a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003540:	2320      	movs	r3, #32
 8003542:	e003      	b.n	800354c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	3301      	adds	r3, #1
 800354e:	069b      	lsls	r3, r3, #26
 8003550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x50c>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	e017      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x53c>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003584:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	ea42 0103 	orr.w	r1, r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x562>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	3301      	adds	r3, #1
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	051b      	lsls	r3, r3, #20
 80035c8:	e018      	b.n	80035fc <HAL_ADC_ConfigChannel+0x594>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e003      	b.n	80035ee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035fc:	430b      	orrs	r3, r1
 80035fe:	e080      	b.n	8003702 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_ADC_ConfigChannel+0x5b4>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	069b      	lsls	r3, r3, #26
 8003616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800361a:	e015      	b.n	8003648 <HAL_ADC_ConfigChannel+0x5e0>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3301      	adds	r3, #1
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x600>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	3301      	adds	r3, #1
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	e017      	b.n	8003698 <HAL_ADC_ConfigChannel+0x630>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	61fb      	str	r3, [r7, #28]
  return result;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e003      	b.n	800368c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	ea42 0103 	orr.w	r1, r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x65c>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	3301      	adds	r3, #1
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	3b1e      	subs	r3, #30
 80036bc:	051b      	lsls	r3, r3, #20
 80036be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c2:	e01d      	b.n	8003700 <HAL_ADC_ConfigChannel+0x698>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	613b      	str	r3, [r7, #16]
  return result;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e005      	b.n	80036ec <HAL_ADC_ConfigChannel+0x684>
 80036e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f003 021f 	and.w	r2, r3, #31
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	3b1e      	subs	r3, #30
 80036fa:	051b      	lsls	r3, r3, #20
 80036fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003700:	430b      	orrs	r3, r1
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	4619      	mov	r1, r3
 8003708:	f7ff f920 	bl	800294c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <HAL_ADC_ConfigChannel+0x79c>)
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d06b      	beq.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003718:	483b      	ldr	r0, [pc, #236]	; (8003808 <HAL_ADC_ConfigChannel+0x7a0>)
 800371a:	f7ff f875 	bl	8002808 <LL_ADC_GetCommonPathInternalCh>
 800371e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_ADC_ConfigChannel+0x7a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d126      	bne.n	800377a <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d120      	bne.n	800377a <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a34      	ldr	r2, [pc, #208]	; (8003810 <HAL_ADC_ConfigChannel+0x7a8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d156      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800374a:	4619      	mov	r1, r3
 800374c:	482e      	ldr	r0, [pc, #184]	; (8003808 <HAL_ADC_ConfigChannel+0x7a0>)
 800374e:	f7ff f848 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_ADC_ConfigChannel+0x7ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <HAL_ADC_ConfigChannel+0x7b0>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	099a      	lsrs	r2, r3, #6
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800376a:	e002      	b.n	8003772 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f9      	bne.n	800376c <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003778:	e03a      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a27      	ldr	r2, [pc, #156]	; (800381c <HAL_ADC_ConfigChannel+0x7b4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d113      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x744>
 8003784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_ADC_ConfigChannel+0x7a8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d12a      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800379a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	4619      	mov	r1, r3
 80037a4:	4818      	ldr	r0, [pc, #96]	; (8003808 <HAL_ADC_ConfigChannel+0x7a0>)
 80037a6:	f7ff f81c 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037aa:	e021      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_ADC_ConfigChannel+0x7b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d11c      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_ADC_ConfigChannel+0x7a8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d111      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d4:	4619      	mov	r1, r3
 80037d6:	480c      	ldr	r0, [pc, #48]	; (8003808 <HAL_ADC_ConfigChannel+0x7a0>)
 80037d8:	f7ff f803 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
 80037dc:	e008      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	37d8      	adds	r7, #216	; 0xd8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	80080000 	.word	0x80080000
 8003808:	50040300 	.word	0x50040300
 800380c:	c7520000 	.word	0xc7520000
 8003810:	50040000 	.word	0x50040000
 8003814:	20000000 	.word	0x20000000
 8003818:	053e2d63 	.word	0x053e2d63
 800381c:	cb840000 	.word	0xcb840000
 8003820:	80000001 	.word	0x80000001

08003824 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f99a 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 8003840:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f9bb 	bl	8002bc2 <LL_ADC_INJ_IsConversionOngoing>
 800384c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8090 	beq.w	800397c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02a      	beq.n	80038c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7e5b      	ldrb	r3, [r3, #25]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d126      	bne.n	80038c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7e1b      	ldrb	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d122      	bne.n	80038c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800387a:	2301      	movs	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800387e:	e014      	b.n	80038aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4a41      	ldr	r2, [pc, #260]	; (8003988 <ADC_ConversionStop+0x164>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d90d      	bls.n	80038a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e06c      	b.n	800397e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d1e3      	bne.n	8003880 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d014      	beq.n	80038f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f952 	bl	8002b74 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f90f 	bl	8002afe <LL_ADC_IsDisableOngoing>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f92e 	bl	8002b4c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d014      	beq.n	8003920 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f961 	bl	8002bc2 <LL_ADC_INJ_IsConversionOngoing>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f8f7 	bl	8002afe <LL_ADC_IsDisableOngoing>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f93d 	bl	8002b9a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d004      	beq.n	8003930 <ADC_ConversionStop+0x10c>
 8003926:	2b03      	cmp	r3, #3
 8003928:	d105      	bne.n	8003936 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800392a:	230c      	movs	r3, #12
 800392c:	617b      	str	r3, [r7, #20]
        break;
 800392e:	e005      	b.n	800393c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003930:	2308      	movs	r3, #8
 8003932:	617b      	str	r3, [r7, #20]
        break;
 8003934:	e002      	b.n	800393c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003936:	2304      	movs	r3, #4
 8003938:	617b      	str	r3, [r7, #20]
        break;
 800393a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800393c:	f7fe fef0 	bl	8002720 <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003942:	e014      	b.n	800396e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003944:	f7fe feec 	bl	8002720 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b05      	cmp	r3, #5
 8003950:	d90d      	bls.n	800396e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e3      	bne.n	8003944 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	a33fffff 	.word	0xa33fffff

0800398c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f89d 	bl	8002ad8 <LL_ADC_IsEnabled>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d146      	bne.n	8003a32 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <ADC_Enable+0xb0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e032      	b.n	8003a34 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff f858 	bl	8002a88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fea2 	bl	8002720 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039de:	e021      	b.n	8003a24 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff f877 	bl	8002ad8 <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff f847 	bl	8002a88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039fa:	f7fe fe91 	bl	8002720 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d90d      	bls.n	8003a24 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0210 	orr.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e007      	b.n	8003a34 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d1d6      	bne.n	80039e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	8000003f 	.word	0x8000003f

08003a40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff f856 	bl	8002afe <LL_ADC_IsDisableOngoing>
 8003a52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f83d 	bl	8002ad8 <LL_ADC_IsEnabled>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d040      	beq.n	8003ae6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d13d      	bne.n	8003ae6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030d 	and.w	r3, r3, #13
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10c      	bne.n	8003a92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff f817 	bl	8002ab0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2203      	movs	r2, #3
 8003a88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fe49 	bl	8002720 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a90:	e022      	b.n	8003ad8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	f043 0210 	orr.w	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e01c      	b.n	8003ae8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aae:	f7fe fe37 	bl	8002720 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d90d      	bls.n	8003ad8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0210 	orr.w	r2, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e007      	b.n	8003ae8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e3      	bne.n	8003aae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d14b      	bne.n	8003ba2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d021      	beq.n	8003b68 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fed0 	bl	80028ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d032      	beq.n	8003b9a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d12b      	bne.n	8003b9a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11f      	bne.n	8003b9a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54
 8003b66:	e018      	b.n	8003b9a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d111      	bne.n	8003b9a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7fe f970 	bl	8001e80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ba0:	e00e      	b.n	8003bc0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fa4f 	bl	8003052 <HAL_ADC_ErrorCallback>
}
 8003bb4:	e004      	b.n	8003bc0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fa31 	bl	800303e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f043 0204 	orr.w	r2, r3, #4
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff fa21 	bl	8003052 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	60d3      	str	r3, [r2, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	; (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	; (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
         );
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d84:	d301      	bcc.n	8003d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <SysTick_Config+0x40>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d92:	210f      	movs	r1, #15
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	f7ff ff8e 	bl	8003cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <SysTick_Config+0x40>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <SysTick_Config+0x40>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff29 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de0:	f7ff ff3e 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff8e 	bl	8003d0c <NVIC_EncodePriority>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff5d 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff31 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ffa2 	bl	8003d74 <SysTick_Config>
 8003e30:	4603      	mov	r3, r0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e098      	b.n	8003f80 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <HAL_DMA_Init+0x150>)
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d80f      	bhi.n	8003e7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_DMA_Init+0x154>)
 8003e62:	4413      	add	r3, r2
 8003e64:	4a4b      	ldr	r2, [pc, #300]	; (8003f94 <HAL_DMA_Init+0x158>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a48      	ldr	r2, [pc, #288]	; (8003f98 <HAL_DMA_Init+0x15c>)
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
 8003e78:	e00e      	b.n	8003e98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_DMA_Init+0x160>)
 8003e82:	4413      	add	r3, r2
 8003e84:	4a43      	ldr	r2, [pc, #268]	; (8003f94 <HAL_DMA_Init+0x158>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	009a      	lsls	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_DMA_Init+0x164>)
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef2:	d039      	beq.n	8003f68 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_DMA_Init+0x15c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d11a      	bne.n	8003f34 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_DMA_Init+0x168>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f003 031c 	and.w	r3, r3, #28
 8003f0a:	210f      	movs	r1, #15
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4924      	ldr	r1, [pc, #144]	; (8003fa4 <HAL_DMA_Init+0x168>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_DMA_Init+0x168>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	f003 031c 	and.w	r3, r3, #28
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	491d      	ldr	r1, [pc, #116]	; (8003fa4 <HAL_DMA_Init+0x168>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]
 8003f32:	e019      	b.n	8003f68 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_DMA_Init+0x16c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f003 031c 	and.w	r3, r3, #28
 8003f40:	210f      	movs	r1, #15
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	4917      	ldr	r1, [pc, #92]	; (8003fa8 <HAL_DMA_Init+0x16c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_DMA_Init+0x16c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f003 031c 	and.w	r3, r3, #28
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	4911      	ldr	r1, [pc, #68]	; (8003fa8 <HAL_DMA_Init+0x16c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40020407 	.word	0x40020407
 8003f90:	bffdfff8 	.word	0xbffdfff8
 8003f94:	cccccccd 	.word	0xcccccccd
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	bffdfbf8 	.word	0xbffdfbf8
 8003fa0:	40020400 	.word	0x40020400
 8003fa4:	400200a8 	.word	0x400200a8
 8003fa8:	400204a8 	.word	0x400204a8

08003fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_DMA_Start_IT+0x20>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e04b      	b.n	8004064 <HAL_DMA_Start_IT+0xb8>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d13a      	bne.n	8004056 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f95f 	bl	80042c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 020e 	orr.w	r2, r2, #14
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e00f      	b.n	8004044 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 020a 	orr.w	r2, r2, #10
 8004042:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e005      	b.n	8004062 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800405e:	2302      	movs	r3, #2
 8004060:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d008      	beq.n	8004096 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e022      	b.n	80040dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 020e 	bic.w	r2, r2, #14
 80040a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f003 021c 	and.w	r2, r3, #28
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d005      	beq.n	800410c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e029      	b.n	8004160 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 020e 	bic.w	r2, r2, #14
 800411a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f003 021c 	and.w	r2, r3, #28
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2101      	movs	r1, #1
 800413a:	fa01 f202 	lsl.w	r2, r1, r2
 800413e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
    }
  }
  return status;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f003 031c 	and.w	r3, r3, #28
 800418a:	2204      	movs	r2, #4
 800418c:	409a      	lsls	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d026      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x7a>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d021      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0204 	bic.w	r2, r2, #4
 80041bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f003 021c 	and.w	r2, r3, #28
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2104      	movs	r1, #4
 80041cc:	fa01 f202 	lsl.w	r2, r1, r2
 80041d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d071      	beq.n	80042be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80041e2:	e06c      	b.n	80042be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	f003 031c 	and.w	r3, r3, #28
 80041ec:	2202      	movs	r2, #2
 80041ee:	409a      	lsls	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02e      	beq.n	8004256 <HAL_DMA_IRQHandler+0xec>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d029      	beq.n	8004256 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020a 	bic.w	r2, r2, #10
 800421e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f003 021c 	and.w	r2, r3, #28
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2102      	movs	r1, #2
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d038      	beq.n	80042be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004254:	e033      	b.n	80042be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f003 031c 	and.w	r3, r3, #28
 800425e:	2208      	movs	r2, #8
 8004260:	409a      	lsls	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d02a      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x156>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d025      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020e 	bic.w	r2, r2, #14
 8004282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f003 021c 	and.w	r2, r3, #28
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2101      	movs	r1, #1
 8004292:	fa01 f202 	lsl.w	r2, r1, r2
 8004296:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
}
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f003 021c 	and.w	r2, r3, #28
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d108      	bne.n	800430c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800430a:	e007      	b.n	800431c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004336:	e148      	b.n	80045ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 813a 	beq.w	80045c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d00b      	beq.n	8004370 <HAL_GPIO_Init+0x48>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d007      	beq.n	8004370 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004364:	2b11      	cmp	r3, #17
 8004366:	d003      	beq.n	8004370 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b12      	cmp	r3, #18
 800436e:	d130      	bne.n	80043d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2203      	movs	r2, #3
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043a6:	2201      	movs	r2, #1
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 0201 	and.w	r2, r3, #1
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2203      	movs	r2, #3
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0xea>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b12      	cmp	r3, #18
 8004410:	d123      	bne.n	800445a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	6939      	ldr	r1, [r7, #16]
 8004456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8094 	beq.w	80045c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449c:	4b52      	ldr	r3, [pc, #328]	; (80045e8 <HAL_GPIO_Init+0x2c0>)
 800449e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a0:	4a51      	ldr	r2, [pc, #324]	; (80045e8 <HAL_GPIO_Init+0x2c0>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6613      	str	r3, [r2, #96]	; 0x60
 80044a8:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <HAL_GPIO_Init+0x2c0>)
 80044aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044b4:	4a4d      	ldr	r2, [pc, #308]	; (80045ec <HAL_GPIO_Init+0x2c4>)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	089b      	lsrs	r3, r3, #2
 80044ba:	3302      	adds	r3, #2
 80044bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	220f      	movs	r2, #15
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044de:	d00d      	beq.n	80044fc <HAL_GPIO_Init+0x1d4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a43      	ldr	r2, [pc, #268]	; (80045f0 <HAL_GPIO_Init+0x2c8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <HAL_GPIO_Init+0x1d0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a42      	ldr	r2, [pc, #264]	; (80045f4 <HAL_GPIO_Init+0x2cc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_GPIO_Init+0x1cc>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e004      	b.n	80044fe <HAL_GPIO_Init+0x1d6>
 80044f4:	2307      	movs	r3, #7
 80044f6:	e002      	b.n	80044fe <HAL_GPIO_Init+0x1d6>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_GPIO_Init+0x1d6>
 80044fc:	2300      	movs	r3, #0
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	f002 0203 	and.w	r2, r2, #3
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	4093      	lsls	r3, r2
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800450e:	4937      	ldr	r1, [pc, #220]	; (80045ec <HAL_GPIO_Init+0x2c4>)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800451c:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004540:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	43db      	mvns	r3, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800456a:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_GPIO_Init+0x2d0>)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3301      	adds	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f47f aeaf 	bne.w	8004338 <HAL_GPIO_Init+0x10>
  }
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40010000 	.word	0x40010000
 80045f0:	48000400 	.word	0x48000400
 80045f4:	48000800 	.word	0x48000800
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
 8004608:	4613      	mov	r3, r2
 800460a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800460c:	787b      	ldrb	r3, [r7, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004618:	e002      	b.n	8004620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fd1a 	bl	8002084 <HAL_GPIO_EXTI_Callback>
  }
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40010400 	.word	0x40010400

0800465c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e081      	b.n	8004772 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fd fe06 	bl	8002294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	e006      	b.n	80046e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d104      	bne.n	80046f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	ea42 0103 	orr.w	r1, r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69d9      	ldr	r1, [r3, #28]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	460b      	mov	r3, r1
 8004790:	813b      	strh	r3, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	f040 80fd 	bne.w	800499e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x34>
 80047aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0f1      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_I2C_Mem_Read+0x4e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ea      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047d2:	f7fd ffa5 	bl	8002720 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2319      	movs	r3, #25
 80047de:	2201      	movs	r2, #1
 80047e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f975 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0d5      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800481c:	88f8      	ldrh	r0, [r7, #6]
 800481e:	893a      	ldrh	r2, [r7, #8]
 8004820:	8979      	ldrh	r1, [r7, #10]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	4603      	mov	r3, r0
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f8d9 	bl	80049e4 <I2C_RequestMemoryRead>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0ad      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2bff      	cmp	r3, #255	; 0xff
 800484c:	d90e      	bls.n	800486c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	b2da      	uxtb	r2, r3
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <HAL_I2C_Mem_Read+0x22c>)
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fa57 	bl	8004d18 <I2C_TransferConfig>
 800486a:	e00f      	b.n	800488c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	b2da      	uxtb	r2, r3
 800487c:	8979      	ldrh	r1, [r7, #10]
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <HAL_I2C_Mem_Read+0x22c>)
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa46 	bl	8004d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	2200      	movs	r2, #0
 8004894:	2104      	movs	r1, #4
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f91c 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07c      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d034      	beq.n	800494c <HAL_I2C_Mem_Read+0x1d0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d130      	bne.n	800494c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2200      	movs	r2, #0
 80048f2:	2180      	movs	r1, #128	; 0x80
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f8ed 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e04d      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2bff      	cmp	r3, #255	; 0xff
 800490c:	d90e      	bls.n	800492c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	22ff      	movs	r2, #255	; 0xff
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	b2da      	uxtb	r2, r3
 800491a:	8979      	ldrh	r1, [r7, #10]
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f9f7 	bl	8004d18 <I2C_TransferConfig>
 800492a:	e00f      	b.n	800494c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	b2da      	uxtb	r2, r3
 800493c:	8979      	ldrh	r1, [r7, #10]
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f9e6 	bl	8004d18 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d19a      	bne.n	800488c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f93a 	bl	8004bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e01a      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_I2C_Mem_Read+0x230>)
 800497e:	400b      	ands	r3, r1
 8004980:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	80002400 	.word	0x80002400
 80049ac:	fe00e800 	.word	0xfe00e800

080049b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
  }
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	8979      	ldrh	r1, [r7, #10]
 8004a04:	4b20      	ldr	r3, [pc, #128]	; (8004a88 <I2C_RequestMemoryRead+0xa4>)
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f984 	bl	8004d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f89d 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e02c      	b.n	8004a7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a2a:	893b      	ldrh	r3, [r7, #8]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
 8004a34:	e015      	b.n	8004a62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a36:	893b      	ldrh	r3, [r7, #8]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f883 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e012      	b.n	8004a7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a58:	893b      	ldrh	r3, [r7, #8]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f831 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	80002000 	.word	0x80002000

08004a8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d103      	bne.n	8004aaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d007      	beq.n	8004ac8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	619a      	str	r2, [r3, #24]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae4:	e022      	b.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d01e      	beq.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fd fe17 	bl	8002720 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d113      	bne.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e00f      	b.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d0cd      	beq.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b60:	e02c      	b.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f870 	bl	8004c4c <I2C_IsAcknowledgeFailed>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e02a      	b.n	8004bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d01e      	beq.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fd fdcf 	bl	8002720 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d113      	bne.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d1cb      	bne.n	8004b62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be0:	e028      	b.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f830 	bl	8004c4c <I2C_IsAcknowledgeFailed>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e026      	b.n	8004c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf6:	f7fd fd93 	bl	8002720 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e007      	b.n	8004c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d1cf      	bne.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d151      	bne.n	8004d0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c66:	e022      	b.n	8004cae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d01e      	beq.n	8004cae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fd fd56 	bl	8002720 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <I2C_IsAcknowledgeFailed+0x3a>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d113      	bne.n	8004cae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e02e      	b.n	8004d0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d1d5      	bne.n	8004c68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fedd 	bl	8004a8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <I2C_IsAcknowledgeFailed+0xc8>)
 8004cde:	400b      	ands	r3, r1
 8004ce0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	fe00e800 	.word	0xfe00e800

08004d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	817b      	strh	r3, [r7, #10]
 8004d26:	4613      	mov	r3, r2
 8004d28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	0d5b      	lsrs	r3, r3, #21
 8004d34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <I2C_TransferConfig+0x58>)
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	ea02 0103 	and.w	r1, r2, r3
 8004d42:	897b      	ldrh	r3, [r7, #10]
 8004d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d48:	7a7b      	ldrb	r3, [r7, #9]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	03ff63ff 	.word	0x03ff63ff

08004d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d138      	bne.n	8004dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e032      	b.n	8004dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	; 0x24
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d139      	bne.n	8004e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e033      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	; 0x24
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40007000 	.word	0x40007000

08004ec4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee2:	d10e      	bne.n	8004f02 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004ee4:	f000 f896 	bl	8005014 <HAL_PWREx_DisableLowPowerRunMode>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8004eee:	e016      	b.n	8004f1e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efc:	d001      	beq.n	8004f02 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004efe:	f000 f879 	bl	8004ff4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004f14:	bf30      	wfi
 8004f16:	e002      	b.n	8004f1e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004f18:	bf40      	sev
    __WFE();
 8004f1a:	bf20      	wfe
    __WFE();
 8004f1c:	bf20      	wfe
  }

}
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40007000 	.word	0x40007000
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40007000 	.word	0x40007000

08004f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d130      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f58:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f64:	d038      	beq.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2232      	movs	r2, #50	; 0x32
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0c9b      	lsrs	r3, r3, #18
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f8c:	e002      	b.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d102      	bne.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f2      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d110      	bne.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e00f      	b.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d007      	beq.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fc8:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fd0:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	431bde83 	.word	0x431bde83

08004ff4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40007000 	.word	0x40007000

08005014 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a16      	ldr	r2, [pc, #88]	; (8005078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005024:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2232      	movs	r2, #50	; 0x32
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	4a13      	ldr	r2, [pc, #76]	; (8005080 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	0c9b      	lsrs	r3, r3, #18
 8005038:	3301      	adds	r3, #1
 800503a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800503c:	e002      	b.n	8005044 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3b01      	subs	r3, #1
 8005042:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005050:	d102      	bne.n	8005058 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f2      	bne.n	800503e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d101      	bne.n	800506a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e000      	b.n	800506c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40007000 	.word	0x40007000
 800507c:	20000000 	.word	0x20000000
 8005080:	431bde83 	.word	0x431bde83

08005084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f000 bc11 	b.w	80058ba <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005098:	4ba0      	ldr	r3, [pc, #640]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 030c 	and.w	r3, r3, #12
 80050a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a2:	4b9e      	ldr	r3, [pc, #632]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80e4 	beq.w	8005282 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_RCC_OscConfig+0x4c>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	f040 808b 	bne.w	80051de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	f040 8087 	bne.w	80051de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050d0:	4b92      	ldr	r3, [pc, #584]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_RCC_OscConfig+0x64>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e3e8      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	4b8b      	ldr	r3, [pc, #556]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_RCC_OscConfig+0x7e>
 80050f8:	4b88      	ldr	r3, [pc, #544]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005100:	e005      	b.n	800510e <HAL_RCC_OscConfig+0x8a>
 8005102:	4b86      	ldr	r3, [pc, #536]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510e:	4293      	cmp	r3, r2
 8005110:	d223      	bcs.n	800515a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fd78 	bl	8005c0c <RCC_SetFlashLatencyFromMSIRange>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e3c9      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005126:	4b7d      	ldr	r3, [pc, #500]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7c      	ldr	r2, [pc, #496]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	4b7a      	ldr	r3, [pc, #488]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	4977      	ldr	r1, [pc, #476]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005144:	4b75      	ldr	r3, [pc, #468]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	4972      	ldr	r1, [pc, #456]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
 8005158:	e025      	b.n	80051a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800515a:	4b70      	ldr	r3, [pc, #448]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6f      	ldr	r2, [pc, #444]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	4b6d      	ldr	r3, [pc, #436]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	496a      	ldr	r1, [pc, #424]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005178:	4b68      	ldr	r3, [pc, #416]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	4965      	ldr	r1, [pc, #404]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd38 	bl	8005c0c <RCC_SetFlashLatencyFromMSIRange>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e389      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051a6:	f000 fc6f 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 80051aa:	4601      	mov	r1, r0
 80051ac:	4b5b      	ldr	r3, [pc, #364]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	4a5a      	ldr	r2, [pc, #360]	; (8005320 <HAL_RCC_OscConfig+0x29c>)
 80051b8:	5cd3      	ldrb	r3, [r2, r3]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	fa21 f303 	lsr.w	r3, r1, r3
 80051c2:	4a58      	ldr	r2, [pc, #352]	; (8005324 <HAL_RCC_OscConfig+0x2a0>)
 80051c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051c6:	4b58      	ldr	r3, [pc, #352]	; (8005328 <HAL_RCC_OscConfig+0x2a4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fd fa58 	bl	8002680 <HAL_InitTick>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d052      	beq.n	8005280 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	e36d      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d032      	beq.n	800524c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051e6:	4b4d      	ldr	r3, [pc, #308]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a4c      	ldr	r2, [pc, #304]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051f2:	f7fd fa95 	bl	8002720 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051fa:	f7fd fa91 	bl	8002720 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e356      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800520c:	4b43      	ldr	r3, [pc, #268]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005218:	4b40      	ldr	r3, [pc, #256]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3f      	ldr	r2, [pc, #252]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800521e:	f043 0308 	orr.w	r3, r3, #8
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b3d      	ldr	r3, [pc, #244]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	493a      	ldr	r1, [pc, #232]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4935      	ldr	r1, [pc, #212]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005246:	4313      	orrs	r3, r2
 8005248:	604b      	str	r3, [r1, #4]
 800524a:	e01a      	b.n	8005282 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800524c:	4b33      	ldr	r3, [pc, #204]	; (800531c <HAL_RCC_OscConfig+0x298>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a32      	ldr	r2, [pc, #200]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005258:	f7fd fa62 	bl	8002720 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005260:	f7fd fa5e 	bl	8002720 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e323      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005272:	4b2a      	ldr	r3, [pc, #168]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x1dc>
 800527e:	e000      	b.n	8005282 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d073      	beq.n	8005376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_OscConfig+0x21c>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d10e      	bne.n	80052b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d063      	beq.n	8005374 <HAL_RCC_OscConfig+0x2f0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d15f      	bne.n	8005374 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e300      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x24c>
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0x288>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x270>
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a0f      	ldr	r2, [pc, #60]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0x288>
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <HAL_RCC_OscConfig+0x298>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a05      	ldr	r2, [pc, #20]	; (800531c <HAL_RCC_OscConfig+0x298>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01b      	beq.n	800534c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd fa04 	bl	8002720 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800531a:	e010      	b.n	800533e <HAL_RCC_OscConfig+0x2ba>
 800531c:	40021000 	.word	0x40021000
 8005320:	08009a9c 	.word	0x08009a9c
 8005324:	20000000 	.word	0x20000000
 8005328:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800532c:	f7fd f9f8 	bl	8002720 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e2bd      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533e:	4baf      	ldr	r3, [pc, #700]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x2a8>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd f9e8 	bl	8002720 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005354:	f7fd f9e4 	bl	8002720 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e2a9      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005366:	4ba5      	ldr	r3, [pc, #660]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x2d0>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d060      	beq.n	8005444 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b04      	cmp	r3, #4
 8005386:	d005      	beq.n	8005394 <HAL_RCC_OscConfig+0x310>
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	2b0c      	cmp	r3, #12
 800538c:	d119      	bne.n	80053c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d116      	bne.n	80053c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005394:	4b99      	ldr	r3, [pc, #612]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_OscConfig+0x328>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e286      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ac:	4b93      	ldr	r3, [pc, #588]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	4990      	ldr	r1, [pc, #576]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c0:	e040      	b.n	8005444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d023      	beq.n	8005412 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ca:	4b8c      	ldr	r3, [pc, #560]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a8b      	ldr	r2, [pc, #556]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fd f9a3 	bl	8002720 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053de:	f7fd f99f 	bl	8002720 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e264      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053f0:	4b82      	ldr	r3, [pc, #520]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fc:	4b7f      	ldr	r3, [pc, #508]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	061b      	lsls	r3, r3, #24
 800540a:	497c      	ldr	r1, [pc, #496]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
 8005410:	e018      	b.n	8005444 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005412:	4b7a      	ldr	r3, [pc, #488]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a79      	ldr	r2, [pc, #484]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fd f97f 	bl	8002720 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005426:	f7fd f97b 	bl	8002720 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e240      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005438:	4b70      	ldr	r3, [pc, #448]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f0      	bne.n	8005426 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d03c      	beq.n	80054ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01c      	beq.n	8005492 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005458:	4b68      	ldr	r3, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545e:	4a67      	ldr	r2, [pc, #412]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fd f95a 	bl	8002720 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005470:	f7fd f956 	bl	8002720 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e21b      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005482:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ef      	beq.n	8005470 <HAL_RCC_OscConfig+0x3ec>
 8005490:	e01b      	b.n	80054ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005492:	4b5a      	ldr	r3, [pc, #360]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005498:	4a58      	ldr	r2, [pc, #352]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a2:	f7fd f93d 	bl	8002720 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054aa:	f7fd f939 	bl	8002720 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1fe      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054bc:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1ef      	bne.n	80054aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80a6 	beq.w	8005624 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d8:	2300      	movs	r3, #0
 80054da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054dc:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e8:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	4a43      	ldr	r2, [pc, #268]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80054ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f2:	6593      	str	r3, [r2, #88]	; 0x58
 80054f4:	4b41      	ldr	r3, [pc, #260]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005500:	2301      	movs	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005504:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_RCC_OscConfig+0x57c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d118      	bne.n	8005542 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005510:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <HAL_RCC_OscConfig+0x57c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3a      	ldr	r2, [pc, #232]	; (8005600 <HAL_RCC_OscConfig+0x57c>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551c:	f7fd f900 	bl	8002720 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005524:	f7fd f8fc 	bl	8002720 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1c1      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005536:	4b32      	ldr	r3, [pc, #200]	; (8005600 <HAL_RCC_OscConfig+0x57c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d108      	bne.n	800555c <HAL_RCC_OscConfig+0x4d8>
 800554a:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800555a:	e024      	b.n	80055a6 <HAL_RCC_OscConfig+0x522>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b05      	cmp	r3, #5
 8005562:	d110      	bne.n	8005586 <HAL_RCC_OscConfig+0x502>
 8005564:	4b25      	ldr	r3, [pc, #148]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	4a24      	ldr	r2, [pc, #144]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800556c:	f043 0304 	orr.w	r3, r3, #4
 8005570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005574:	4b21      	ldr	r3, [pc, #132]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	4a20      	ldr	r2, [pc, #128]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005584:	e00f      	b.n	80055a6 <HAL_RCC_OscConfig+0x522>
 8005586:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	4a1b      	ldr	r2, [pc, #108]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005596:	4b19      	ldr	r3, [pc, #100]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 800559e:	f023 0304 	bic.w	r3, r3, #4
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ae:	f7fd f8b7 	bl	8002720 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b6:	f7fd f8b3 	bl	8002720 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e176      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_OscConfig+0x578>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ed      	beq.n	80055b6 <HAL_RCC_OscConfig+0x532>
 80055da:	e01a      	b.n	8005612 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fd f8a0 	bl	8002720 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055e2:	e00f      	b.n	8005604 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fd f89c 	bl	8002720 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d906      	bls.n	8005604 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e15f      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005604:	4baa      	ldr	r3, [pc, #680]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e8      	bne.n	80055e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005618:	4ba5      	ldr	r3, [pc, #660]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	4aa4      	ldr	r2, [pc, #656]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800561e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005622:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d03c      	beq.n	80056aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01c      	beq.n	8005672 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005638:	4b9d      	ldr	r3, [pc, #628]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800563a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800563e:	4a9c      	ldr	r2, [pc, #624]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fd f86a 	bl	8002720 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005650:	f7fd f866 	bl	8002720 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e12b      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005662:	4b93      	ldr	r3, [pc, #588]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ef      	beq.n	8005650 <HAL_RCC_OscConfig+0x5cc>
 8005670:	e01b      	b.n	80056aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005672:	4b8f      	ldr	r3, [pc, #572]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005678:	4a8d      	ldr	r2, [pc, #564]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005682:	f7fd f84d 	bl	8002720 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800568a:	f7fd f849 	bl	8002720 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e10e      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800569c:	4b84      	ldr	r3, [pc, #528]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800569e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ef      	bne.n	800568a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8102 	beq.w	80058b8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	f040 80c5 	bne.w	8005848 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056be:	4b7c      	ldr	r3, [pc, #496]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0203 	and.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d12c      	bne.n	800572c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	3b01      	subs	r3, #1
 80056de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d123      	bne.n	800572c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d11b      	bne.n	800572c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d113      	bne.n	800572c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	3b01      	subs	r3, #1
 8005712:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005714:	429a      	cmp	r2, r3
 8005716:	d109      	bne.n	800572c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	3b01      	subs	r3, #1
 8005726:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d067      	beq.n	80057fc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d062      	beq.n	80057f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005732:	4b5f      	ldr	r3, [pc, #380]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e0bb      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005742:	4b5b      	ldr	r3, [pc, #364]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a5a      	ldr	r2, [pc, #360]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800574e:	f7fc ffe7 	bl	8002720 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005756:	f7fc ffe3 	bl	8002720 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0a8      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005768:	4b51      	ldr	r3, [pc, #324]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005774:	4b4e      	ldr	r3, [pc, #312]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <HAL_RCC_OscConfig+0x830>)
 800577a:	4013      	ands	r3, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005784:	3a01      	subs	r2, #1
 8005786:	0112      	lsls	r2, r2, #4
 8005788:	4311      	orrs	r1, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800578e:	0212      	lsls	r2, r2, #8
 8005790:	4311      	orrs	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005796:	0852      	lsrs	r2, r2, #1
 8005798:	3a01      	subs	r2, #1
 800579a:	0552      	lsls	r2, r2, #21
 800579c:	4311      	orrs	r1, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057a2:	0852      	lsrs	r2, r2, #1
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0652      	lsls	r2, r2, #25
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057ae:	06d2      	lsls	r2, r2, #27
 80057b0:	430a      	orrs	r2, r1
 80057b2:	493f      	ldr	r1, [pc, #252]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057b8:	4b3d      	ldr	r3, [pc, #244]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a3c      	ldr	r2, [pc, #240]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a39      	ldr	r2, [pc, #228]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057d0:	f7fc ffa6 	bl	8002720 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fc ffa2 	bl	8002720 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e067      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ea:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f6:	e05f      	b.n	80058b8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e05e      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fc:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d157      	bne.n	80058b8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005808:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800580e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005812:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005814:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a25      	ldr	r2, [pc, #148]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800581a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800581e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005820:	f7fc ff7e 	bl	8002720 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005828:	f7fc ff7a 	bl	8002720 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e03f      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x7a4>
 8005846:	e037      	b.n	80058b8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d02d      	beq.n	80058aa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584e:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005858:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d105      	bne.n	8005872 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800586c:	f023 0303 	bic.w	r3, r3, #3
 8005870:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005872:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4a0e      	ldr	r2, [pc, #56]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 8005878:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800587c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005880:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005882:	f7fc ff4d 	bl	8002720 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588a:	f7fc ff49 	bl	8002720 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e00e      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <HAL_RCC_OscConfig+0x82c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <HAL_RCC_OscConfig+0x806>
 80058a8:	e006      	b.n	80058b8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e005      	b.n	80058ba <HAL_RCC_OscConfig+0x836>
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000
 80058b4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop

080058c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0c8      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d8:	4b66      	ldr	r3, [pc, #408]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d910      	bls.n	8005908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b63      	ldr	r3, [pc, #396]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 0207 	bic.w	r2, r3, #7
 80058ee:	4961      	ldr	r1, [pc, #388]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b5f      	ldr	r3, [pc, #380]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0b0      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d04c      	beq.n	80059ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d107      	bne.n	800592c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800591c:	4b56      	ldr	r3, [pc, #344]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d121      	bne.n	800596c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e09e      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d107      	bne.n	8005944 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005934:	4b50      	ldr	r3, [pc, #320]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d115      	bne.n	800596c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e092      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d107      	bne.n	800595c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800594c:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e086      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800595c:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e07e      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800596c:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 0203 	bic.w	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	493f      	ldr	r1, [pc, #252]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597e:	f7fc fecf 	bl	8002720 <HAL_GetTick>
 8005982:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005984:	e00a      	b.n	800599c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005986:	f7fc fecb 	bl	8002720 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e066      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599c:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 020c 	and.w	r2, r3, #12
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d1eb      	bne.n	8005986 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ba:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	492c      	ldr	r1, [pc, #176]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d210      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 0207 	bic.w	r2, r3, #7
 80059e2:	4924      	ldr	r1, [pc, #144]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_RCC_ClockConfig+0x1b0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e036      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4918      	ldr	r1, [pc, #96]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4910      	ldr	r1, [pc, #64]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a3a:	f000 f825 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <HAL_RCC_ClockConfig+0x1b4>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	4a0c      	ldr	r2, [pc, #48]	; (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	5cd3      	ldrb	r3, [r2, r3]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	fa21 f303 	lsr.w	r3, r1, r3
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fc fe0e 	bl	8002680 <HAL_InitTick>
 8005a64:	4603      	mov	r3, r0
 8005a66:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a68:	7afb      	ldrb	r3, [r7, #11]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40022000 	.word	0x40022000
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	08009a9c 	.word	0x08009a9c
 8005a80:	20000000 	.word	0x20000000
 8005a84:	20000004 	.word	0x20000004

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	; 0x24
 8005a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a96:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa0:	4b3a      	ldr	r3, [pc, #232]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x34>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d121      	bne.n	8005afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d11e      	bne.n	8005afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005abc:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ac8:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ad8:	4b2c      	ldr	r3, [pc, #176]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ae4:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d102      	bne.n	8005b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	e004      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b0c:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d133      	bne.n	8005b7e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b16:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d002      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0xa4>
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d003      	beq.n	8005b32 <HAL_RCC_GetSysClockFreq+0xaa>
 8005b2a:	e005      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b2e:	617b      	str	r3, [r7, #20]
      break;
 8005b30:	e005      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b32:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b34:	617b      	str	r3, [r7, #20]
      break;
 8005b36:	e002      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	617b      	str	r3, [r7, #20]
      break;
 8005b3c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	3301      	adds	r3, #1
 8005b4a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	fb02 f203 	mul.w	r2, r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0e5b      	lsrs	r3, r3, #25
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3724      	adds	r7, #36	; 0x24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	08009ab4 	.word	0x08009ab4
 8005b94:	00f42400 	.word	0x00f42400
 8005b98:	007a1200 	.word	0x007a1200

08005b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000000 	.word	0x20000000

08005bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bb8:	f7ff fff0 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005bbc:	4601      	mov	r1, r0
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bca:	5cd3      	ldrb	r3, [r2, r3]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	08009aac 	.word	0x08009aac

08005be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005be4:	f7ff ffda 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005be8:	4601      	mov	r1, r0
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	0adb      	lsrs	r3, r3, #11
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bf6:	5cd3      	ldrb	r3, [r2, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	08009aac 	.word	0x08009aac

08005c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c24:	f7ff f982 	bl	8004f2c <HAL_PWREx_GetVoltageRange>
 8005c28:	6178      	str	r0, [r7, #20]
 8005c2a:	e014      	b.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6593      	str	r3, [r2, #88]	; 0x58
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c44:	f7ff f972 	bl	8004f2c <HAL_PWREx_GetVoltageRange>
 8005c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5c:	d10b      	bne.n	8005c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d919      	bls.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2ba0      	cmp	r3, #160	; 0xa0
 8005c68:	d902      	bls.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e013      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c70:	2301      	movs	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e010      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d902      	bls.n	8005c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	e00a      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d102      	bne.n	8005c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c88:	2302      	movs	r3, #2
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e004      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b70      	cmp	r3, #112	; 0x70
 8005c92:	d101      	bne.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c94:	2301      	movs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f023 0207 	bic.w	r2, r3, #7
 8005ca0:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d001      	beq.n	8005cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40022000 	.word	0x40022000

08005ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cd8:	2300      	movs	r3, #0
 8005cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02f      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cf0:	d005      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cf6:	d015      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005cfc:	e00f      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005cfe:	4bac      	ldr	r3, [pc, #688]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	4aab      	ldr	r2, [pc, #684]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d0a:	e00c      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f9dc 	bl	80060d0 <RCCEx_PLLSAI1_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	74fb      	strb	r3, [r7, #19]
      break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d2c:	4ba0      	ldr	r3, [pc, #640]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	499d      	ldr	r1, [pc, #628]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d42:	e001      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	7cfb      	ldrb	r3, [r7, #19]
 8005d46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8099 	beq.w	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d5a:	4b95      	ldr	r3, [pc, #596]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d70:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	4a8e      	ldr	r2, [pc, #568]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7c:	4b8c      	ldr	r3, [pc, #560]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d8c:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a88      	ldr	r2, [pc, #544]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d98:	f7fc fcc2 	bl	8002720 <HAL_GetTick>
 8005d9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d9e:	e009      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da0:	f7fc fcbe 	bl	8002720 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d902      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	74fb      	strb	r3, [r7, #19]
        break;
 8005db2:	e005      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005db4:	4b7f      	ldr	r3, [pc, #508]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ef      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005dc0:	7cfb      	ldrb	r3, [r7, #19]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d155      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dc6:	4b7a      	ldr	r3, [pc, #488]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01e      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d019      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005de2:	4b73      	ldr	r3, [pc, #460]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dee:	4b70      	ldr	r3, [pc, #448]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	4a6e      	ldr	r2, [pc, #440]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfe:	4b6c      	ldr	r3, [pc, #432]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	4a6a      	ldr	r2, [pc, #424]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e0e:	4a68      	ldr	r2, [pc, #416]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fc fc7e 	bl	8002720 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e26:	e00b      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e28:	f7fc fc7a 	bl	8002720 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d902      	bls.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e3e:	e006      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e40:	4b5b      	ldr	r3, [pc, #364]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0ec      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e54:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	4953      	ldr	r1, [pc, #332]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	74bb      	strb	r3, [r7, #18]
 8005e70:	e001      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	7cfb      	ldrb	r3, [r7, #19]
 8005e74:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e76:	7c7b      	ldrb	r3, [r7, #17]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e80:	4a4b      	ldr	r2, [pc, #300]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e94:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	4943      	ldr	r1, [pc, #268]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f023 020c 	bic.w	r2, r3, #12
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	493a      	ldr	r1, [pc, #232]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	4932      	ldr	r1, [pc, #200]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005efa:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	4929      	ldr	r1, [pc, #164]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	4921      	ldr	r1, [pc, #132]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4918      	ldr	r1, [pc, #96]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4910      	ldr	r1, [pc, #64]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02c      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f82:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa0:	d10a      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa2:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	4a02      	ldr	r2, [pc, #8]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fac:	60d3      	str	r3, [r2, #12]
 8005fae:	e015      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f881 	bl	80060d0 <RCCEx_PLLSAI1_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d028      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fe8:	4b30      	ldr	r3, [pc, #192]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	492d      	ldr	r1, [pc, #180]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006006:	d106      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006008:	4b28      	ldr	r3, [pc, #160]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a27      	ldr	r2, [pc, #156]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006012:	60d3      	str	r3, [r2, #12]
 8006014:	e011      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800601e:	d10c      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	2101      	movs	r1, #1
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f852 	bl	80060d0 <RCCEx_PLLSAI1_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006030:	7cfb      	ldrb	r3, [r7, #19]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8006036:	7cfb      	ldrb	r3, [r7, #19]
 8006038:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01c      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006046:	4b19      	ldr	r3, [pc, #100]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006054:	4915      	ldr	r1, [pc, #84]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006064:	d10c      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 f82f 	bl	80060d0 <RCCEx_PLLSAI1_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006076:	7cfb      	ldrb	r3, [r7, #19]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800607c:	7cfb      	ldrb	r3, [r7, #19]
 800607e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	4904      	ldr	r1, [pc, #16]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40021000 	.word	0x40021000

080060b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a04      	ldr	r2, [pc, #16]	; (80060cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80060ba:	f043 0304 	orr.w	r3, r3, #4
 80060be:	6013      	str	r3, [r2, #0]
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000

080060d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060de:	4b73      	ldr	r3, [pc, #460]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d018      	beq.n	800611c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060ea:	4b70      	ldr	r3, [pc, #448]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0203 	and.w	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d10d      	bne.n	8006116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
       ||
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006102:	4b6a      	ldr	r3, [pc, #424]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
       ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d044      	beq.n	80061a0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	e041      	b.n	80061a0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d00c      	beq.n	800613e <RCCEx_PLLSAI1_Config+0x6e>
 8006124:	2b03      	cmp	r3, #3
 8006126:	d013      	beq.n	8006150 <RCCEx_PLLSAI1_Config+0x80>
 8006128:	2b01      	cmp	r3, #1
 800612a:	d120      	bne.n	800616e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800612c:	4b5f      	ldr	r3, [pc, #380]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d11d      	bne.n	8006174 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800613c:	e01a      	b.n	8006174 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800613e:	4b5b      	ldr	r3, [pc, #364]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800614e:	e013      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006150:	4b56      	ldr	r3, [pc, #344]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800615c:	4b53      	ldr	r3, [pc, #332]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800616c:	e006      	b.n	800617c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	73fb      	strb	r3, [r7, #15]
      break;
 8006172:	e004      	b.n	800617e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006174:	bf00      	nop
 8006176:	e002      	b.n	800617e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800617c:	bf00      	nop
    }

    if(status == HAL_OK)
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10d      	bne.n	80061a0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006184:	4b49      	ldr	r3, [pc, #292]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6819      	ldr	r1, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	3b01      	subs	r3, #1
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	430b      	orrs	r3, r1
 800619a:	4944      	ldr	r1, [pc, #272]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800619c:	4313      	orrs	r3, r2
 800619e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d17c      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80061a6:	4b41      	ldr	r3, [pc, #260]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a40      	ldr	r2, [pc, #256]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80061ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b2:	f7fc fab5 	bl	8002720 <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061b8:	e009      	b.n	80061ce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061ba:	f7fc fab1 	bl	8002720 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d902      	bls.n	80061ce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
        break;
 80061cc:	e005      	b.n	80061da <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061ce:	4b37      	ldr	r3, [pc, #220]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ef      	bne.n	80061ba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d15f      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d110      	bne.n	8006208 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061e6:	4b31      	ldr	r3, [pc, #196]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6892      	ldr	r2, [r2, #8]
 80061f6:	0211      	lsls	r1, r2, #8
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68d2      	ldr	r2, [r2, #12]
 80061fc:	06d2      	lsls	r2, r2, #27
 80061fe:	430a      	orrs	r2, r1
 8006200:	492a      	ldr	r1, [pc, #168]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006202:	4313      	orrs	r3, r2
 8006204:	610b      	str	r3, [r1, #16]
 8006206:	e027      	b.n	8006258 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d112      	bne.n	8006234 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006216:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6892      	ldr	r2, [r2, #8]
 800621e:	0211      	lsls	r1, r2, #8
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6912      	ldr	r2, [r2, #16]
 8006224:	0852      	lsrs	r2, r2, #1
 8006226:	3a01      	subs	r2, #1
 8006228:	0552      	lsls	r2, r2, #21
 800622a:	430a      	orrs	r2, r1
 800622c:	491f      	ldr	r1, [pc, #124]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	610b      	str	r3, [r1, #16]
 8006232:	e011      	b.n	8006258 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800623c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6892      	ldr	r2, [r2, #8]
 8006244:	0211      	lsls	r1, r2, #8
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6952      	ldr	r2, [r2, #20]
 800624a:	0852      	lsrs	r2, r2, #1
 800624c:	3a01      	subs	r2, #1
 800624e:	0652      	lsls	r2, r2, #25
 8006250:	430a      	orrs	r2, r1
 8006252:	4916      	ldr	r1, [pc, #88]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800625e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006264:	f7fc fa5c 	bl	8002720 <HAL_GetTick>
 8006268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800626a:	e009      	b.n	8006280 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800626c:	f7fc fa58 	bl	8002720 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d902      	bls.n	8006280 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	73fb      	strb	r3, [r7, #15]
          break;
 800627e:	e005      	b.n	800628c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0ef      	beq.n	800626c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006292:	4b06      	ldr	r3, [pc, #24]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	4904      	ldr	r1, [pc, #16]	; (80062ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800629c:	4313      	orrs	r3, r2
 800629e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40021000 	.word	0x40021000

080062b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d06c      	beq.n	800639c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fc f828 	bl	800232c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	22ca      	movs	r2, #202	; 0xca
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2253      	movs	r2, #83	; 0x53
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9a0 	bl	800663a <RTC_EnterInitMode>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d14b      	bne.n	800639c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006316:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6919      	ldr	r1, [r3, #16]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	041a      	lsls	r2, r3, #16
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f9a3 	bl	80066a0 <RTC_ExitInitMode>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11b      	bne.n	800639c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0203 	bic.w	r2, r2, #3
 8006372:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	22ff      	movs	r2, #255	; 0xff
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063a6:	b590      	push	{r4, r7, lr}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_RTC_SetTime+0x1a>
 80063bc:	2302      	movs	r3, #2
 80063be:	e08b      	b.n	80064d8 <HAL_RTC_SetTime+0x132>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	22ca      	movs	r2, #202	; 0xca
 80063d6:	625a      	str	r2, [r3, #36]	; 0x24
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2253      	movs	r2, #83	; 0x53
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f92a 	bl	800663a <RTC_EnterInitMode>
 80063e6:	4603      	mov	r3, r0
 80063e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80063ea:	7cfb      	ldrb	r3, [r7, #19]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d163      	bne.n	80064b8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d126      	bne.n	8006444 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f984 	bl	800671c <RTC_ByteToBcd2>
 8006414:	4603      	mov	r3, r0
 8006416:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f97d 	bl	800671c <RTC_ByteToBcd2>
 8006422:	4603      	mov	r3, r0
 8006424:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006426:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	789b      	ldrb	r3, [r3, #2]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f975 	bl	800671c <RTC_ByteToBcd2>
 8006432:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006434:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	78db      	ldrb	r3, [r3, #3]
 800643c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e018      	b.n	8006476 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006464:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800646a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006480:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006484:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006494:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f8f6 	bl	80066a0 <RTC_ExitInitMode>
 80064b4:	4603      	mov	r3, r0
 80064b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80064c0:	7cfb      	ldrb	r3, [r7, #19]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}

080064e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_RTC_SetDate+0x1a>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e075      	b.n	80065e6 <HAL_RTC_SetDate+0x106>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10e      	bne.n	800652e <HAL_RTC_SetDate+0x4e>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	f023 0310 	bic.w	r3, r3, #16
 8006524:	b2db      	uxtb	r3, r3
 8006526:	330a      	adds	r3, #10
 8006528:	b2da      	uxtb	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11c      	bne.n	800656e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	4618      	mov	r0, r3
 800653a:	f000 f8ef 	bl	800671c <RTC_ByteToBcd2>
 800653e:	4603      	mov	r3, r0
 8006540:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f8e8 	bl	800671c <RTC_ByteToBcd2>
 800654c:	4603      	mov	r3, r0
 800654e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006550:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	789b      	ldrb	r3, [r3, #2]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f8e0 	bl	800671c <RTC_ByteToBcd2>
 800655c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800655e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e00e      	b.n	800658c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	78db      	ldrb	r3, [r3, #3]
 8006572:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800657a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006580:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	22ca      	movs	r2, #202	; 0xca
 8006592:	625a      	str	r2, [r3, #36]	; 0x24
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2253      	movs	r2, #83	; 0x53
 800659a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f84c 	bl	800663a <RTC_EnterInitMode>
 80065a2:	4603      	mov	r3, r0
 80065a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10c      	bne.n	80065c6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f86f 	bl	80066a0 <RTC_ExitInitMode>
 80065c2:	4603      	mov	r3, r0
 80065c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	22ff      	movs	r2, #255	; 0xff
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80065ce:	7cfb      	ldrb	r3, [r7, #19]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80065e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd90      	pop	{r4, r7, pc}

080065ee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006604:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006606:	f7fc f88b 	bl	8002720 <HAL_GetTick>
 800660a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800660c:	e009      	b.n	8006622 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800660e:	f7fc f887 	bl	8002720 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800661c:	d901      	bls.n	8006622 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e007      	b.n	8006632 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0ee      	beq.n	800660e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d120      	bne.n	8006696 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800665e:	f7fc f85f 	bl	8002720 <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006664:	e00d      	b.n	8006682 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006666:	f7fc f85b 	bl	8002720 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006674:	d905      	bls.n	8006682 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2203      	movs	r2, #3
 800667e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <RTC_EnterInitMode+0x5c>
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d1e7      	bne.n	8006666 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <RTC_ExitInitMode+0x78>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <RTC_ExitInitMode+0x78>)
 80066b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80066b8:	4b17      	ldr	r3, [pc, #92]	; (8006718 <RTC_ExitInitMode+0x78>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10c      	bne.n	80066de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ff92 	bl	80065ee <HAL_RTC_WaitForSynchro>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01e      	beq.n	800670e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2203      	movs	r2, #3
 80066d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e017      	b.n	800670e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066de:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <RTC_ExitInitMode+0x78>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <RTC_ExitInitMode+0x78>)
 80066e4:	f023 0320 	bic.w	r3, r3, #32
 80066e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff ff7f 	bl	80065ee <HAL_RTC_WaitForSynchro>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2203      	movs	r2, #3
 80066fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <RTC_ExitInitMode+0x78>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	4a04      	ldr	r2, [pc, #16]	; (8006718 <RTC_ExitInitMode+0x78>)
 8006708:	f043 0320 	orr.w	r3, r3, #32
 800670c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40002800 	.word	0x40002800

0800671c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800672e:	e005      	b.n	800673c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	3b0a      	subs	r3, #10
 800673a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	2b09      	cmp	r3, #9
 8006740:	d8f6      	bhi.n	8006730 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	b2da      	uxtb	r2, r3
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	4313      	orrs	r3, r2
 800674e:	b2db      	uxtb	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006772:	2302      	movs	r3, #2
 8006774:	e07f      	b.n	8006876 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2202      	movs	r2, #2
 8006782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	22ca      	movs	r2, #202	; 0xca
 800678c:	625a      	str	r2, [r3, #36]	; 0x24
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2253      	movs	r2, #83	; 0x53
 8006794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80067b6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d120      	bne.n	8006808 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80067c6:	f7fb ffab 	bl	8002720 <HAL_GetTick>
 80067ca:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80067cc:	e015      	b.n	80067fa <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ce:	f7fb ffa7 	bl	8002720 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067dc:	d90d      	bls.n	80067fa <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	22ff      	movs	r2, #255	; 0xff
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2203      	movs	r2, #3
 80067ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e03d      	b.n	8006876 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0e2      	beq.n	80067ce <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 0107 	bic.w	r1, r3, #7
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	430a      	orrs	r2, r1
 8006822:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006824:	4b16      	ldr	r3, [pc, #88]	; (8006880 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800682a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006830:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a12      	ldr	r2, [pc, #72]	; (8006880 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800683a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800684a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800685a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	22ff      	movs	r2, #255	; 0xff
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40010400 	.word	0x40010400

08006884 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006896:	2302      	movs	r3, #2
 8006898:	e04d      	b.n	8006936 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	22ca      	movs	r2, #202	; 0xca
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2253      	movs	r2, #83	; 0x53
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068d8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80068da:	f7fb ff21 	bl	8002720 <HAL_GetTick>
 80068de:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068e0:	e015      	b.n	800690e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068e2:	f7fb ff1d 	bl	8002720 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f0:	d90d      	bls.n	800690e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	22ff      	movs	r2, #255	; 0xff
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2203      	movs	r2, #3
 80068fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e013      	b.n	8006936 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0e2      	beq.n	80068e2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800694a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800694e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800696e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f80b 	bl	800698c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40010400 	.word	0x40010400

0800698c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e040      	b.n	8006a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fb fcce 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2224      	movs	r2, #36	; 0x24
 80069cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa1c 	bl	8006e1c <UART_SetConfig>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e022      	b.n	8006a34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fc20 	bl	800723c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fca7 	bl	8007380 <UART_CheckIdleState>
 8006a32:	4603      	mov	r3, r0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	f040 8081 	bne.w	8006b58 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_UART_Transmit+0x26>
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e079      	b.n	8006b5a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_UART_Transmit+0x38>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e072      	b.n	8006b5a <HAL_UART_Transmit+0x11e>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2221      	movs	r2, #33	; 0x21
 8006a86:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a88:	f7fb fe4a 	bl	8002720 <HAL_GetTick>
 8006a8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa6:	d108      	bne.n	8006aba <HAL_UART_Transmit+0x7e>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	e003      	b.n	8006ac2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006aca:	e02d      	b.n	8006b28 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2180      	movs	r1, #128	; 0x80
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fc97 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e039      	b.n	8006b5a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af8:	b292      	uxth	r2, r2
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	3302      	adds	r3, #2
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e008      	b.n	8006b16 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	781a      	ldrb	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	b292      	uxth	r2, r2
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1cb      	bne.n	8006acc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2140      	movs	r1, #64	; 0x40
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fc63 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e005      	b.n	8006b5a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d113      	bne.n	8006bbc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00e      	beq.n	8006bbc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8114 	beq.w	8006dda <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
      }
      return;
 8006bba:	e10e      	b.n	8006dda <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80d6 	beq.w	8006d70 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4b86      	ldr	r3, [pc, #536]	; (8006dec <HAL_UART_IRQHandler+0x288>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80cb 	beq.w	8006d70 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <HAL_UART_IRQHandler+0x9e>
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <HAL_UART_IRQHandler+0xc6>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c22:	f043 0204 	orr.w	r2, r3, #4
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <HAL_UART_IRQHandler+0xee>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2204      	movs	r2, #4
 8006c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c4a:	f043 0202 	orr.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d013      	beq.n	8006c84 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2208      	movs	r2, #8
 8006c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7c:	f043 0208 	orr.w	r2, r3, #8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00f      	beq.n	8006cae <HAL_UART_IRQHandler+0x14a>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca6:	f043 0220 	orr.w	r2, r3, #32
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8093 	beq.w	8006dde <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d004      	beq.n	8006cfa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d031      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fc00 	bl	8007500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d123      	bne.n	8006d56 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d1c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d013      	beq.n	8006d4e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2a:	4a31      	ldr	r2, [pc, #196]	; (8006df0 <HAL_UART_IRQHandler+0x28c>)
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fd f9d8 	bl	80040e8 <HAL_DMA_Abort_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d016      	beq.n	8006d6c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	e00e      	b.n	8006d6c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f85a 	bl	8006e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d54:	e00a      	b.n	8006d6c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f856 	bl	8006e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	e006      	b.n	8006d6c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f852 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006d6a:	e038      	b.n	8006dde <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	bf00      	nop
    return;
 8006d6e:	e036      	b.n	8006dde <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <HAL_UART_IRQHandler+0x232>
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fc05 	bl	800759e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d94:	e026      	b.n	8006de4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00d      	beq.n	8006dbc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d008      	beq.n	8006dbc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d017      	beq.n	8006de2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    }
    return;
 8006dba:	e012      	b.n	8006de2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <HAL_UART_IRQHandler+0x280>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fbcb 	bl	800756c <UART_EndTransmit_IT>
    return;
 8006dd6:	bf00      	nop
 8006dd8:	e004      	b.n	8006de4 <HAL_UART_IRQHandler+0x280>
      return;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_UART_IRQHandler+0x280>
    return;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_UART_IRQHandler+0x280>
    return;
 8006de2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	04000120 	.word	0x04000120
 8006df0:	08007541 	.word	0x08007541

08006df4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4bb0      	ldr	r3, [pc, #704]	; (800710c <UART_SetConfig+0x2f0>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	430b      	orrs	r3, r1
 8006e54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4aa6      	ldr	r2, [pc, #664]	; (8007110 <UART_SetConfig+0x2f4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a9d      	ldr	r2, [pc, #628]	; (8007114 <UART_SetConfig+0x2f8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d121      	bne.n	8006ee8 <UART_SetConfig+0xcc>
 8006ea4:	4b9c      	ldr	r3, [pc, #624]	; (8007118 <UART_SetConfig+0x2fc>)
 8006ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d816      	bhi.n	8006ee0 <UART_SetConfig+0xc4>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x9c>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006ec9 	.word	0x08006ec9
 8006ebc:	08006ed5 	.word	0x08006ed5
 8006ec0:	08006ecf 	.word	0x08006ecf
 8006ec4:	08006edb 	.word	0x08006edb
 8006ec8:	2301      	movs	r3, #1
 8006eca:	76fb      	strb	r3, [r7, #27]
 8006ecc:	e072      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	76fb      	strb	r3, [r7, #27]
 8006ed2:	e06f      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	76fb      	strb	r3, [r7, #27]
 8006ed8:	e06c      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006eda:	2308      	movs	r3, #8
 8006edc:	76fb      	strb	r3, [r7, #27]
 8006ede:	e069      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	76fb      	strb	r3, [r7, #27]
 8006ee4:	bf00      	nop
 8006ee6:	e065      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a8b      	ldr	r2, [pc, #556]	; (800711c <UART_SetConfig+0x300>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d134      	bne.n	8006f5c <UART_SetConfig+0x140>
 8006ef2:	4b89      	ldr	r3, [pc, #548]	; (8007118 <UART_SetConfig+0x2fc>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef8:	f003 030c 	and.w	r3, r3, #12
 8006efc:	2b0c      	cmp	r3, #12
 8006efe:	d829      	bhi.n	8006f54 <UART_SetConfig+0x138>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0xec>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	08006f55 	.word	0x08006f55
 8006f10:	08006f55 	.word	0x08006f55
 8006f14:	08006f55 	.word	0x08006f55
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f55 	.word	0x08006f55
 8006f20:	08006f55 	.word	0x08006f55
 8006f24:	08006f55 	.word	0x08006f55
 8006f28:	08006f43 	.word	0x08006f43
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f55 	.word	0x08006f55
 8006f38:	08006f4f 	.word	0x08006f4f
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	76fb      	strb	r3, [r7, #27]
 8006f40:	e038      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f42:	2302      	movs	r3, #2
 8006f44:	76fb      	strb	r3, [r7, #27]
 8006f46:	e035      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	76fb      	strb	r3, [r7, #27]
 8006f4c:	e032      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f4e:	2308      	movs	r3, #8
 8006f50:	76fb      	strb	r3, [r7, #27]
 8006f52:	e02f      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f54:	2310      	movs	r3, #16
 8006f56:	76fb      	strb	r3, [r7, #27]
 8006f58:	bf00      	nop
 8006f5a:	e02b      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a6b      	ldr	r2, [pc, #428]	; (8007110 <UART_SetConfig+0x2f4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d124      	bne.n	8006fb0 <UART_SetConfig+0x194>
 8006f66:	4b6c      	ldr	r3, [pc, #432]	; (8007118 <UART_SetConfig+0x2fc>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f74:	d012      	beq.n	8006f9c <UART_SetConfig+0x180>
 8006f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7a:	d802      	bhi.n	8006f82 <UART_SetConfig+0x166>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <UART_SetConfig+0x174>
 8006f80:	e012      	b.n	8006fa8 <UART_SetConfig+0x18c>
 8006f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f86:	d006      	beq.n	8006f96 <UART_SetConfig+0x17a>
 8006f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f8c:	d009      	beq.n	8006fa2 <UART_SetConfig+0x186>
 8006f8e:	e00b      	b.n	8006fa8 <UART_SetConfig+0x18c>
 8006f90:	2300      	movs	r3, #0
 8006f92:	76fb      	strb	r3, [r7, #27]
 8006f94:	e00e      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f96:	2302      	movs	r3, #2
 8006f98:	76fb      	strb	r3, [r7, #27]
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	76fb      	strb	r3, [r7, #27]
 8006fa0:	e008      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	76fb      	strb	r3, [r7, #27]
 8006fa6:	e005      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	76fb      	strb	r3, [r7, #27]
 8006fac:	bf00      	nop
 8006fae:	e001      	b.n	8006fb4 <UART_SetConfig+0x198>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a55      	ldr	r2, [pc, #340]	; (8007110 <UART_SetConfig+0x2f4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d174      	bne.n	80070a8 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fbe:	7efb      	ldrb	r3, [r7, #27]
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d824      	bhi.n	800700e <UART_SetConfig+0x1f2>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x1b0>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	08006fff 	.word	0x08006fff
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	0800700f 	.word	0x0800700f
 8006fe8:	0800700f 	.word	0x0800700f
 8006fec:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff0:	f7fe fde0 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	6178      	str	r0, [r7, #20]
        break;
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b49      	ldr	r3, [pc, #292]	; (8007120 <UART_SetConfig+0x304>)
 8006ffa:	617b      	str	r3, [r7, #20]
        break;
 8006ffc:	e00c      	b.n	8007018 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fe fd43 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8007002:	6178      	str	r0, [r7, #20]
        break;
 8007004:	e008      	b.n	8007018 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	617b      	str	r3, [r7, #20]
        break;
 800700c:	e004      	b.n	8007018 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	76bb      	strb	r3, [r7, #26]
        break;
 8007016:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8100 	beq.w	8007220 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	4413      	add	r3, r2
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	d305      	bcc.n	800703c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	429a      	cmp	r2, r3
 800703a:	d902      	bls.n	8007042 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	76bb      	strb	r3, [r7, #26]
 8007040:	e0ee      	b.n	8007220 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4619      	mov	r1, r3
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	f04f 0400 	mov.w	r4, #0
 8007052:	0214      	lsls	r4, r2, #8
 8007054:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007058:	020b      	lsls	r3, r1, #8
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6852      	ldr	r2, [r2, #4]
 800705e:	0852      	lsrs	r2, r2, #1
 8007060:	4611      	mov	r1, r2
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	eb13 0b01 	adds.w	fp, r3, r1
 800706a:	eb44 0c02 	adc.w	ip, r4, r2
 800706e:	4658      	mov	r0, fp
 8007070:	4661      	mov	r1, ip
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f04f 0400 	mov.w	r4, #0
 800707a:	461a      	mov	r2, r3
 800707c:	4623      	mov	r3, r4
 800707e:	f7f9 fdc3 	bl	8000c08 <__aeabi_uldivmod>
 8007082:	4603      	mov	r3, r0
 8007084:	460c      	mov	r4, r1
 8007086:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708e:	d308      	bcc.n	80070a2 <UART_SetConfig+0x286>
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007096:	d204      	bcs.n	80070a2 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	60da      	str	r2, [r3, #12]
 80070a0:	e0be      	b.n	8007220 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	76bb      	strb	r3, [r7, #26]
 80070a6:	e0bb      	b.n	8007220 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b0:	d169      	bne.n	8007186 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80070b2:	7efb      	ldrb	r3, [r7, #27]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d835      	bhi.n	8007124 <UART_SetConfig+0x308>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <UART_SetConfig+0x2a4>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070ed 	.word	0x080070ed
 80070c8:	080070f5 	.word	0x080070f5
 80070cc:	08007125 	.word	0x08007125
 80070d0:	080070fb 	.word	0x080070fb
 80070d4:	08007125 	.word	0x08007125
 80070d8:	08007125 	.word	0x08007125
 80070dc:	08007125 	.word	0x08007125
 80070e0:	08007103 	.word	0x08007103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e4:	f7fe fd66 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80070e8:	6178      	str	r0, [r7, #20]
        break;
 80070ea:	e020      	b.n	800712e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ec:	f7fe fd78 	bl	8005be0 <HAL_RCC_GetPCLK2Freq>
 80070f0:	6178      	str	r0, [r7, #20]
        break;
 80070f2:	e01c      	b.n	800712e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <UART_SetConfig+0x304>)
 80070f6:	617b      	str	r3, [r7, #20]
        break;
 80070f8:	e019      	b.n	800712e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fa:	f7fe fcc5 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 80070fe:	6178      	str	r0, [r7, #20]
        break;
 8007100:	e015      	b.n	800712e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007106:	617b      	str	r3, [r7, #20]
        break;
 8007108:	e011      	b.n	800712e <UART_SetConfig+0x312>
 800710a:	bf00      	nop
 800710c:	efff69f3 	.word	0xefff69f3
 8007110:	40008000 	.word	0x40008000
 8007114:	40013800 	.word	0x40013800
 8007118:	40021000 	.word	0x40021000
 800711c:	40004400 	.word	0x40004400
 8007120:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	76bb      	strb	r3, [r7, #26]
        break;
 800712c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d075      	beq.n	8007220 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	005a      	lsls	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	441a      	add	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	b29b      	uxth	r3, r3
 800714a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b0f      	cmp	r3, #15
 8007150:	d916      	bls.n	8007180 <UART_SetConfig+0x364>
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007158:	d212      	bcs.n	8007180 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	b29b      	uxth	r3, r3
 800715e:	f023 030f 	bic.w	r3, r3, #15
 8007162:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	b29a      	uxth	r2, r3
 8007170:	89fb      	ldrh	r3, [r7, #14]
 8007172:	4313      	orrs	r3, r2
 8007174:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	89fa      	ldrh	r2, [r7, #14]
 800717c:	60da      	str	r2, [r3, #12]
 800717e:	e04f      	b.n	8007220 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	76bb      	strb	r3, [r7, #26]
 8007184:	e04c      	b.n	8007220 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007186:	7efb      	ldrb	r3, [r7, #27]
 8007188:	2b08      	cmp	r3, #8
 800718a:	d828      	bhi.n	80071de <UART_SetConfig+0x3c2>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0x378>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	080071df 	.word	0x080071df
 80071a4:	080071cf 	.word	0x080071cf
 80071a8:	080071df 	.word	0x080071df
 80071ac:	080071df 	.word	0x080071df
 80071b0:	080071df 	.word	0x080071df
 80071b4:	080071d7 	.word	0x080071d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7fe fcfc 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80071bc:	6178      	str	r0, [r7, #20]
        break;
 80071be:	e013      	b.n	80071e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c0:	f7fe fd0e 	bl	8005be0 <HAL_RCC_GetPCLK2Freq>
 80071c4:	6178      	str	r0, [r7, #20]
        break;
 80071c6:	e00f      	b.n	80071e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c8:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <UART_SetConfig+0x41c>)
 80071ca:	617b      	str	r3, [r7, #20]
        break;
 80071cc:	e00c      	b.n	80071e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ce:	f7fe fc5b 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 80071d2:	6178      	str	r0, [r7, #20]
        break;
 80071d4:	e008      	b.n	80071e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	617b      	str	r3, [r7, #20]
        break;
 80071dc:	e004      	b.n	80071e8 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	76bb      	strb	r3, [r7, #26]
        break;
 80071e6:	bf00      	nop
    }

    if (pclk != 0U)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d018      	beq.n	8007220 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	085a      	lsrs	r2, r3, #1
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	441a      	add	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	b29b      	uxth	r3, r3
 8007202:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d908      	bls.n	800721c <UART_SetConfig+0x400>
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d204      	bcs.n	800721c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	e001      	b.n	8007220 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800722c:	7ebb      	ldrb	r3, [r7, #26]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007238:	00f42400 	.word	0x00f42400

0800723c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800733a:	d10a      	bne.n	8007352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800738e:	f7fb f9c7 	bl	8002720 <HAL_GetTick>
 8007392:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d10e      	bne.n	80073c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f82a 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e020      	b.n	8007402 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d10e      	bne.n	80073ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f814 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e00a      	b.n	8007402 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741a:	e05d      	b.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d059      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007424:	f7fb f97c 	bl	8002720 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	429a      	cmp	r2, r3
 8007432:	d302      	bcc.n	800743a <UART_WaitOnFlagUntilTimeout+0x30>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11b      	bne.n	8007472 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007448:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e042      	b.n	80074f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02b      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748e:	d123      	bne.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e00f      	b.n	80074f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4013      	ands	r3, r2
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d092      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007516:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff fc52 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007582:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff fc2f 	bl	8006df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <__errno>:
 80075b4:	4b01      	ldr	r3, [pc, #4]	; (80075bc <__errno+0x8>)
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	2000000c 	.word	0x2000000c

080075c0 <__libc_init_array>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4e0d      	ldr	r6, [pc, #52]	; (80075f8 <__libc_init_array+0x38>)
 80075c4:	4c0d      	ldr	r4, [pc, #52]	; (80075fc <__libc_init_array+0x3c>)
 80075c6:	1ba4      	subs	r4, r4, r6
 80075c8:	10a4      	asrs	r4, r4, #2
 80075ca:	2500      	movs	r5, #0
 80075cc:	42a5      	cmp	r5, r4
 80075ce:	d109      	bne.n	80075e4 <__libc_init_array+0x24>
 80075d0:	4e0b      	ldr	r6, [pc, #44]	; (8007600 <__libc_init_array+0x40>)
 80075d2:	4c0c      	ldr	r4, [pc, #48]	; (8007604 <__libc_init_array+0x44>)
 80075d4:	f002 f8f0 	bl	80097b8 <_init>
 80075d8:	1ba4      	subs	r4, r4, r6
 80075da:	10a4      	asrs	r4, r4, #2
 80075dc:	2500      	movs	r5, #0
 80075de:	42a5      	cmp	r5, r4
 80075e0:	d105      	bne.n	80075ee <__libc_init_array+0x2e>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075e8:	4798      	blx	r3
 80075ea:	3501      	adds	r5, #1
 80075ec:	e7ee      	b.n	80075cc <__libc_init_array+0xc>
 80075ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075f2:	4798      	blx	r3
 80075f4:	3501      	adds	r5, #1
 80075f6:	e7f2      	b.n	80075de <__libc_init_array+0x1e>
 80075f8:	08009d48 	.word	0x08009d48
 80075fc:	08009d48 	.word	0x08009d48
 8007600:	08009d48 	.word	0x08009d48
 8007604:	08009d4c 	.word	0x08009d4c

08007608 <malloc>:
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <malloc+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f000 b859 	b.w	80076c4 <_malloc_r>
 8007612:	bf00      	nop
 8007614:	2000000c 	.word	0x2000000c

08007618 <memset>:
 8007618:	4402      	add	r2, r0
 800761a:	4603      	mov	r3, r0
 800761c:	4293      	cmp	r3, r2
 800761e:	d100      	bne.n	8007622 <memset+0xa>
 8007620:	4770      	bx	lr
 8007622:	f803 1b01 	strb.w	r1, [r3], #1
 8007626:	e7f9      	b.n	800761c <memset+0x4>

08007628 <_free_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	2900      	cmp	r1, #0
 800762e:	d045      	beq.n	80076bc <_free_r+0x94>
 8007630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007634:	1f0c      	subs	r4, r1, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb8      	it	lt
 800763a:	18e4      	addlt	r4, r4, r3
 800763c:	f001 fc2b 	bl	8008e96 <__malloc_lock>
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <_free_r+0x98>)
 8007642:	6813      	ldr	r3, [r2, #0]
 8007644:	4610      	mov	r0, r2
 8007646:	b933      	cbnz	r3, 8007656 <_free_r+0x2e>
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	6014      	str	r4, [r2, #0]
 800764c:	4628      	mov	r0, r5
 800764e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007652:	f001 bc21 	b.w	8008e98 <__malloc_unlock>
 8007656:	42a3      	cmp	r3, r4
 8007658:	d90c      	bls.n	8007674 <_free_r+0x4c>
 800765a:	6821      	ldr	r1, [r4, #0]
 800765c:	1862      	adds	r2, r4, r1
 800765e:	4293      	cmp	r3, r2
 8007660:	bf04      	itt	eq
 8007662:	681a      	ldreq	r2, [r3, #0]
 8007664:	685b      	ldreq	r3, [r3, #4]
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	bf04      	itt	eq
 800766a:	1852      	addeq	r2, r2, r1
 800766c:	6022      	streq	r2, [r4, #0]
 800766e:	6004      	str	r4, [r0, #0]
 8007670:	e7ec      	b.n	800764c <_free_r+0x24>
 8007672:	4613      	mov	r3, r2
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	b10a      	cbz	r2, 800767c <_free_r+0x54>
 8007678:	42a2      	cmp	r2, r4
 800767a:	d9fa      	bls.n	8007672 <_free_r+0x4a>
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	1858      	adds	r0, r3, r1
 8007680:	42a0      	cmp	r0, r4
 8007682:	d10b      	bne.n	800769c <_free_r+0x74>
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	4401      	add	r1, r0
 8007688:	1858      	adds	r0, r3, r1
 800768a:	4282      	cmp	r2, r0
 800768c:	6019      	str	r1, [r3, #0]
 800768e:	d1dd      	bne.n	800764c <_free_r+0x24>
 8007690:	6810      	ldr	r0, [r2, #0]
 8007692:	6852      	ldr	r2, [r2, #4]
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	4401      	add	r1, r0
 8007698:	6019      	str	r1, [r3, #0]
 800769a:	e7d7      	b.n	800764c <_free_r+0x24>
 800769c:	d902      	bls.n	80076a4 <_free_r+0x7c>
 800769e:	230c      	movs	r3, #12
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	e7d3      	b.n	800764c <_free_r+0x24>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	1821      	adds	r1, r4, r0
 80076a8:	428a      	cmp	r2, r1
 80076aa:	bf04      	itt	eq
 80076ac:	6811      	ldreq	r1, [r2, #0]
 80076ae:	6852      	ldreq	r2, [r2, #4]
 80076b0:	6062      	str	r2, [r4, #4]
 80076b2:	bf04      	itt	eq
 80076b4:	1809      	addeq	r1, r1, r0
 80076b6:	6021      	streq	r1, [r4, #0]
 80076b8:	605c      	str	r4, [r3, #4]
 80076ba:	e7c7      	b.n	800764c <_free_r+0x24>
 80076bc:	bd38      	pop	{r3, r4, r5, pc}
 80076be:	bf00      	nop
 80076c0:	20000214 	.word	0x20000214

080076c4 <_malloc_r>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	1ccd      	adds	r5, r1, #3
 80076c8:	f025 0503 	bic.w	r5, r5, #3
 80076cc:	3508      	adds	r5, #8
 80076ce:	2d0c      	cmp	r5, #12
 80076d0:	bf38      	it	cc
 80076d2:	250c      	movcc	r5, #12
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	4606      	mov	r6, r0
 80076d8:	db01      	blt.n	80076de <_malloc_r+0x1a>
 80076da:	42a9      	cmp	r1, r5
 80076dc:	d903      	bls.n	80076e6 <_malloc_r+0x22>
 80076de:	230c      	movs	r3, #12
 80076e0:	6033      	str	r3, [r6, #0]
 80076e2:	2000      	movs	r0, #0
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
 80076e6:	f001 fbd6 	bl	8008e96 <__malloc_lock>
 80076ea:	4a21      	ldr	r2, [pc, #132]	; (8007770 <_malloc_r+0xac>)
 80076ec:	6814      	ldr	r4, [r2, #0]
 80076ee:	4621      	mov	r1, r4
 80076f0:	b991      	cbnz	r1, 8007718 <_malloc_r+0x54>
 80076f2:	4c20      	ldr	r4, [pc, #128]	; (8007774 <_malloc_r+0xb0>)
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	b91b      	cbnz	r3, 8007700 <_malloc_r+0x3c>
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 fc99 	bl	8008030 <_sbrk_r>
 80076fe:	6020      	str	r0, [r4, #0]
 8007700:	4629      	mov	r1, r5
 8007702:	4630      	mov	r0, r6
 8007704:	f000 fc94 	bl	8008030 <_sbrk_r>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d124      	bne.n	8007756 <_malloc_r+0x92>
 800770c:	230c      	movs	r3, #12
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	4630      	mov	r0, r6
 8007712:	f001 fbc1 	bl	8008e98 <__malloc_unlock>
 8007716:	e7e4      	b.n	80076e2 <_malloc_r+0x1e>
 8007718:	680b      	ldr	r3, [r1, #0]
 800771a:	1b5b      	subs	r3, r3, r5
 800771c:	d418      	bmi.n	8007750 <_malloc_r+0x8c>
 800771e:	2b0b      	cmp	r3, #11
 8007720:	d90f      	bls.n	8007742 <_malloc_r+0x7e>
 8007722:	600b      	str	r3, [r1, #0]
 8007724:	50cd      	str	r5, [r1, r3]
 8007726:	18cc      	adds	r4, r1, r3
 8007728:	4630      	mov	r0, r6
 800772a:	f001 fbb5 	bl	8008e98 <__malloc_unlock>
 800772e:	f104 000b 	add.w	r0, r4, #11
 8007732:	1d23      	adds	r3, r4, #4
 8007734:	f020 0007 	bic.w	r0, r0, #7
 8007738:	1ac3      	subs	r3, r0, r3
 800773a:	d0d3      	beq.n	80076e4 <_malloc_r+0x20>
 800773c:	425a      	negs	r2, r3
 800773e:	50e2      	str	r2, [r4, r3]
 8007740:	e7d0      	b.n	80076e4 <_malloc_r+0x20>
 8007742:	428c      	cmp	r4, r1
 8007744:	684b      	ldr	r3, [r1, #4]
 8007746:	bf16      	itet	ne
 8007748:	6063      	strne	r3, [r4, #4]
 800774a:	6013      	streq	r3, [r2, #0]
 800774c:	460c      	movne	r4, r1
 800774e:	e7eb      	b.n	8007728 <_malloc_r+0x64>
 8007750:	460c      	mov	r4, r1
 8007752:	6849      	ldr	r1, [r1, #4]
 8007754:	e7cc      	b.n	80076f0 <_malloc_r+0x2c>
 8007756:	1cc4      	adds	r4, r0, #3
 8007758:	f024 0403 	bic.w	r4, r4, #3
 800775c:	42a0      	cmp	r0, r4
 800775e:	d005      	beq.n	800776c <_malloc_r+0xa8>
 8007760:	1a21      	subs	r1, r4, r0
 8007762:	4630      	mov	r0, r6
 8007764:	f000 fc64 	bl	8008030 <_sbrk_r>
 8007768:	3001      	adds	r0, #1
 800776a:	d0cf      	beq.n	800770c <_malloc_r+0x48>
 800776c:	6025      	str	r5, [r4, #0]
 800776e:	e7db      	b.n	8007728 <_malloc_r+0x64>
 8007770:	20000214 	.word	0x20000214
 8007774:	20000218 	.word	0x20000218

08007778 <__cvt>:
 8007778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	ec55 4b10 	vmov	r4, r5, d0
 8007780:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007782:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007786:	2d00      	cmp	r5, #0
 8007788:	460e      	mov	r6, r1
 800778a:	4691      	mov	r9, r2
 800778c:	4619      	mov	r1, r3
 800778e:	bfb8      	it	lt
 8007790:	4622      	movlt	r2, r4
 8007792:	462b      	mov	r3, r5
 8007794:	f027 0720 	bic.w	r7, r7, #32
 8007798:	bfbb      	ittet	lt
 800779a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800779e:	461d      	movlt	r5, r3
 80077a0:	2300      	movge	r3, #0
 80077a2:	232d      	movlt	r3, #45	; 0x2d
 80077a4:	bfb8      	it	lt
 80077a6:	4614      	movlt	r4, r2
 80077a8:	2f46      	cmp	r7, #70	; 0x46
 80077aa:	700b      	strb	r3, [r1, #0]
 80077ac:	d004      	beq.n	80077b8 <__cvt+0x40>
 80077ae:	2f45      	cmp	r7, #69	; 0x45
 80077b0:	d100      	bne.n	80077b4 <__cvt+0x3c>
 80077b2:	3601      	adds	r6, #1
 80077b4:	2102      	movs	r1, #2
 80077b6:	e000      	b.n	80077ba <__cvt+0x42>
 80077b8:	2103      	movs	r1, #3
 80077ba:	ab03      	add	r3, sp, #12
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	ab02      	add	r3, sp, #8
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4632      	mov	r2, r6
 80077c4:	4653      	mov	r3, sl
 80077c6:	ec45 4b10 	vmov	d0, r4, r5
 80077ca:	f000 fd7d 	bl	80082c8 <_dtoa_r>
 80077ce:	2f47      	cmp	r7, #71	; 0x47
 80077d0:	4680      	mov	r8, r0
 80077d2:	d102      	bne.n	80077da <__cvt+0x62>
 80077d4:	f019 0f01 	tst.w	r9, #1
 80077d8:	d026      	beq.n	8007828 <__cvt+0xb0>
 80077da:	2f46      	cmp	r7, #70	; 0x46
 80077dc:	eb08 0906 	add.w	r9, r8, r6
 80077e0:	d111      	bne.n	8007806 <__cvt+0x8e>
 80077e2:	f898 3000 	ldrb.w	r3, [r8]
 80077e6:	2b30      	cmp	r3, #48	; 0x30
 80077e8:	d10a      	bne.n	8007800 <__cvt+0x88>
 80077ea:	2200      	movs	r2, #0
 80077ec:	2300      	movs	r3, #0
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f9 f979 	bl	8000ae8 <__aeabi_dcmpeq>
 80077f6:	b918      	cbnz	r0, 8007800 <__cvt+0x88>
 80077f8:	f1c6 0601 	rsb	r6, r6, #1
 80077fc:	f8ca 6000 	str.w	r6, [sl]
 8007800:	f8da 3000 	ldr.w	r3, [sl]
 8007804:	4499      	add	r9, r3
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f9 f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007812:	b938      	cbnz	r0, 8007824 <__cvt+0xac>
 8007814:	2230      	movs	r2, #48	; 0x30
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	454b      	cmp	r3, r9
 800781a:	d205      	bcs.n	8007828 <__cvt+0xb0>
 800781c:	1c59      	adds	r1, r3, #1
 800781e:	9103      	str	r1, [sp, #12]
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e7f8      	b.n	8007816 <__cvt+0x9e>
 8007824:	f8cd 900c 	str.w	r9, [sp, #12]
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800782c:	eba3 0308 	sub.w	r3, r3, r8
 8007830:	4640      	mov	r0, r8
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	b004      	add	sp, #16
 8007836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800783a <__exponent>:
 800783a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800783c:	2900      	cmp	r1, #0
 800783e:	4604      	mov	r4, r0
 8007840:	bfba      	itte	lt
 8007842:	4249      	neglt	r1, r1
 8007844:	232d      	movlt	r3, #45	; 0x2d
 8007846:	232b      	movge	r3, #43	; 0x2b
 8007848:	2909      	cmp	r1, #9
 800784a:	f804 2b02 	strb.w	r2, [r4], #2
 800784e:	7043      	strb	r3, [r0, #1]
 8007850:	dd20      	ble.n	8007894 <__exponent+0x5a>
 8007852:	f10d 0307 	add.w	r3, sp, #7
 8007856:	461f      	mov	r7, r3
 8007858:	260a      	movs	r6, #10
 800785a:	fb91 f5f6 	sdiv	r5, r1, r6
 800785e:	fb06 1115 	mls	r1, r6, r5, r1
 8007862:	3130      	adds	r1, #48	; 0x30
 8007864:	2d09      	cmp	r5, #9
 8007866:	f803 1c01 	strb.w	r1, [r3, #-1]
 800786a:	f103 32ff 	add.w	r2, r3, #4294967295
 800786e:	4629      	mov	r1, r5
 8007870:	dc09      	bgt.n	8007886 <__exponent+0x4c>
 8007872:	3130      	adds	r1, #48	; 0x30
 8007874:	3b02      	subs	r3, #2
 8007876:	f802 1c01 	strb.w	r1, [r2, #-1]
 800787a:	42bb      	cmp	r3, r7
 800787c:	4622      	mov	r2, r4
 800787e:	d304      	bcc.n	800788a <__exponent+0x50>
 8007880:	1a10      	subs	r0, r2, r0
 8007882:	b003      	add	sp, #12
 8007884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007886:	4613      	mov	r3, r2
 8007888:	e7e7      	b.n	800785a <__exponent+0x20>
 800788a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800788e:	f804 2b01 	strb.w	r2, [r4], #1
 8007892:	e7f2      	b.n	800787a <__exponent+0x40>
 8007894:	2330      	movs	r3, #48	; 0x30
 8007896:	4419      	add	r1, r3
 8007898:	7083      	strb	r3, [r0, #2]
 800789a:	1d02      	adds	r2, r0, #4
 800789c:	70c1      	strb	r1, [r0, #3]
 800789e:	e7ef      	b.n	8007880 <__exponent+0x46>

080078a0 <_printf_float>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	b08d      	sub	sp, #52	; 0x34
 80078a6:	460c      	mov	r4, r1
 80078a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80078ac:	4616      	mov	r6, r2
 80078ae:	461f      	mov	r7, r3
 80078b0:	4605      	mov	r5, r0
 80078b2:	f001 fac5 	bl	8008e40 <_localeconv_r>
 80078b6:	6803      	ldr	r3, [r0, #0]
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7f8 fc92 	bl	80001e4 <strlen>
 80078c0:	2300      	movs	r3, #0
 80078c2:	930a      	str	r3, [sp, #40]	; 0x28
 80078c4:	f8d8 3000 	ldr.w	r3, [r8]
 80078c8:	9005      	str	r0, [sp, #20]
 80078ca:	3307      	adds	r3, #7
 80078cc:	f023 0307 	bic.w	r3, r3, #7
 80078d0:	f103 0208 	add.w	r2, r3, #8
 80078d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078d8:	f8d4 b000 	ldr.w	fp, [r4]
 80078dc:	f8c8 2000 	str.w	r2, [r8]
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078f0:	9307      	str	r3, [sp, #28]
 80078f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295
 80078fa:	4ba7      	ldr	r3, [pc, #668]	; (8007b98 <_printf_float+0x2f8>)
 80078fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007900:	f7f9 f924 	bl	8000b4c <__aeabi_dcmpun>
 8007904:	bb70      	cbnz	r0, 8007964 <_printf_float+0xc4>
 8007906:	f04f 32ff 	mov.w	r2, #4294967295
 800790a:	4ba3      	ldr	r3, [pc, #652]	; (8007b98 <_printf_float+0x2f8>)
 800790c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007910:	f7f9 f8fe 	bl	8000b10 <__aeabi_dcmple>
 8007914:	bb30      	cbnz	r0, 8007964 <_printf_float+0xc4>
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f9 f8ed 	bl	8000afc <__aeabi_dcmplt>
 8007922:	b110      	cbz	r0, 800792a <_printf_float+0x8a>
 8007924:	232d      	movs	r3, #45	; 0x2d
 8007926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792a:	4a9c      	ldr	r2, [pc, #624]	; (8007b9c <_printf_float+0x2fc>)
 800792c:	4b9c      	ldr	r3, [pc, #624]	; (8007ba0 <_printf_float+0x300>)
 800792e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007932:	bf8c      	ite	hi
 8007934:	4690      	movhi	r8, r2
 8007936:	4698      	movls	r8, r3
 8007938:	2303      	movs	r3, #3
 800793a:	f02b 0204 	bic.w	r2, fp, #4
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	6022      	str	r2, [r4, #0]
 8007942:	f04f 0900 	mov.w	r9, #0
 8007946:	9700      	str	r7, [sp, #0]
 8007948:	4633      	mov	r3, r6
 800794a:	aa0b      	add	r2, sp, #44	; 0x2c
 800794c:	4621      	mov	r1, r4
 800794e:	4628      	mov	r0, r5
 8007950:	f000 f9e6 	bl	8007d20 <_printf_common>
 8007954:	3001      	adds	r0, #1
 8007956:	f040 808d 	bne.w	8007a74 <_printf_float+0x1d4>
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	b00d      	add	sp, #52	; 0x34
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	4642      	mov	r2, r8
 8007966:	464b      	mov	r3, r9
 8007968:	4640      	mov	r0, r8
 800796a:	4649      	mov	r1, r9
 800796c:	f7f9 f8ee 	bl	8000b4c <__aeabi_dcmpun>
 8007970:	b110      	cbz	r0, 8007978 <_printf_float+0xd8>
 8007972:	4a8c      	ldr	r2, [pc, #560]	; (8007ba4 <_printf_float+0x304>)
 8007974:	4b8c      	ldr	r3, [pc, #560]	; (8007ba8 <_printf_float+0x308>)
 8007976:	e7da      	b.n	800792e <_printf_float+0x8e>
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	1c4b      	adds	r3, r1, #1
 800797c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007980:	a80a      	add	r0, sp, #40	; 0x28
 8007982:	d13e      	bne.n	8007a02 <_printf_float+0x162>
 8007984:	2306      	movs	r3, #6
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	2300      	movs	r3, #0
 800798a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800798e:	ab09      	add	r3, sp, #36	; 0x24
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	ec49 8b10 	vmov	d0, r8, r9
 8007996:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800799a:	6022      	str	r2, [r4, #0]
 800799c:	f8cd a004 	str.w	sl, [sp, #4]
 80079a0:	6861      	ldr	r1, [r4, #4]
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7ff fee8 	bl	8007778 <__cvt>
 80079a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80079ac:	2b47      	cmp	r3, #71	; 0x47
 80079ae:	4680      	mov	r8, r0
 80079b0:	d109      	bne.n	80079c6 <_printf_float+0x126>
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	1cd8      	adds	r0, r3, #3
 80079b6:	db02      	blt.n	80079be <_printf_float+0x11e>
 80079b8:	6862      	ldr	r2, [r4, #4]
 80079ba:	4293      	cmp	r3, r2
 80079bc:	dd47      	ble.n	8007a4e <_printf_float+0x1ae>
 80079be:	f1aa 0a02 	sub.w	sl, sl, #2
 80079c2:	fa5f fa8a 	uxtb.w	sl, sl
 80079c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80079ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079cc:	d824      	bhi.n	8007a18 <_printf_float+0x178>
 80079ce:	3901      	subs	r1, #1
 80079d0:	4652      	mov	r2, sl
 80079d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079d6:	9109      	str	r1, [sp, #36]	; 0x24
 80079d8:	f7ff ff2f 	bl	800783a <__exponent>
 80079dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079de:	1813      	adds	r3, r2, r0
 80079e0:	2a01      	cmp	r2, #1
 80079e2:	4681      	mov	r9, r0
 80079e4:	6123      	str	r3, [r4, #16]
 80079e6:	dc02      	bgt.n	80079ee <_printf_float+0x14e>
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	07d1      	lsls	r1, r2, #31
 80079ec:	d501      	bpl.n	80079f2 <_printf_float+0x152>
 80079ee:	3301      	adds	r3, #1
 80079f0:	6123      	str	r3, [r4, #16]
 80079f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0a5      	beq.n	8007946 <_printf_float+0xa6>
 80079fa:	232d      	movs	r3, #45	; 0x2d
 80079fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a00:	e7a1      	b.n	8007946 <_printf_float+0xa6>
 8007a02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007a06:	f000 8177 	beq.w	8007cf8 <_printf_float+0x458>
 8007a0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a0e:	d1bb      	bne.n	8007988 <_printf_float+0xe8>
 8007a10:	2900      	cmp	r1, #0
 8007a12:	d1b9      	bne.n	8007988 <_printf_float+0xe8>
 8007a14:	2301      	movs	r3, #1
 8007a16:	e7b6      	b.n	8007986 <_printf_float+0xe6>
 8007a18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007a1c:	d119      	bne.n	8007a52 <_printf_float+0x1b2>
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	dd0c      	ble.n	8007a3e <_printf_float+0x19e>
 8007a24:	6121      	str	r1, [r4, #16]
 8007a26:	b913      	cbnz	r3, 8007a2e <_printf_float+0x18e>
 8007a28:	6822      	ldr	r2, [r4, #0]
 8007a2a:	07d2      	lsls	r2, r2, #31
 8007a2c:	d502      	bpl.n	8007a34 <_printf_float+0x194>
 8007a2e:	3301      	adds	r3, #1
 8007a30:	440b      	add	r3, r1
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a38:	f04f 0900 	mov.w	r9, #0
 8007a3c:	e7d9      	b.n	80079f2 <_printf_float+0x152>
 8007a3e:	b913      	cbnz	r3, 8007a46 <_printf_float+0x1a6>
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	07d0      	lsls	r0, r2, #31
 8007a44:	d501      	bpl.n	8007a4a <_printf_float+0x1aa>
 8007a46:	3302      	adds	r3, #2
 8007a48:	e7f3      	b.n	8007a32 <_printf_float+0x192>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e7f1      	b.n	8007a32 <_printf_float+0x192>
 8007a4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007a52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a56:	4293      	cmp	r3, r2
 8007a58:	db05      	blt.n	8007a66 <_printf_float+0x1c6>
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	6123      	str	r3, [r4, #16]
 8007a5e:	07d1      	lsls	r1, r2, #31
 8007a60:	d5e8      	bpl.n	8007a34 <_printf_float+0x194>
 8007a62:	3301      	adds	r3, #1
 8007a64:	e7e5      	b.n	8007a32 <_printf_float+0x192>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfd4      	ite	le
 8007a6a:	f1c3 0302 	rsble	r3, r3, #2
 8007a6e:	2301      	movgt	r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	e7de      	b.n	8007a32 <_printf_float+0x192>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	055a      	lsls	r2, r3, #21
 8007a78:	d407      	bmi.n	8007a8a <_printf_float+0x1ea>
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b8      	blx	r7
 8007a84:	3001      	adds	r0, #1
 8007a86:	d12b      	bne.n	8007ae0 <_printf_float+0x240>
 8007a88:	e767      	b.n	800795a <_printf_float+0xba>
 8007a8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007a8e:	f240 80dc 	bls.w	8007c4a <_printf_float+0x3aa>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a9a:	f7f9 f825 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d033      	beq.n	8007b0a <_printf_float+0x26a>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4a41      	ldr	r2, [pc, #260]	; (8007bac <_printf_float+0x30c>)
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f af54 	beq.w	800795a <_printf_float+0xba>
 8007ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	db02      	blt.n	8007ac0 <_printf_float+0x220>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	07d8      	lsls	r0, r3, #31
 8007abe:	d50f      	bpl.n	8007ae0 <_printf_float+0x240>
 8007ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	47b8      	blx	r7
 8007aca:	3001      	adds	r0, #1
 8007acc:	f43f af45 	beq.w	800795a <_printf_float+0xba>
 8007ad0:	f04f 0800 	mov.w	r8, #0
 8007ad4:	f104 091a 	add.w	r9, r4, #26
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ada:	3b01      	subs	r3, #1
 8007adc:	4543      	cmp	r3, r8
 8007ade:	dc09      	bgt.n	8007af4 <_printf_float+0x254>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	079b      	lsls	r3, r3, #30
 8007ae4:	f100 8103 	bmi.w	8007cee <_printf_float+0x44e>
 8007ae8:	68e0      	ldr	r0, [r4, #12]
 8007aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aec:	4298      	cmp	r0, r3
 8007aee:	bfb8      	it	lt
 8007af0:	4618      	movlt	r0, r3
 8007af2:	e734      	b.n	800795e <_printf_float+0xbe>
 8007af4:	2301      	movs	r3, #1
 8007af6:	464a      	mov	r2, r9
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f af2b 	beq.w	800795a <_printf_float+0xba>
 8007b04:	f108 0801 	add.w	r8, r8, #1
 8007b08:	e7e6      	b.n	8007ad8 <_printf_float+0x238>
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc2b      	bgt.n	8007b68 <_printf_float+0x2c8>
 8007b10:	2301      	movs	r3, #1
 8007b12:	4a26      	ldr	r2, [pc, #152]	; (8007bac <_printf_float+0x30c>)
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f43f af1d 	beq.w	800795a <_printf_float+0xba>
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	b923      	cbnz	r3, 8007b2e <_printf_float+0x28e>
 8007b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b26:	b913      	cbnz	r3, 8007b2e <_printf_float+0x28e>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	07d9      	lsls	r1, r3, #31
 8007b2c:	d5d8      	bpl.n	8007ae0 <_printf_float+0x240>
 8007b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	f43f af0e 	beq.w	800795a <_printf_float+0xba>
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	f104 0a1a 	add.w	sl, r4, #26
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	425b      	negs	r3, r3
 8007b4a:	454b      	cmp	r3, r9
 8007b4c:	dc01      	bgt.n	8007b52 <_printf_float+0x2b2>
 8007b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b50:	e794      	b.n	8007a7c <_printf_float+0x1dc>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4652      	mov	r2, sl
 8007b56:	4631      	mov	r1, r6
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b8      	blx	r7
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	f43f aefc 	beq.w	800795a <_printf_float+0xba>
 8007b62:	f109 0901 	add.w	r9, r9, #1
 8007b66:	e7ee      	b.n	8007b46 <_printf_float+0x2a6>
 8007b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	bfa8      	it	ge
 8007b70:	461a      	movge	r2, r3
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	4691      	mov	r9, r2
 8007b76:	dd07      	ble.n	8007b88 <_printf_float+0x2e8>
 8007b78:	4613      	mov	r3, r2
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f aee9 	beq.w	800795a <_printf_float+0xba>
 8007b88:	f104 031a 	add.w	r3, r4, #26
 8007b8c:	f04f 0b00 	mov.w	fp, #0
 8007b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b94:	9306      	str	r3, [sp, #24]
 8007b96:	e015      	b.n	8007bc4 <_printf_float+0x324>
 8007b98:	7fefffff 	.word	0x7fefffff
 8007b9c:	08009ae8 	.word	0x08009ae8
 8007ba0:	08009ae4 	.word	0x08009ae4
 8007ba4:	08009af0 	.word	0x08009af0
 8007ba8:	08009aec 	.word	0x08009aec
 8007bac:	08009af4 	.word	0x08009af4
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	9a06      	ldr	r2, [sp, #24]
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f aecd 	beq.w	800795a <_printf_float+0xba>
 8007bc0:	f10b 0b01 	add.w	fp, fp, #1
 8007bc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007bc8:	ebaa 0309 	sub.w	r3, sl, r9
 8007bcc:	455b      	cmp	r3, fp
 8007bce:	dcef      	bgt.n	8007bb0 <_printf_float+0x310>
 8007bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	44d0      	add	r8, sl
 8007bd8:	db15      	blt.n	8007c06 <_printf_float+0x366>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	07da      	lsls	r2, r3, #31
 8007bde:	d412      	bmi.n	8007c06 <_printf_float+0x366>
 8007be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be4:	eba3 020a 	sub.w	r2, r3, sl
 8007be8:	eba3 0a01 	sub.w	sl, r3, r1
 8007bec:	4592      	cmp	sl, r2
 8007bee:	bfa8      	it	ge
 8007bf0:	4692      	movge	sl, r2
 8007bf2:	f1ba 0f00 	cmp.w	sl, #0
 8007bf6:	dc0e      	bgt.n	8007c16 <_printf_float+0x376>
 8007bf8:	f04f 0800 	mov.w	r8, #0
 8007bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c00:	f104 091a 	add.w	r9, r4, #26
 8007c04:	e019      	b.n	8007c3a <_printf_float+0x39a>
 8007c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1e5      	bne.n	8007be0 <_printf_float+0x340>
 8007c14:	e6a1      	b.n	800795a <_printf_float+0xba>
 8007c16:	4653      	mov	r3, sl
 8007c18:	4642      	mov	r2, r8
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	d1e9      	bne.n	8007bf8 <_printf_float+0x358>
 8007c24:	e699      	b.n	800795a <_printf_float+0xba>
 8007c26:	2301      	movs	r3, #1
 8007c28:	464a      	mov	r2, r9
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae92 	beq.w	800795a <_printf_float+0xba>
 8007c36:	f108 0801 	add.w	r8, r8, #1
 8007c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	eba3 030a 	sub.w	r3, r3, sl
 8007c44:	4543      	cmp	r3, r8
 8007c46:	dcee      	bgt.n	8007c26 <_printf_float+0x386>
 8007c48:	e74a      	b.n	8007ae0 <_printf_float+0x240>
 8007c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4c:	2a01      	cmp	r2, #1
 8007c4e:	dc01      	bgt.n	8007c54 <_printf_float+0x3b4>
 8007c50:	07db      	lsls	r3, r3, #31
 8007c52:	d53a      	bpl.n	8007cca <_printf_float+0x42a>
 8007c54:	2301      	movs	r3, #1
 8007c56:	4642      	mov	r2, r8
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f43f ae7b 	beq.w	800795a <_printf_float+0xba>
 8007c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f108 0801 	add.w	r8, r8, #1
 8007c74:	f43f ae71 	beq.w	800795a <_printf_float+0xba>
 8007c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c84:	2300      	movs	r3, #0
 8007c86:	f7f8 ff2f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c8a:	b9c8      	cbnz	r0, 8007cc0 <_printf_float+0x420>
 8007c8c:	4653      	mov	r3, sl
 8007c8e:	4642      	mov	r2, r8
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	d10e      	bne.n	8007cb8 <_printf_float+0x418>
 8007c9a:	e65e      	b.n	800795a <_printf_float+0xba>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4652      	mov	r2, sl
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f ae57 	beq.w	800795a <_printf_float+0xba>
 8007cac:	f108 0801 	add.w	r8, r8, #1
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	dcf1      	bgt.n	8007c9c <_printf_float+0x3fc>
 8007cb8:	464b      	mov	r3, r9
 8007cba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cbe:	e6de      	b.n	8007a7e <_printf_float+0x1de>
 8007cc0:	f04f 0800 	mov.w	r8, #0
 8007cc4:	f104 0a1a 	add.w	sl, r4, #26
 8007cc8:	e7f2      	b.n	8007cb0 <_printf_float+0x410>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e7df      	b.n	8007c8e <_printf_float+0x3ee>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	464a      	mov	r2, r9
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b8      	blx	r7
 8007cd8:	3001      	adds	r0, #1
 8007cda:	f43f ae3e 	beq.w	800795a <_printf_float+0xba>
 8007cde:	f108 0801 	add.w	r8, r8, #1
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	4543      	cmp	r3, r8
 8007cea:	dcf0      	bgt.n	8007cce <_printf_float+0x42e>
 8007cec:	e6fc      	b.n	8007ae8 <_printf_float+0x248>
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	f104 0919 	add.w	r9, r4, #25
 8007cf6:	e7f4      	b.n	8007ce2 <_printf_float+0x442>
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	f43f ae8b 	beq.w	8007a14 <_printf_float+0x174>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007d04:	ab09      	add	r3, sp, #36	; 0x24
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	ec49 8b10 	vmov	d0, r8, r9
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	f8cd a004 	str.w	sl, [sp, #4]
 8007d12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d16:	4628      	mov	r0, r5
 8007d18:	f7ff fd2e 	bl	8007778 <__cvt>
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	e648      	b.n	80079b2 <_printf_float+0x112>

08007d20 <_printf_common>:
 8007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	4691      	mov	r9, r2
 8007d26:	461f      	mov	r7, r3
 8007d28:	688a      	ldr	r2, [r1, #8]
 8007d2a:	690b      	ldr	r3, [r1, #16]
 8007d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d30:	4293      	cmp	r3, r2
 8007d32:	bfb8      	it	lt
 8007d34:	4613      	movlt	r3, r2
 8007d36:	f8c9 3000 	str.w	r3, [r9]
 8007d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	b112      	cbz	r2, 8007d4a <_printf_common+0x2a>
 8007d44:	3301      	adds	r3, #1
 8007d46:	f8c9 3000 	str.w	r3, [r9]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	0699      	lsls	r1, r3, #26
 8007d4e:	bf42      	ittt	mi
 8007d50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d54:	3302      	addmi	r3, #2
 8007d56:	f8c9 3000 	strmi.w	r3, [r9]
 8007d5a:	6825      	ldr	r5, [r4, #0]
 8007d5c:	f015 0506 	ands.w	r5, r5, #6
 8007d60:	d107      	bne.n	8007d72 <_printf_common+0x52>
 8007d62:	f104 0a19 	add.w	sl, r4, #25
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	f8d9 2000 	ldr.w	r2, [r9]
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	42ab      	cmp	r3, r5
 8007d70:	dc28      	bgt.n	8007dc4 <_printf_common+0xa4>
 8007d72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	3300      	adds	r3, #0
 8007d7a:	bf18      	it	ne
 8007d7c:	2301      	movne	r3, #1
 8007d7e:	0692      	lsls	r2, r2, #26
 8007d80:	d42d      	bmi.n	8007dde <_printf_common+0xbe>
 8007d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d86:	4639      	mov	r1, r7
 8007d88:	4630      	mov	r0, r6
 8007d8a:	47c0      	blx	r8
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d020      	beq.n	8007dd2 <_printf_common+0xb2>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	68e5      	ldr	r5, [r4, #12]
 8007d94:	f8d9 2000 	ldr.w	r2, [r9]
 8007d98:	f003 0306 	and.w	r3, r3, #6
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	bf08      	it	eq
 8007da0:	1aad      	subeq	r5, r5, r2
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	bf0c      	ite	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	2500      	movne	r5, #0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bfc4      	itt	gt
 8007db2:	1a9b      	subgt	r3, r3, r2
 8007db4:	18ed      	addgt	r5, r5, r3
 8007db6:	f04f 0900 	mov.w	r9, #0
 8007dba:	341a      	adds	r4, #26
 8007dbc:	454d      	cmp	r5, r9
 8007dbe:	d11a      	bne.n	8007df6 <_printf_common+0xd6>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e008      	b.n	8007dd6 <_printf_common+0xb6>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4630      	mov	r0, r6
 8007dcc:	47c0      	blx	r8
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d103      	bne.n	8007dda <_printf_common+0xba>
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	3501      	adds	r5, #1
 8007ddc:	e7c3      	b.n	8007d66 <_printf_common+0x46>
 8007dde:	18e1      	adds	r1, r4, r3
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	2030      	movs	r0, #48	; 0x30
 8007de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de8:	4422      	add	r2, r4
 8007dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007df2:	3302      	adds	r3, #2
 8007df4:	e7c5      	b.n	8007d82 <_printf_common+0x62>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	47c0      	blx	r8
 8007e00:	3001      	adds	r0, #1
 8007e02:	d0e6      	beq.n	8007dd2 <_printf_common+0xb2>
 8007e04:	f109 0901 	add.w	r9, r9, #1
 8007e08:	e7d8      	b.n	8007dbc <_printf_common+0x9c>
	...

08007e0c <_printf_i>:
 8007e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e14:	460c      	mov	r4, r1
 8007e16:	7e09      	ldrb	r1, [r1, #24]
 8007e18:	b085      	sub	sp, #20
 8007e1a:	296e      	cmp	r1, #110	; 0x6e
 8007e1c:	4617      	mov	r7, r2
 8007e1e:	4606      	mov	r6, r0
 8007e20:	4698      	mov	r8, r3
 8007e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e24:	f000 80b3 	beq.w	8007f8e <_printf_i+0x182>
 8007e28:	d822      	bhi.n	8007e70 <_printf_i+0x64>
 8007e2a:	2963      	cmp	r1, #99	; 0x63
 8007e2c:	d036      	beq.n	8007e9c <_printf_i+0x90>
 8007e2e:	d80a      	bhi.n	8007e46 <_printf_i+0x3a>
 8007e30:	2900      	cmp	r1, #0
 8007e32:	f000 80b9 	beq.w	8007fa8 <_printf_i+0x19c>
 8007e36:	2958      	cmp	r1, #88	; 0x58
 8007e38:	f000 8083 	beq.w	8007f42 <_printf_i+0x136>
 8007e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e44:	e032      	b.n	8007eac <_printf_i+0xa0>
 8007e46:	2964      	cmp	r1, #100	; 0x64
 8007e48:	d001      	beq.n	8007e4e <_printf_i+0x42>
 8007e4a:	2969      	cmp	r1, #105	; 0x69
 8007e4c:	d1f6      	bne.n	8007e3c <_printf_i+0x30>
 8007e4e:	6820      	ldr	r0, [r4, #0]
 8007e50:	6813      	ldr	r3, [r2, #0]
 8007e52:	0605      	lsls	r5, r0, #24
 8007e54:	f103 0104 	add.w	r1, r3, #4
 8007e58:	d52a      	bpl.n	8007eb0 <_printf_i+0xa4>
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da03      	bge.n	8007e6a <_printf_i+0x5e>
 8007e62:	222d      	movs	r2, #45	; 0x2d
 8007e64:	425b      	negs	r3, r3
 8007e66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e6a:	486f      	ldr	r0, [pc, #444]	; (8008028 <_printf_i+0x21c>)
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	e039      	b.n	8007ee4 <_printf_i+0xd8>
 8007e70:	2973      	cmp	r1, #115	; 0x73
 8007e72:	f000 809d 	beq.w	8007fb0 <_printf_i+0x1a4>
 8007e76:	d808      	bhi.n	8007e8a <_printf_i+0x7e>
 8007e78:	296f      	cmp	r1, #111	; 0x6f
 8007e7a:	d020      	beq.n	8007ebe <_printf_i+0xb2>
 8007e7c:	2970      	cmp	r1, #112	; 0x70
 8007e7e:	d1dd      	bne.n	8007e3c <_printf_i+0x30>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	f043 0320 	orr.w	r3, r3, #32
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	e003      	b.n	8007e92 <_printf_i+0x86>
 8007e8a:	2975      	cmp	r1, #117	; 0x75
 8007e8c:	d017      	beq.n	8007ebe <_printf_i+0xb2>
 8007e8e:	2978      	cmp	r1, #120	; 0x78
 8007e90:	d1d4      	bne.n	8007e3c <_printf_i+0x30>
 8007e92:	2378      	movs	r3, #120	; 0x78
 8007e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e98:	4864      	ldr	r0, [pc, #400]	; (800802c <_printf_i+0x220>)
 8007e9a:	e055      	b.n	8007f48 <_printf_i+0x13c>
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	1d19      	adds	r1, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6011      	str	r1, [r2, #0]
 8007ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eac:	2301      	movs	r3, #1
 8007eae:	e08c      	b.n	8007fca <_printf_i+0x1be>
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6011      	str	r1, [r2, #0]
 8007eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eb8:	bf18      	it	ne
 8007eba:	b21b      	sxthne	r3, r3
 8007ebc:	e7cf      	b.n	8007e5e <_printf_i+0x52>
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	6825      	ldr	r5, [r4, #0]
 8007ec2:	1d18      	adds	r0, r3, #4
 8007ec4:	6010      	str	r0, [r2, #0]
 8007ec6:	0628      	lsls	r0, r5, #24
 8007ec8:	d501      	bpl.n	8007ece <_printf_i+0xc2>
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	e002      	b.n	8007ed4 <_printf_i+0xc8>
 8007ece:	0668      	lsls	r0, r5, #25
 8007ed0:	d5fb      	bpl.n	8007eca <_printf_i+0xbe>
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	4854      	ldr	r0, [pc, #336]	; (8008028 <_printf_i+0x21c>)
 8007ed6:	296f      	cmp	r1, #111	; 0x6f
 8007ed8:	bf14      	ite	ne
 8007eda:	220a      	movne	r2, #10
 8007edc:	2208      	moveq	r2, #8
 8007ede:	2100      	movs	r1, #0
 8007ee0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ee4:	6865      	ldr	r5, [r4, #4]
 8007ee6:	60a5      	str	r5, [r4, #8]
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	f2c0 8095 	blt.w	8008018 <_printf_i+0x20c>
 8007eee:	6821      	ldr	r1, [r4, #0]
 8007ef0:	f021 0104 	bic.w	r1, r1, #4
 8007ef4:	6021      	str	r1, [r4, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d13d      	bne.n	8007f76 <_printf_i+0x16a>
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	f040 808e 	bne.w	800801c <_printf_i+0x210>
 8007f00:	4665      	mov	r5, ip
 8007f02:	2a08      	cmp	r2, #8
 8007f04:	d10b      	bne.n	8007f1e <_printf_i+0x112>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	07db      	lsls	r3, r3, #31
 8007f0a:	d508      	bpl.n	8007f1e <_printf_i+0x112>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	bfde      	ittt	le
 8007f14:	2330      	movle	r3, #48	; 0x30
 8007f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f1e:	ebac 0305 	sub.w	r3, ip, r5
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	f8cd 8000 	str.w	r8, [sp]
 8007f28:	463b      	mov	r3, r7
 8007f2a:	aa03      	add	r2, sp, #12
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7ff fef6 	bl	8007d20 <_printf_common>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d14d      	bne.n	8007fd4 <_printf_i+0x1c8>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b005      	add	sp, #20
 8007f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f42:	4839      	ldr	r0, [pc, #228]	; (8008028 <_printf_i+0x21c>)
 8007f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f48:	6813      	ldr	r3, [r2, #0]
 8007f4a:	6821      	ldr	r1, [r4, #0]
 8007f4c:	1d1d      	adds	r5, r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6015      	str	r5, [r2, #0]
 8007f52:	060a      	lsls	r2, r1, #24
 8007f54:	d50b      	bpl.n	8007f6e <_printf_i+0x162>
 8007f56:	07ca      	lsls	r2, r1, #31
 8007f58:	bf44      	itt	mi
 8007f5a:	f041 0120 	orrmi.w	r1, r1, #32
 8007f5e:	6021      	strmi	r1, [r4, #0]
 8007f60:	b91b      	cbnz	r3, 8007f6a <_printf_i+0x15e>
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	f022 0220 	bic.w	r2, r2, #32
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	e7b7      	b.n	8007ede <_printf_i+0xd2>
 8007f6e:	064d      	lsls	r5, r1, #25
 8007f70:	bf48      	it	mi
 8007f72:	b29b      	uxthmi	r3, r3
 8007f74:	e7ef      	b.n	8007f56 <_printf_i+0x14a>
 8007f76:	4665      	mov	r5, ip
 8007f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f7c:	fb02 3311 	mls	r3, r2, r1, r3
 8007f80:	5cc3      	ldrb	r3, [r0, r3]
 8007f82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f86:	460b      	mov	r3, r1
 8007f88:	2900      	cmp	r1, #0
 8007f8a:	d1f5      	bne.n	8007f78 <_printf_i+0x16c>
 8007f8c:	e7b9      	b.n	8007f02 <_printf_i+0xf6>
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	6825      	ldr	r5, [r4, #0]
 8007f92:	6961      	ldr	r1, [r4, #20]
 8007f94:	1d18      	adds	r0, r3, #4
 8007f96:	6010      	str	r0, [r2, #0]
 8007f98:	0628      	lsls	r0, r5, #24
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	d501      	bpl.n	8007fa2 <_printf_i+0x196>
 8007f9e:	6019      	str	r1, [r3, #0]
 8007fa0:	e002      	b.n	8007fa8 <_printf_i+0x19c>
 8007fa2:	066a      	lsls	r2, r5, #25
 8007fa4:	d5fb      	bpl.n	8007f9e <_printf_i+0x192>
 8007fa6:	8019      	strh	r1, [r3, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	4665      	mov	r5, ip
 8007fae:	e7b9      	b.n	8007f24 <_printf_i+0x118>
 8007fb0:	6813      	ldr	r3, [r2, #0]
 8007fb2:	1d19      	adds	r1, r3, #4
 8007fb4:	6011      	str	r1, [r2, #0]
 8007fb6:	681d      	ldr	r5, [r3, #0]
 8007fb8:	6862      	ldr	r2, [r4, #4]
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f7f8 f91f 	bl	8000200 <memchr>
 8007fc2:	b108      	cbz	r0, 8007fc8 <_printf_i+0x1bc>
 8007fc4:	1b40      	subs	r0, r0, r5
 8007fc6:	6060      	str	r0, [r4, #4]
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd2:	e7a7      	b.n	8007f24 <_printf_i+0x118>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4630      	mov	r0, r6
 8007fdc:	47c0      	blx	r8
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d0aa      	beq.n	8007f38 <_printf_i+0x12c>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	079b      	lsls	r3, r3, #30
 8007fe6:	d413      	bmi.n	8008010 <_printf_i+0x204>
 8007fe8:	68e0      	ldr	r0, [r4, #12]
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	4298      	cmp	r0, r3
 8007fee:	bfb8      	it	lt
 8007ff0:	4618      	movlt	r0, r3
 8007ff2:	e7a3      	b.n	8007f3c <_printf_i+0x130>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	464a      	mov	r2, r9
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	47c0      	blx	r8
 8007ffe:	3001      	adds	r0, #1
 8008000:	d09a      	beq.n	8007f38 <_printf_i+0x12c>
 8008002:	3501      	adds	r5, #1
 8008004:	68e3      	ldr	r3, [r4, #12]
 8008006:	9a03      	ldr	r2, [sp, #12]
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	42ab      	cmp	r3, r5
 800800c:	dcf2      	bgt.n	8007ff4 <_printf_i+0x1e8>
 800800e:	e7eb      	b.n	8007fe8 <_printf_i+0x1dc>
 8008010:	2500      	movs	r5, #0
 8008012:	f104 0919 	add.w	r9, r4, #25
 8008016:	e7f5      	b.n	8008004 <_printf_i+0x1f8>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1ac      	bne.n	8007f76 <_printf_i+0x16a>
 800801c:	7803      	ldrb	r3, [r0, #0]
 800801e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008026:	e76c      	b.n	8007f02 <_printf_i+0xf6>
 8008028:	08009af6 	.word	0x08009af6
 800802c:	08009b07 	.word	0x08009b07

08008030 <_sbrk_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4c06      	ldr	r4, [pc, #24]	; (800804c <_sbrk_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4605      	mov	r5, r0
 8008038:	4608      	mov	r0, r1
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	f7fa fa72 	bl	8002524 <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_sbrk_r+0x1a>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	b103      	cbz	r3, 800804a <_sbrk_r+0x1a>
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	20001450 	.word	0x20001450

08008050 <siprintf>:
 8008050:	b40e      	push	{r1, r2, r3}
 8008052:	b500      	push	{lr}
 8008054:	b09c      	sub	sp, #112	; 0x70
 8008056:	ab1d      	add	r3, sp, #116	; 0x74
 8008058:	9002      	str	r0, [sp, #8]
 800805a:	9006      	str	r0, [sp, #24]
 800805c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008060:	4809      	ldr	r0, [pc, #36]	; (8008088 <siprintf+0x38>)
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	9104      	str	r1, [sp, #16]
 8008066:	4909      	ldr	r1, [pc, #36]	; (800808c <siprintf+0x3c>)
 8008068:	f853 2b04 	ldr.w	r2, [r3], #4
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	6800      	ldr	r0, [r0, #0]
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	a902      	add	r1, sp, #8
 8008074:	f001 fa54 	bl	8009520 <_svfiprintf_r>
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	b01c      	add	sp, #112	; 0x70
 8008080:	f85d eb04 	ldr.w	lr, [sp], #4
 8008084:	b003      	add	sp, #12
 8008086:	4770      	bx	lr
 8008088:	2000000c 	.word	0x2000000c
 800808c:	ffff0208 	.word	0xffff0208

08008090 <_strtoul_l.isra.0>:
 8008090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	4680      	mov	r8, r0
 8008096:	4689      	mov	r9, r1
 8008098:	4692      	mov	sl, r2
 800809a:	461e      	mov	r6, r3
 800809c:	460f      	mov	r7, r1
 800809e:	463d      	mov	r5, r7
 80080a0:	9808      	ldr	r0, [sp, #32]
 80080a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080a6:	f000 fec7 	bl	8008e38 <__locale_ctype_ptr_l>
 80080aa:	4420      	add	r0, r4
 80080ac:	7843      	ldrb	r3, [r0, #1]
 80080ae:	f013 0308 	ands.w	r3, r3, #8
 80080b2:	d130      	bne.n	8008116 <_strtoul_l.isra.0+0x86>
 80080b4:	2c2d      	cmp	r4, #45	; 0x2d
 80080b6:	d130      	bne.n	800811a <_strtoul_l.isra.0+0x8a>
 80080b8:	787c      	ldrb	r4, [r7, #1]
 80080ba:	1cbd      	adds	r5, r7, #2
 80080bc:	2101      	movs	r1, #1
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d05c      	beq.n	800817c <_strtoul_l.isra.0+0xec>
 80080c2:	2e10      	cmp	r6, #16
 80080c4:	d109      	bne.n	80080da <_strtoul_l.isra.0+0x4a>
 80080c6:	2c30      	cmp	r4, #48	; 0x30
 80080c8:	d107      	bne.n	80080da <_strtoul_l.isra.0+0x4a>
 80080ca:	782b      	ldrb	r3, [r5, #0]
 80080cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080d0:	2b58      	cmp	r3, #88	; 0x58
 80080d2:	d14e      	bne.n	8008172 <_strtoul_l.isra.0+0xe2>
 80080d4:	786c      	ldrb	r4, [r5, #1]
 80080d6:	2610      	movs	r6, #16
 80080d8:	3502      	adds	r5, #2
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	2300      	movs	r3, #0
 80080e0:	fbb2 f2f6 	udiv	r2, r2, r6
 80080e4:	fb06 fc02 	mul.w	ip, r6, r2
 80080e8:	ea6f 0c0c 	mvn.w	ip, ip
 80080ec:	4618      	mov	r0, r3
 80080ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80080f2:	2f09      	cmp	r7, #9
 80080f4:	d817      	bhi.n	8008126 <_strtoul_l.isra.0+0x96>
 80080f6:	463c      	mov	r4, r7
 80080f8:	42a6      	cmp	r6, r4
 80080fa:	dd23      	ble.n	8008144 <_strtoul_l.isra.0+0xb4>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db1e      	blt.n	800813e <_strtoul_l.isra.0+0xae>
 8008100:	4282      	cmp	r2, r0
 8008102:	d31c      	bcc.n	800813e <_strtoul_l.isra.0+0xae>
 8008104:	d101      	bne.n	800810a <_strtoul_l.isra.0+0x7a>
 8008106:	45a4      	cmp	ip, r4
 8008108:	db19      	blt.n	800813e <_strtoul_l.isra.0+0xae>
 800810a:	fb00 4006 	mla	r0, r0, r6, r4
 800810e:	2301      	movs	r3, #1
 8008110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008114:	e7eb      	b.n	80080ee <_strtoul_l.isra.0+0x5e>
 8008116:	462f      	mov	r7, r5
 8008118:	e7c1      	b.n	800809e <_strtoul_l.isra.0+0xe>
 800811a:	2c2b      	cmp	r4, #43	; 0x2b
 800811c:	bf04      	itt	eq
 800811e:	1cbd      	addeq	r5, r7, #2
 8008120:	787c      	ldrbeq	r4, [r7, #1]
 8008122:	4619      	mov	r1, r3
 8008124:	e7cb      	b.n	80080be <_strtoul_l.isra.0+0x2e>
 8008126:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800812a:	2f19      	cmp	r7, #25
 800812c:	d801      	bhi.n	8008132 <_strtoul_l.isra.0+0xa2>
 800812e:	3c37      	subs	r4, #55	; 0x37
 8008130:	e7e2      	b.n	80080f8 <_strtoul_l.isra.0+0x68>
 8008132:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008136:	2f19      	cmp	r7, #25
 8008138:	d804      	bhi.n	8008144 <_strtoul_l.isra.0+0xb4>
 800813a:	3c57      	subs	r4, #87	; 0x57
 800813c:	e7dc      	b.n	80080f8 <_strtoul_l.isra.0+0x68>
 800813e:	f04f 33ff 	mov.w	r3, #4294967295
 8008142:	e7e5      	b.n	8008110 <_strtoul_l.isra.0+0x80>
 8008144:	2b00      	cmp	r3, #0
 8008146:	da09      	bge.n	800815c <_strtoul_l.isra.0+0xcc>
 8008148:	2322      	movs	r3, #34	; 0x22
 800814a:	f8c8 3000 	str.w	r3, [r8]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	f1ba 0f00 	cmp.w	sl, #0
 8008156:	d107      	bne.n	8008168 <_strtoul_l.isra.0+0xd8>
 8008158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815c:	b101      	cbz	r1, 8008160 <_strtoul_l.isra.0+0xd0>
 800815e:	4240      	negs	r0, r0
 8008160:	f1ba 0f00 	cmp.w	sl, #0
 8008164:	d0f8      	beq.n	8008158 <_strtoul_l.isra.0+0xc8>
 8008166:	b10b      	cbz	r3, 800816c <_strtoul_l.isra.0+0xdc>
 8008168:	f105 39ff 	add.w	r9, r5, #4294967295
 800816c:	f8ca 9000 	str.w	r9, [sl]
 8008170:	e7f2      	b.n	8008158 <_strtoul_l.isra.0+0xc8>
 8008172:	2430      	movs	r4, #48	; 0x30
 8008174:	2e00      	cmp	r6, #0
 8008176:	d1b0      	bne.n	80080da <_strtoul_l.isra.0+0x4a>
 8008178:	2608      	movs	r6, #8
 800817a:	e7ae      	b.n	80080da <_strtoul_l.isra.0+0x4a>
 800817c:	2c30      	cmp	r4, #48	; 0x30
 800817e:	d0a4      	beq.n	80080ca <_strtoul_l.isra.0+0x3a>
 8008180:	260a      	movs	r6, #10
 8008182:	e7aa      	b.n	80080da <_strtoul_l.isra.0+0x4a>

08008184 <strtoul>:
 8008184:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <strtoul+0x24>)
 8008186:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008188:	681c      	ldr	r4, [r3, #0]
 800818a:	4d08      	ldr	r5, [pc, #32]	; (80081ac <strtoul+0x28>)
 800818c:	6a23      	ldr	r3, [r4, #32]
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf08      	it	eq
 8008192:	462b      	moveq	r3, r5
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	460a      	mov	r2, r1
 800819a:	4601      	mov	r1, r0
 800819c:	4620      	mov	r0, r4
 800819e:	f7ff ff77 	bl	8008090 <_strtoul_l.isra.0>
 80081a2:	b003      	add	sp, #12
 80081a4:	bd30      	pop	{r4, r5, pc}
 80081a6:	bf00      	nop
 80081a8:	2000000c 	.word	0x2000000c
 80081ac:	20000070 	.word	0x20000070

080081b0 <quorem>:
 80081b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	6903      	ldr	r3, [r0, #16]
 80081b6:	690c      	ldr	r4, [r1, #16]
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	4680      	mov	r8, r0
 80081bc:	f2c0 8082 	blt.w	80082c4 <quorem+0x114>
 80081c0:	3c01      	subs	r4, #1
 80081c2:	f101 0714 	add.w	r7, r1, #20
 80081c6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80081ca:	f100 0614 	add.w	r6, r0, #20
 80081ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80081d6:	eb06 030c 	add.w	r3, r6, ip
 80081da:	3501      	adds	r5, #1
 80081dc:	eb07 090c 	add.w	r9, r7, ip
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	fbb0 f5f5 	udiv	r5, r0, r5
 80081e6:	b395      	cbz	r5, 800824e <quorem+0x9e>
 80081e8:	f04f 0a00 	mov.w	sl, #0
 80081ec:	4638      	mov	r0, r7
 80081ee:	46b6      	mov	lr, r6
 80081f0:	46d3      	mov	fp, sl
 80081f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80081f6:	b293      	uxth	r3, r2
 80081f8:	fb05 a303 	mla	r3, r5, r3, sl
 80081fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008200:	b29b      	uxth	r3, r3
 8008202:	ebab 0303 	sub.w	r3, fp, r3
 8008206:	0c12      	lsrs	r2, r2, #16
 8008208:	f8de b000 	ldr.w	fp, [lr]
 800820c:	fb05 a202 	mla	r2, r5, r2, sl
 8008210:	fa13 f38b 	uxtah	r3, r3, fp
 8008214:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008218:	fa1f fb82 	uxth.w	fp, r2
 800821c:	f8de 2000 	ldr.w	r2, [lr]
 8008220:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008228:	b29b      	uxth	r3, r3
 800822a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822e:	4581      	cmp	r9, r0
 8008230:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008234:	f84e 3b04 	str.w	r3, [lr], #4
 8008238:	d2db      	bcs.n	80081f2 <quorem+0x42>
 800823a:	f856 300c 	ldr.w	r3, [r6, ip]
 800823e:	b933      	cbnz	r3, 800824e <quorem+0x9e>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	3b04      	subs	r3, #4
 8008244:	429e      	cmp	r6, r3
 8008246:	461a      	mov	r2, r3
 8008248:	d330      	bcc.n	80082ac <quorem+0xfc>
 800824a:	f8c8 4010 	str.w	r4, [r8, #16]
 800824e:	4640      	mov	r0, r8
 8008250:	f001 f838 	bl	80092c4 <__mcmp>
 8008254:	2800      	cmp	r0, #0
 8008256:	db25      	blt.n	80082a4 <quorem+0xf4>
 8008258:	3501      	adds	r5, #1
 800825a:	4630      	mov	r0, r6
 800825c:	f04f 0c00 	mov.w	ip, #0
 8008260:	f857 2b04 	ldr.w	r2, [r7], #4
 8008264:	f8d0 e000 	ldr.w	lr, [r0]
 8008268:	b293      	uxth	r3, r2
 800826a:	ebac 0303 	sub.w	r3, ip, r3
 800826e:	0c12      	lsrs	r2, r2, #16
 8008270:	fa13 f38e 	uxtah	r3, r3, lr
 8008274:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008282:	45b9      	cmp	r9, r7
 8008284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008288:	f840 3b04 	str.w	r3, [r0], #4
 800828c:	d2e8      	bcs.n	8008260 <quorem+0xb0>
 800828e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008292:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008296:	b92a      	cbnz	r2, 80082a4 <quorem+0xf4>
 8008298:	3b04      	subs	r3, #4
 800829a:	429e      	cmp	r6, r3
 800829c:	461a      	mov	r2, r3
 800829e:	d30b      	bcc.n	80082b8 <quorem+0x108>
 80082a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80082a4:	4628      	mov	r0, r5
 80082a6:	b003      	add	sp, #12
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	3b04      	subs	r3, #4
 80082b0:	2a00      	cmp	r2, #0
 80082b2:	d1ca      	bne.n	800824a <quorem+0x9a>
 80082b4:	3c01      	subs	r4, #1
 80082b6:	e7c5      	b.n	8008244 <quorem+0x94>
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	3b04      	subs	r3, #4
 80082bc:	2a00      	cmp	r2, #0
 80082be:	d1ef      	bne.n	80082a0 <quorem+0xf0>
 80082c0:	3c01      	subs	r4, #1
 80082c2:	e7ea      	b.n	800829a <quorem+0xea>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7ee      	b.n	80082a6 <quorem+0xf6>

080082c8 <_dtoa_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ec57 6b10 	vmov	r6, r7, d0
 80082d0:	b097      	sub	sp, #92	; 0x5c
 80082d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082d4:	9106      	str	r1, [sp, #24]
 80082d6:	4604      	mov	r4, r0
 80082d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80082da:	9312      	str	r3, [sp, #72]	; 0x48
 80082dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082e0:	e9cd 6700 	strd	r6, r7, [sp]
 80082e4:	b93d      	cbnz	r5, 80082f6 <_dtoa_r+0x2e>
 80082e6:	2010      	movs	r0, #16
 80082e8:	f7ff f98e 	bl	8007608 <malloc>
 80082ec:	6260      	str	r0, [r4, #36]	; 0x24
 80082ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082f2:	6005      	str	r5, [r0, #0]
 80082f4:	60c5      	str	r5, [r0, #12]
 80082f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f8:	6819      	ldr	r1, [r3, #0]
 80082fa:	b151      	cbz	r1, 8008312 <_dtoa_r+0x4a>
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	604a      	str	r2, [r1, #4]
 8008300:	2301      	movs	r3, #1
 8008302:	4093      	lsls	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fdfb 	bl	8008f02 <_Bfree>
 800830c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	1e3b      	subs	r3, r7, #0
 8008314:	bfbb      	ittet	lt
 8008316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800831a:	9301      	strlt	r3, [sp, #4]
 800831c:	2300      	movge	r3, #0
 800831e:	2201      	movlt	r2, #1
 8008320:	bfac      	ite	ge
 8008322:	f8c8 3000 	strge.w	r3, [r8]
 8008326:	f8c8 2000 	strlt.w	r2, [r8]
 800832a:	4baf      	ldr	r3, [pc, #700]	; (80085e8 <_dtoa_r+0x320>)
 800832c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008330:	ea33 0308 	bics.w	r3, r3, r8
 8008334:	d114      	bne.n	8008360 <_dtoa_r+0x98>
 8008336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008338:	f242 730f 	movw	r3, #9999	; 0x270f
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	b923      	cbnz	r3, 800834c <_dtoa_r+0x84>
 8008342:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008346:	2800      	cmp	r0, #0
 8008348:	f000 8542 	beq.w	8008dd0 <_dtoa_r+0xb08>
 800834c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800834e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80085fc <_dtoa_r+0x334>
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8544 	beq.w	8008de0 <_dtoa_r+0xb18>
 8008358:	f10b 0303 	add.w	r3, fp, #3
 800835c:	f000 bd3e 	b.w	8008ddc <_dtoa_r+0xb14>
 8008360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8008370:	4681      	mov	r9, r0
 8008372:	b168      	cbz	r0, 8008390 <_dtoa_r+0xc8>
 8008374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008376:	2301      	movs	r3, #1
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8524 	beq.w	8008dca <_dtoa_r+0xb02>
 8008382:	4b9a      	ldr	r3, [pc, #616]	; (80085ec <_dtoa_r+0x324>)
 8008384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008386:	f103 3bff 	add.w	fp, r3, #4294967295
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	f000 bd28 	b.w	8008de0 <_dtoa_r+0xb18>
 8008390:	aa14      	add	r2, sp, #80	; 0x50
 8008392:	a915      	add	r1, sp, #84	; 0x54
 8008394:	ec47 6b10 	vmov	d0, r6, r7
 8008398:	4620      	mov	r0, r4
 800839a:	f001 f80a 	bl	80093b2 <__d2b>
 800839e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083a2:	9004      	str	r0, [sp, #16]
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	d07c      	beq.n	80084a2 <_dtoa_r+0x1da>
 80083a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80083b0:	46b2      	mov	sl, r6
 80083b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80083b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80083be:	2200      	movs	r2, #0
 80083c0:	4b8b      	ldr	r3, [pc, #556]	; (80085f0 <_dtoa_r+0x328>)
 80083c2:	4650      	mov	r0, sl
 80083c4:	4659      	mov	r1, fp
 80083c6:	f7f7 ff6f 	bl	80002a8 <__aeabi_dsub>
 80083ca:	a381      	add	r3, pc, #516	; (adr r3, 80085d0 <_dtoa_r+0x308>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f8 f922 	bl	8000618 <__aeabi_dmul>
 80083d4:	a380      	add	r3, pc, #512	; (adr r3, 80085d8 <_dtoa_r+0x310>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f7 ff67 	bl	80002ac <__adddf3>
 80083de:	4606      	mov	r6, r0
 80083e0:	4628      	mov	r0, r5
 80083e2:	460f      	mov	r7, r1
 80083e4:	f7f8 f8ae 	bl	8000544 <__aeabi_i2d>
 80083e8:	a37d      	add	r3, pc, #500	; (adr r3, 80085e0 <_dtoa_r+0x318>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f7f8 f913 	bl	8000618 <__aeabi_dmul>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4630      	mov	r0, r6
 80083f8:	4639      	mov	r1, r7
 80083fa:	f7f7 ff57 	bl	80002ac <__adddf3>
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	f7f8 fbb9 	bl	8000b78 <__aeabi_d2iz>
 8008406:	2200      	movs	r2, #0
 8008408:	4682      	mov	sl, r0
 800840a:	2300      	movs	r3, #0
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f8 fb74 	bl	8000afc <__aeabi_dcmplt>
 8008414:	b148      	cbz	r0, 800842a <_dtoa_r+0x162>
 8008416:	4650      	mov	r0, sl
 8008418:	f7f8 f894 	bl	8000544 <__aeabi_i2d>
 800841c:	4632      	mov	r2, r6
 800841e:	463b      	mov	r3, r7
 8008420:	f7f8 fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 8008424:	b908      	cbnz	r0, 800842a <_dtoa_r+0x162>
 8008426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800842a:	f1ba 0f16 	cmp.w	sl, #22
 800842e:	d859      	bhi.n	80084e4 <_dtoa_r+0x21c>
 8008430:	4970      	ldr	r1, [pc, #448]	; (80085f4 <_dtoa_r+0x32c>)
 8008432:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800843a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800843e:	f7f8 fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 8008442:	2800      	cmp	r0, #0
 8008444:	d050      	beq.n	80084e8 <_dtoa_r+0x220>
 8008446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800844a:	2300      	movs	r3, #0
 800844c:	930f      	str	r3, [sp, #60]	; 0x3c
 800844e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008450:	1b5d      	subs	r5, r3, r5
 8008452:	f1b5 0801 	subs.w	r8, r5, #1
 8008456:	bf49      	itett	mi
 8008458:	f1c5 0301 	rsbmi	r3, r5, #1
 800845c:	2300      	movpl	r3, #0
 800845e:	9305      	strmi	r3, [sp, #20]
 8008460:	f04f 0800 	movmi.w	r8, #0
 8008464:	bf58      	it	pl
 8008466:	9305      	strpl	r3, [sp, #20]
 8008468:	f1ba 0f00 	cmp.w	sl, #0
 800846c:	db3e      	blt.n	80084ec <_dtoa_r+0x224>
 800846e:	2300      	movs	r3, #0
 8008470:	44d0      	add	r8, sl
 8008472:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	9b06      	ldr	r3, [sp, #24]
 800847a:	2b09      	cmp	r3, #9
 800847c:	f200 8090 	bhi.w	80085a0 <_dtoa_r+0x2d8>
 8008480:	2b05      	cmp	r3, #5
 8008482:	bfc4      	itt	gt
 8008484:	3b04      	subgt	r3, #4
 8008486:	9306      	strgt	r3, [sp, #24]
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	f1a3 0302 	sub.w	r3, r3, #2
 800848e:	bfcc      	ite	gt
 8008490:	2500      	movgt	r5, #0
 8008492:	2501      	movle	r5, #1
 8008494:	2b03      	cmp	r3, #3
 8008496:	f200 808f 	bhi.w	80085b8 <_dtoa_r+0x2f0>
 800849a:	e8df f003 	tbb	[pc, r3]
 800849e:	7f7d      	.short	0x7f7d
 80084a0:	7131      	.short	0x7131
 80084a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80084a6:	441d      	add	r5, r3
 80084a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80084ac:	2820      	cmp	r0, #32
 80084ae:	dd13      	ble.n	80084d8 <_dtoa_r+0x210>
 80084b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	fa08 f800 	lsl.w	r8, r8, r0
 80084ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80084be:	fa23 f000 	lsr.w	r0, r3, r0
 80084c2:	ea48 0000 	orr.w	r0, r8, r0
 80084c6:	f7f8 f82d 	bl	8000524 <__aeabi_ui2d>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4682      	mov	sl, r0
 80084ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80084d2:	3d01      	subs	r5, #1
 80084d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80084d6:	e772      	b.n	80083be <_dtoa_r+0xf6>
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	f1c0 0020 	rsb	r0, r0, #32
 80084de:	fa03 f000 	lsl.w	r0, r3, r0
 80084e2:	e7f0      	b.n	80084c6 <_dtoa_r+0x1fe>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7b1      	b.n	800844c <_dtoa_r+0x184>
 80084e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80084ea:	e7b0      	b.n	800844e <_dtoa_r+0x186>
 80084ec:	9b05      	ldr	r3, [sp, #20]
 80084ee:	eba3 030a 	sub.w	r3, r3, sl
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	f1ca 0300 	rsb	r3, sl, #0
 80084f8:	9307      	str	r3, [sp, #28]
 80084fa:	2300      	movs	r3, #0
 80084fc:	930e      	str	r3, [sp, #56]	; 0x38
 80084fe:	e7bb      	b.n	8008478 <_dtoa_r+0x1b0>
 8008500:	2301      	movs	r3, #1
 8008502:	930a      	str	r3, [sp, #40]	; 0x28
 8008504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd59      	ble.n	80085be <_dtoa_r+0x2f6>
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	4699      	mov	r9, r3
 800850e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008510:	2200      	movs	r2, #0
 8008512:	6072      	str	r2, [r6, #4]
 8008514:	2204      	movs	r2, #4
 8008516:	f102 0014 	add.w	r0, r2, #20
 800851a:	4298      	cmp	r0, r3
 800851c:	6871      	ldr	r1, [r6, #4]
 800851e:	d953      	bls.n	80085c8 <_dtoa_r+0x300>
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fcba 	bl	8008e9a <_Balloc>
 8008526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	f1b9 0f0e 	cmp.w	r9, #14
 800852e:	f8d3 b000 	ldr.w	fp, [r3]
 8008532:	f200 80e6 	bhi.w	8008702 <_dtoa_r+0x43a>
 8008536:	2d00      	cmp	r5, #0
 8008538:	f000 80e3 	beq.w	8008702 <_dtoa_r+0x43a>
 800853c:	ed9d 7b00 	vldr	d7, [sp]
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008548:	dd74      	ble.n	8008634 <_dtoa_r+0x36c>
 800854a:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <_dtoa_r+0x32c>)
 800854c:	f00a 030f 	and.w	r3, sl, #15
 8008550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008554:	ed93 7b00 	vldr	d7, [r3]
 8008558:	ea4f 162a 	mov.w	r6, sl, asr #4
 800855c:	06f0      	lsls	r0, r6, #27
 800855e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008562:	d565      	bpl.n	8008630 <_dtoa_r+0x368>
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <_dtoa_r+0x330>)
 8008566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800856a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800856e:	f7f8 f97d 	bl	800086c <__aeabi_ddiv>
 8008572:	e9cd 0100 	strd	r0, r1, [sp]
 8008576:	f006 060f 	and.w	r6, r6, #15
 800857a:	2503      	movs	r5, #3
 800857c:	4f1e      	ldr	r7, [pc, #120]	; (80085f8 <_dtoa_r+0x330>)
 800857e:	e04c      	b.n	800861a <_dtoa_r+0x352>
 8008580:	2301      	movs	r3, #1
 8008582:	930a      	str	r3, [sp, #40]	; 0x28
 8008584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008586:	4453      	add	r3, sl
 8008588:	f103 0901 	add.w	r9, r3, #1
 800858c:	9302      	str	r3, [sp, #8]
 800858e:	464b      	mov	r3, r9
 8008590:	2b01      	cmp	r3, #1
 8008592:	bfb8      	it	lt
 8008594:	2301      	movlt	r3, #1
 8008596:	e7ba      	b.n	800850e <_dtoa_r+0x246>
 8008598:	2300      	movs	r3, #0
 800859a:	e7b2      	b.n	8008502 <_dtoa_r+0x23a>
 800859c:	2300      	movs	r3, #0
 800859e:	e7f0      	b.n	8008582 <_dtoa_r+0x2ba>
 80085a0:	2501      	movs	r5, #1
 80085a2:	2300      	movs	r3, #0
 80085a4:	9306      	str	r3, [sp, #24]
 80085a6:	950a      	str	r5, [sp, #40]	; 0x28
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	9302      	str	r3, [sp, #8]
 80085ae:	4699      	mov	r9, r3
 80085b0:	2200      	movs	r2, #0
 80085b2:	2312      	movs	r3, #18
 80085b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80085b6:	e7aa      	b.n	800850e <_dtoa_r+0x246>
 80085b8:	2301      	movs	r3, #1
 80085ba:	930a      	str	r3, [sp, #40]	; 0x28
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x2e0>
 80085be:	2301      	movs	r3, #1
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	4699      	mov	r9, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	e7f5      	b.n	80085b4 <_dtoa_r+0x2ec>
 80085c8:	3101      	adds	r1, #1
 80085ca:	6071      	str	r1, [r6, #4]
 80085cc:	0052      	lsls	r2, r2, #1
 80085ce:	e7a2      	b.n	8008516 <_dtoa_r+0x24e>
 80085d0:	636f4361 	.word	0x636f4361
 80085d4:	3fd287a7 	.word	0x3fd287a7
 80085d8:	8b60c8b3 	.word	0x8b60c8b3
 80085dc:	3fc68a28 	.word	0x3fc68a28
 80085e0:	509f79fb 	.word	0x509f79fb
 80085e4:	3fd34413 	.word	0x3fd34413
 80085e8:	7ff00000 	.word	0x7ff00000
 80085ec:	08009af5 	.word	0x08009af5
 80085f0:	3ff80000 	.word	0x3ff80000
 80085f4:	08009b58 	.word	0x08009b58
 80085f8:	08009b30 	.word	0x08009b30
 80085fc:	08009b21 	.word	0x08009b21
 8008600:	07f1      	lsls	r1, r6, #31
 8008602:	d508      	bpl.n	8008616 <_dtoa_r+0x34e>
 8008604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860c:	f7f8 f804 	bl	8000618 <__aeabi_dmul>
 8008610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008614:	3501      	adds	r5, #1
 8008616:	1076      	asrs	r6, r6, #1
 8008618:	3708      	adds	r7, #8
 800861a:	2e00      	cmp	r6, #0
 800861c:	d1f0      	bne.n	8008600 <_dtoa_r+0x338>
 800861e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008626:	f7f8 f921 	bl	800086c <__aeabi_ddiv>
 800862a:	e9cd 0100 	strd	r0, r1, [sp]
 800862e:	e01a      	b.n	8008666 <_dtoa_r+0x39e>
 8008630:	2502      	movs	r5, #2
 8008632:	e7a3      	b.n	800857c <_dtoa_r+0x2b4>
 8008634:	f000 80a0 	beq.w	8008778 <_dtoa_r+0x4b0>
 8008638:	f1ca 0600 	rsb	r6, sl, #0
 800863c:	4b9f      	ldr	r3, [pc, #636]	; (80088bc <_dtoa_r+0x5f4>)
 800863e:	4fa0      	ldr	r7, [pc, #640]	; (80088c0 <_dtoa_r+0x5f8>)
 8008640:	f006 020f 	and.w	r2, r6, #15
 8008644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008650:	f7f7 ffe2 	bl	8000618 <__aeabi_dmul>
 8008654:	e9cd 0100 	strd	r0, r1, [sp]
 8008658:	1136      	asrs	r6, r6, #4
 800865a:	2300      	movs	r3, #0
 800865c:	2502      	movs	r5, #2
 800865e:	2e00      	cmp	r6, #0
 8008660:	d17f      	bne.n	8008762 <_dtoa_r+0x49a>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e1      	bne.n	800862a <_dtoa_r+0x362>
 8008666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8087 	beq.w	800877c <_dtoa_r+0x4b4>
 800866e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008672:	2200      	movs	r2, #0
 8008674:	4b93      	ldr	r3, [pc, #588]	; (80088c4 <_dtoa_r+0x5fc>)
 8008676:	4630      	mov	r0, r6
 8008678:	4639      	mov	r1, r7
 800867a:	f7f8 fa3f 	bl	8000afc <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	d07c      	beq.n	800877c <_dtoa_r+0x4b4>
 8008682:	f1b9 0f00 	cmp.w	r9, #0
 8008686:	d079      	beq.n	800877c <_dtoa_r+0x4b4>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dd35      	ble.n	80086fa <_dtoa_r+0x432>
 800868e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	4639      	mov	r1, r7
 8008696:	2200      	movs	r2, #0
 8008698:	4b8b      	ldr	r3, [pc, #556]	; (80088c8 <_dtoa_r+0x600>)
 800869a:	4630      	mov	r0, r6
 800869c:	f7f7 ffbc 	bl	8000618 <__aeabi_dmul>
 80086a0:	e9cd 0100 	strd	r0, r1, [sp]
 80086a4:	9f02      	ldr	r7, [sp, #8]
 80086a6:	3501      	adds	r5, #1
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7f7 ff4b 	bl	8000544 <__aeabi_i2d>
 80086ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b2:	f7f7 ffb1 	bl	8000618 <__aeabi_dmul>
 80086b6:	2200      	movs	r2, #0
 80086b8:	4b84      	ldr	r3, [pc, #528]	; (80088cc <_dtoa_r+0x604>)
 80086ba:	f7f7 fdf7 	bl	80002ac <__adddf3>
 80086be:	4605      	mov	r5, r0
 80086c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	d15d      	bne.n	8008784 <_dtoa_r+0x4bc>
 80086c8:	2200      	movs	r2, #0
 80086ca:	4b81      	ldr	r3, [pc, #516]	; (80088d0 <_dtoa_r+0x608>)
 80086cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086d0:	f7f7 fdea 	bl	80002a8 <__aeabi_dsub>
 80086d4:	462a      	mov	r2, r5
 80086d6:	4633      	mov	r3, r6
 80086d8:	e9cd 0100 	strd	r0, r1, [sp]
 80086dc:	f7f8 fa2c 	bl	8000b38 <__aeabi_dcmpgt>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	f040 8288 	bne.w	8008bf6 <_dtoa_r+0x92e>
 80086e6:	462a      	mov	r2, r5
 80086e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80086ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086f0:	f7f8 fa04 	bl	8000afc <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f040 827c 	bne.w	8008bf2 <_dtoa_r+0x92a>
 80086fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008704:	2b00      	cmp	r3, #0
 8008706:	f2c0 8150 	blt.w	80089aa <_dtoa_r+0x6e2>
 800870a:	f1ba 0f0e 	cmp.w	sl, #14
 800870e:	f300 814c 	bgt.w	80089aa <_dtoa_r+0x6e2>
 8008712:	4b6a      	ldr	r3, [pc, #424]	; (80088bc <_dtoa_r+0x5f4>)
 8008714:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008718:	ed93 7b00 	vldr	d7, [r3]
 800871c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871e:	2b00      	cmp	r3, #0
 8008720:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008724:	f280 80d8 	bge.w	80088d8 <_dtoa_r+0x610>
 8008728:	f1b9 0f00 	cmp.w	r9, #0
 800872c:	f300 80d4 	bgt.w	80088d8 <_dtoa_r+0x610>
 8008730:	f040 825e 	bne.w	8008bf0 <_dtoa_r+0x928>
 8008734:	2200      	movs	r2, #0
 8008736:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <_dtoa_r+0x608>)
 8008738:	ec51 0b17 	vmov	r0, r1, d7
 800873c:	f7f7 ff6c 	bl	8000618 <__aeabi_dmul>
 8008740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008744:	f7f8 f9ee 	bl	8000b24 <__aeabi_dcmpge>
 8008748:	464f      	mov	r7, r9
 800874a:	464e      	mov	r6, r9
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 8234 	bne.w	8008bba <_dtoa_r+0x8f2>
 8008752:	2331      	movs	r3, #49	; 0x31
 8008754:	f10b 0501 	add.w	r5, fp, #1
 8008758:	f88b 3000 	strb.w	r3, [fp]
 800875c:	f10a 0a01 	add.w	sl, sl, #1
 8008760:	e22f      	b.n	8008bc2 <_dtoa_r+0x8fa>
 8008762:	07f2      	lsls	r2, r6, #31
 8008764:	d505      	bpl.n	8008772 <_dtoa_r+0x4aa>
 8008766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876a:	f7f7 ff55 	bl	8000618 <__aeabi_dmul>
 800876e:	3501      	adds	r5, #1
 8008770:	2301      	movs	r3, #1
 8008772:	1076      	asrs	r6, r6, #1
 8008774:	3708      	adds	r7, #8
 8008776:	e772      	b.n	800865e <_dtoa_r+0x396>
 8008778:	2502      	movs	r5, #2
 800877a:	e774      	b.n	8008666 <_dtoa_r+0x39e>
 800877c:	f8cd a020 	str.w	sl, [sp, #32]
 8008780:	464f      	mov	r7, r9
 8008782:	e791      	b.n	80086a8 <_dtoa_r+0x3e0>
 8008784:	4b4d      	ldr	r3, [pc, #308]	; (80088bc <_dtoa_r+0x5f4>)
 8008786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800878a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800878e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d047      	beq.n	8008824 <_dtoa_r+0x55c>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	2000      	movs	r0, #0
 800879a:	494e      	ldr	r1, [pc, #312]	; (80088d4 <_dtoa_r+0x60c>)
 800879c:	f7f8 f866 	bl	800086c <__aeabi_ddiv>
 80087a0:	462a      	mov	r2, r5
 80087a2:	4633      	mov	r3, r6
 80087a4:	f7f7 fd80 	bl	80002a8 <__aeabi_dsub>
 80087a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087ac:	465d      	mov	r5, fp
 80087ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b2:	f7f8 f9e1 	bl	8000b78 <__aeabi_d2iz>
 80087b6:	4606      	mov	r6, r0
 80087b8:	f7f7 fec4 	bl	8000544 <__aeabi_i2d>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087c4:	f7f7 fd70 	bl	80002a8 <__aeabi_dsub>
 80087c8:	3630      	adds	r6, #48	; 0x30
 80087ca:	f805 6b01 	strb.w	r6, [r5], #1
 80087ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087d2:	e9cd 0100 	strd	r0, r1, [sp]
 80087d6:	f7f8 f991 	bl	8000afc <__aeabi_dcmplt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d163      	bne.n	80088a6 <_dtoa_r+0x5de>
 80087de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e2:	2000      	movs	r0, #0
 80087e4:	4937      	ldr	r1, [pc, #220]	; (80088c4 <_dtoa_r+0x5fc>)
 80087e6:	f7f7 fd5f 	bl	80002a8 <__aeabi_dsub>
 80087ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087ee:	f7f8 f985 	bl	8000afc <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f040 80b7 	bne.w	8008966 <_dtoa_r+0x69e>
 80087f8:	eba5 030b 	sub.w	r3, r5, fp
 80087fc:	429f      	cmp	r7, r3
 80087fe:	f77f af7c 	ble.w	80086fa <_dtoa_r+0x432>
 8008802:	2200      	movs	r2, #0
 8008804:	4b30      	ldr	r3, [pc, #192]	; (80088c8 <_dtoa_r+0x600>)
 8008806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800880a:	f7f7 ff05 	bl	8000618 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008814:	4b2c      	ldr	r3, [pc, #176]	; (80088c8 <_dtoa_r+0x600>)
 8008816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800881a:	f7f7 fefd 	bl	8000618 <__aeabi_dmul>
 800881e:	e9cd 0100 	strd	r0, r1, [sp]
 8008822:	e7c4      	b.n	80087ae <_dtoa_r+0x4e6>
 8008824:	462a      	mov	r2, r5
 8008826:	4633      	mov	r3, r6
 8008828:	f7f7 fef6 	bl	8000618 <__aeabi_dmul>
 800882c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008830:	eb0b 0507 	add.w	r5, fp, r7
 8008834:	465e      	mov	r6, fp
 8008836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800883a:	f7f8 f99d 	bl	8000b78 <__aeabi_d2iz>
 800883e:	4607      	mov	r7, r0
 8008840:	f7f7 fe80 	bl	8000544 <__aeabi_i2d>
 8008844:	3730      	adds	r7, #48	; 0x30
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884e:	f7f7 fd2b 	bl	80002a8 <__aeabi_dsub>
 8008852:	f806 7b01 	strb.w	r7, [r6], #1
 8008856:	42ae      	cmp	r6, r5
 8008858:	e9cd 0100 	strd	r0, r1, [sp]
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	d126      	bne.n	80088b0 <_dtoa_r+0x5e8>
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <_dtoa_r+0x60c>)
 8008864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008868:	f7f7 fd20 	bl	80002ac <__adddf3>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008874:	f7f8 f960 	bl	8000b38 <__aeabi_dcmpgt>
 8008878:	2800      	cmp	r0, #0
 800887a:	d174      	bne.n	8008966 <_dtoa_r+0x69e>
 800887c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008880:	2000      	movs	r0, #0
 8008882:	4914      	ldr	r1, [pc, #80]	; (80088d4 <_dtoa_r+0x60c>)
 8008884:	f7f7 fd10 	bl	80002a8 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008890:	f7f8 f934 	bl	8000afc <__aeabi_dcmplt>
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f af30 	beq.w	80086fa <_dtoa_r+0x432>
 800889a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800889e:	2b30      	cmp	r3, #48	; 0x30
 80088a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80088a4:	d002      	beq.n	80088ac <_dtoa_r+0x5e4>
 80088a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088aa:	e04a      	b.n	8008942 <_dtoa_r+0x67a>
 80088ac:	4615      	mov	r5, r2
 80088ae:	e7f4      	b.n	800889a <_dtoa_r+0x5d2>
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <_dtoa_r+0x600>)
 80088b2:	f7f7 feb1 	bl	8000618 <__aeabi_dmul>
 80088b6:	e9cd 0100 	strd	r0, r1, [sp]
 80088ba:	e7bc      	b.n	8008836 <_dtoa_r+0x56e>
 80088bc:	08009b58 	.word	0x08009b58
 80088c0:	08009b30 	.word	0x08009b30
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	40240000 	.word	0x40240000
 80088cc:	401c0000 	.word	0x401c0000
 80088d0:	40140000 	.word	0x40140000
 80088d4:	3fe00000 	.word	0x3fe00000
 80088d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088dc:	465d      	mov	r5, fp
 80088de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f7 ffc1 	bl	800086c <__aeabi_ddiv>
 80088ea:	f7f8 f945 	bl	8000b78 <__aeabi_d2iz>
 80088ee:	4680      	mov	r8, r0
 80088f0:	f7f7 fe28 	bl	8000544 <__aeabi_i2d>
 80088f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088f8:	f7f7 fe8e 	bl	8000618 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4630      	mov	r0, r6
 8008902:	4639      	mov	r1, r7
 8008904:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008908:	f7f7 fcce 	bl	80002a8 <__aeabi_dsub>
 800890c:	f805 6b01 	strb.w	r6, [r5], #1
 8008910:	eba5 060b 	sub.w	r6, r5, fp
 8008914:	45b1      	cmp	r9, r6
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	d139      	bne.n	8008990 <_dtoa_r+0x6c8>
 800891c:	f7f7 fcc6 	bl	80002ac <__adddf3>
 8008920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008924:	4606      	mov	r6, r0
 8008926:	460f      	mov	r7, r1
 8008928:	f7f8 f906 	bl	8000b38 <__aeabi_dcmpgt>
 800892c:	b9c8      	cbnz	r0, 8008962 <_dtoa_r+0x69a>
 800892e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008932:	4630      	mov	r0, r6
 8008934:	4639      	mov	r1, r7
 8008936:	f7f8 f8d7 	bl	8000ae8 <__aeabi_dcmpeq>
 800893a:	b110      	cbz	r0, 8008942 <_dtoa_r+0x67a>
 800893c:	f018 0f01 	tst.w	r8, #1
 8008940:	d10f      	bne.n	8008962 <_dtoa_r+0x69a>
 8008942:	9904      	ldr	r1, [sp, #16]
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fadc 	bl	8008f02 <_Bfree>
 800894a:	2300      	movs	r3, #0
 800894c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800894e:	702b      	strb	r3, [r5, #0]
 8008950:	f10a 0301 	add.w	r3, sl, #1
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8241 	beq.w	8008de0 <_dtoa_r+0xb18>
 800895e:	601d      	str	r5, [r3, #0]
 8008960:	e23e      	b.n	8008de0 <_dtoa_r+0xb18>
 8008962:	f8cd a020 	str.w	sl, [sp, #32]
 8008966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800896a:	2a39      	cmp	r2, #57	; 0x39
 800896c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008970:	d108      	bne.n	8008984 <_dtoa_r+0x6bc>
 8008972:	459b      	cmp	fp, r3
 8008974:	d10a      	bne.n	800898c <_dtoa_r+0x6c4>
 8008976:	9b08      	ldr	r3, [sp, #32]
 8008978:	3301      	adds	r3, #1
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	2330      	movs	r3, #48	; 0x30
 800897e:	f88b 3000 	strb.w	r3, [fp]
 8008982:	465b      	mov	r3, fp
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	3201      	adds	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	e78c      	b.n	80088a6 <_dtoa_r+0x5de>
 800898c:	461d      	mov	r5, r3
 800898e:	e7ea      	b.n	8008966 <_dtoa_r+0x69e>
 8008990:	2200      	movs	r2, #0
 8008992:	4b9b      	ldr	r3, [pc, #620]	; (8008c00 <_dtoa_r+0x938>)
 8008994:	f7f7 fe40 	bl	8000618 <__aeabi_dmul>
 8008998:	2200      	movs	r2, #0
 800899a:	2300      	movs	r3, #0
 800899c:	4606      	mov	r6, r0
 800899e:	460f      	mov	r7, r1
 80089a0:	f7f8 f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d09a      	beq.n	80088de <_dtoa_r+0x616>
 80089a8:	e7cb      	b.n	8008942 <_dtoa_r+0x67a>
 80089aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	f000 808b 	beq.w	8008ac8 <_dtoa_r+0x800>
 80089b2:	9a06      	ldr	r2, [sp, #24]
 80089b4:	2a01      	cmp	r2, #1
 80089b6:	dc6e      	bgt.n	8008a96 <_dtoa_r+0x7ce>
 80089b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d067      	beq.n	8008a8e <_dtoa_r+0x7c6>
 80089be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089c2:	9f07      	ldr	r7, [sp, #28]
 80089c4:	9d05      	ldr	r5, [sp, #20]
 80089c6:	9a05      	ldr	r2, [sp, #20]
 80089c8:	2101      	movs	r1, #1
 80089ca:	441a      	add	r2, r3
 80089cc:	4620      	mov	r0, r4
 80089ce:	9205      	str	r2, [sp, #20]
 80089d0:	4498      	add	r8, r3
 80089d2:	f000 fb36 	bl	8009042 <__i2b>
 80089d6:	4606      	mov	r6, r0
 80089d8:	2d00      	cmp	r5, #0
 80089da:	dd0c      	ble.n	80089f6 <_dtoa_r+0x72e>
 80089dc:	f1b8 0f00 	cmp.w	r8, #0
 80089e0:	dd09      	ble.n	80089f6 <_dtoa_r+0x72e>
 80089e2:	4545      	cmp	r5, r8
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	462b      	mov	r3, r5
 80089e8:	bfa8      	it	ge
 80089ea:	4643      	movge	r3, r8
 80089ec:	1ad2      	subs	r2, r2, r3
 80089ee:	9205      	str	r2, [sp, #20]
 80089f0:	1aed      	subs	r5, r5, r3
 80089f2:	eba8 0803 	sub.w	r8, r8, r3
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	b1eb      	cbz	r3, 8008a36 <_dtoa_r+0x76e>
 80089fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d067      	beq.n	8008ad0 <_dtoa_r+0x808>
 8008a00:	b18f      	cbz	r7, 8008a26 <_dtoa_r+0x75e>
 8008a02:	4631      	mov	r1, r6
 8008a04:	463a      	mov	r2, r7
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 fbba 	bl	8009180 <__pow5mult>
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4606      	mov	r6, r0
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fb1e 	bl	8009054 <__multiply>
 8008a18:	9904      	ldr	r1, [sp, #16]
 8008a1a:	9008      	str	r0, [sp, #32]
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fa70 	bl	8008f02 <_Bfree>
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	1bda      	subs	r2, r3, r7
 8008a2a:	d004      	beq.n	8008a36 <_dtoa_r+0x76e>
 8008a2c:	9904      	ldr	r1, [sp, #16]
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fba6 	bl	8009180 <__pow5mult>
 8008a34:	9004      	str	r0, [sp, #16]
 8008a36:	2101      	movs	r1, #1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fb02 	bl	8009042 <__i2b>
 8008a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a40:	4607      	mov	r7, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 81d0 	beq.w	8008de8 <_dtoa_r+0xb20>
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fb97 	bl	8009180 <__pow5mult>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	4607      	mov	r7, r0
 8008a58:	dc40      	bgt.n	8008adc <_dtoa_r+0x814>
 8008a5a:	9b00      	ldr	r3, [sp, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d139      	bne.n	8008ad4 <_dtoa_r+0x80c>
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d136      	bne.n	8008ad8 <_dtoa_r+0x810>
 8008a6a:	9b01      	ldr	r3, [sp, #4]
 8008a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a70:	0d1b      	lsrs	r3, r3, #20
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	b12b      	cbz	r3, 8008a82 <_dtoa_r+0x7ba>
 8008a76:	9b05      	ldr	r3, [sp, #20]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	f108 0801 	add.w	r8, r8, #1
 8008a80:	2301      	movs	r3, #1
 8008a82:	9307      	str	r3, [sp, #28]
 8008a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d12a      	bne.n	8008ae0 <_dtoa_r+0x818>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e030      	b.n	8008af0 <_dtoa_r+0x828>
 8008a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a94:	e795      	b.n	80089c2 <_dtoa_r+0x6fa>
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	f109 37ff 	add.w	r7, r9, #4294967295
 8008a9c:	42bb      	cmp	r3, r7
 8008a9e:	bfbf      	itttt	lt
 8008aa0:	9b07      	ldrlt	r3, [sp, #28]
 8008aa2:	9707      	strlt	r7, [sp, #28]
 8008aa4:	1afa      	sublt	r2, r7, r3
 8008aa6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008aa8:	bfbb      	ittet	lt
 8008aaa:	189b      	addlt	r3, r3, r2
 8008aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008aae:	1bdf      	subge	r7, r3, r7
 8008ab0:	2700      	movlt	r7, #0
 8008ab2:	f1b9 0f00 	cmp.w	r9, #0
 8008ab6:	bfb5      	itete	lt
 8008ab8:	9b05      	ldrlt	r3, [sp, #20]
 8008aba:	9d05      	ldrge	r5, [sp, #20]
 8008abc:	eba3 0509 	sublt.w	r5, r3, r9
 8008ac0:	464b      	movge	r3, r9
 8008ac2:	bfb8      	it	lt
 8008ac4:	2300      	movlt	r3, #0
 8008ac6:	e77e      	b.n	80089c6 <_dtoa_r+0x6fe>
 8008ac8:	9f07      	ldr	r7, [sp, #28]
 8008aca:	9d05      	ldr	r5, [sp, #20]
 8008acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ace:	e783      	b.n	80089d8 <_dtoa_r+0x710>
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	e7ab      	b.n	8008a2c <_dtoa_r+0x764>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e7d4      	b.n	8008a82 <_dtoa_r+0x7ba>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	e7d2      	b.n	8008a82 <_dtoa_r+0x7ba>
 8008adc:	2300      	movs	r3, #0
 8008ade:	9307      	str	r3, [sp, #28]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008ae6:	6918      	ldr	r0, [r3, #16]
 8008ae8:	f000 fa5d 	bl	8008fa6 <__hi0bits>
 8008aec:	f1c0 0020 	rsb	r0, r0, #32
 8008af0:	4440      	add	r0, r8
 8008af2:	f010 001f 	ands.w	r0, r0, #31
 8008af6:	d047      	beq.n	8008b88 <_dtoa_r+0x8c0>
 8008af8:	f1c0 0320 	rsb	r3, r0, #32
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	dd3b      	ble.n	8008b78 <_dtoa_r+0x8b0>
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	f1c0 001c 	rsb	r0, r0, #28
 8008b06:	4403      	add	r3, r0
 8008b08:	9305      	str	r3, [sp, #20]
 8008b0a:	4405      	add	r5, r0
 8008b0c:	4480      	add	r8, r0
 8008b0e:	9b05      	ldr	r3, [sp, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd05      	ble.n	8008b20 <_dtoa_r+0x858>
 8008b14:	461a      	mov	r2, r3
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fb7f 	bl	800921c <__lshift>
 8008b1e:	9004      	str	r0, [sp, #16]
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	dd05      	ble.n	8008b32 <_dtoa_r+0x86a>
 8008b26:	4639      	mov	r1, r7
 8008b28:	4642      	mov	r2, r8
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fb76 	bl	800921c <__lshift>
 8008b30:	4607      	mov	r7, r0
 8008b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b34:	b353      	cbz	r3, 8008b8c <_dtoa_r+0x8c4>
 8008b36:	4639      	mov	r1, r7
 8008b38:	9804      	ldr	r0, [sp, #16]
 8008b3a:	f000 fbc3 	bl	80092c4 <__mcmp>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	da24      	bge.n	8008b8c <_dtoa_r+0x8c4>
 8008b42:	2300      	movs	r3, #0
 8008b44:	220a      	movs	r2, #10
 8008b46:	9904      	ldr	r1, [sp, #16]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f9f1 	bl	8008f30 <__multadd>
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	9004      	str	r0, [sp, #16]
 8008b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 814d 	beq.w	8008df6 <_dtoa_r+0xb2e>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4631      	mov	r1, r6
 8008b60:	220a      	movs	r2, #10
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f9e4 	bl	8008f30 <__multadd>
 8008b68:	9b02      	ldr	r3, [sp, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	dc4f      	bgt.n	8008c10 <_dtoa_r+0x948>
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	dd4c      	ble.n	8008c10 <_dtoa_r+0x948>
 8008b76:	e011      	b.n	8008b9c <_dtoa_r+0x8d4>
 8008b78:	d0c9      	beq.n	8008b0e <_dtoa_r+0x846>
 8008b7a:	9a05      	ldr	r2, [sp, #20]
 8008b7c:	331c      	adds	r3, #28
 8008b7e:	441a      	add	r2, r3
 8008b80:	9205      	str	r2, [sp, #20]
 8008b82:	441d      	add	r5, r3
 8008b84:	4498      	add	r8, r3
 8008b86:	e7c2      	b.n	8008b0e <_dtoa_r+0x846>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	e7f6      	b.n	8008b7a <_dtoa_r+0x8b2>
 8008b8c:	f1b9 0f00 	cmp.w	r9, #0
 8008b90:	dc38      	bgt.n	8008c04 <_dtoa_r+0x93c>
 8008b92:	9b06      	ldr	r3, [sp, #24]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	dd35      	ble.n	8008c04 <_dtoa_r+0x93c>
 8008b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b9c:	9b02      	ldr	r3, [sp, #8]
 8008b9e:	b963      	cbnz	r3, 8008bba <_dtoa_r+0x8f2>
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 f9c3 	bl	8008f30 <__multadd>
 8008baa:	4601      	mov	r1, r0
 8008bac:	4607      	mov	r7, r0
 8008bae:	9804      	ldr	r0, [sp, #16]
 8008bb0:	f000 fb88 	bl	80092c4 <__mcmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f73f adcc 	bgt.w	8008752 <_dtoa_r+0x48a>
 8008bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbc:	465d      	mov	r5, fp
 8008bbe:	ea6f 0a03 	mvn.w	sl, r3
 8008bc2:	f04f 0900 	mov.w	r9, #0
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 f99a 	bl	8008f02 <_Bfree>
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	f43f aeb7 	beq.w	8008942 <_dtoa_r+0x67a>
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	d005      	beq.n	8008be6 <_dtoa_r+0x91e>
 8008bda:	45b1      	cmp	r9, r6
 8008bdc:	d003      	beq.n	8008be6 <_dtoa_r+0x91e>
 8008bde:	4649      	mov	r1, r9
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 f98e 	bl	8008f02 <_Bfree>
 8008be6:	4631      	mov	r1, r6
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f98a 	bl	8008f02 <_Bfree>
 8008bee:	e6a8      	b.n	8008942 <_dtoa_r+0x67a>
 8008bf0:	2700      	movs	r7, #0
 8008bf2:	463e      	mov	r6, r7
 8008bf4:	e7e1      	b.n	8008bba <_dtoa_r+0x8f2>
 8008bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bfa:	463e      	mov	r6, r7
 8008bfc:	e5a9      	b.n	8008752 <_dtoa_r+0x48a>
 8008bfe:	bf00      	nop
 8008c00:	40240000 	.word	0x40240000
 8008c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 80fa 	beq.w	8008e04 <_dtoa_r+0xb3c>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	dd05      	ble.n	8008c20 <_dtoa_r+0x958>
 8008c14:	4631      	mov	r1, r6
 8008c16:	462a      	mov	r2, r5
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 faff 	bl	800921c <__lshift>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	9b07      	ldr	r3, [sp, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d04c      	beq.n	8008cc0 <_dtoa_r+0x9f8>
 8008c26:	6871      	ldr	r1, [r6, #4]
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 f936 	bl	8008e9a <_Balloc>
 8008c2e:	6932      	ldr	r2, [r6, #16]
 8008c30:	3202      	adds	r2, #2
 8008c32:	4605      	mov	r5, r0
 8008c34:	0092      	lsls	r2, r2, #2
 8008c36:	f106 010c 	add.w	r1, r6, #12
 8008c3a:	300c      	adds	r0, #12
 8008c3c:	f000 f920 	bl	8008e80 <memcpy>
 8008c40:	2201      	movs	r2, #1
 8008c42:	4629      	mov	r1, r5
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fae9 	bl	800921c <__lshift>
 8008c4a:	9b00      	ldr	r3, [sp, #0]
 8008c4c:	f8cd b014 	str.w	fp, [sp, #20]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	46b1      	mov	r9, r6
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	4606      	mov	r6, r0
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	9804      	ldr	r0, [sp, #16]
 8008c5e:	f7ff faa7 	bl	80081b0 <quorem>
 8008c62:	4649      	mov	r1, r9
 8008c64:	4605      	mov	r5, r0
 8008c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c6a:	9804      	ldr	r0, [sp, #16]
 8008c6c:	f000 fb2a 	bl	80092c4 <__mcmp>
 8008c70:	4632      	mov	r2, r6
 8008c72:	9000      	str	r0, [sp, #0]
 8008c74:	4639      	mov	r1, r7
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fb3e 	bl	80092f8 <__mdiff>
 8008c7c:	68c3      	ldr	r3, [r0, #12]
 8008c7e:	4602      	mov	r2, r0
 8008c80:	bb03      	cbnz	r3, 8008cc4 <_dtoa_r+0x9fc>
 8008c82:	4601      	mov	r1, r0
 8008c84:	9008      	str	r0, [sp, #32]
 8008c86:	9804      	ldr	r0, [sp, #16]
 8008c88:	f000 fb1c 	bl	80092c4 <__mcmp>
 8008c8c:	9a08      	ldr	r2, [sp, #32]
 8008c8e:	4603      	mov	r3, r0
 8008c90:	4611      	mov	r1, r2
 8008c92:	4620      	mov	r0, r4
 8008c94:	9308      	str	r3, [sp, #32]
 8008c96:	f000 f934 	bl	8008f02 <_Bfree>
 8008c9a:	9b08      	ldr	r3, [sp, #32]
 8008c9c:	b9a3      	cbnz	r3, 8008cc8 <_dtoa_r+0xa00>
 8008c9e:	9a06      	ldr	r2, [sp, #24]
 8008ca0:	b992      	cbnz	r2, 8008cc8 <_dtoa_r+0xa00>
 8008ca2:	9a07      	ldr	r2, [sp, #28]
 8008ca4:	b982      	cbnz	r2, 8008cc8 <_dtoa_r+0xa00>
 8008ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008caa:	d029      	beq.n	8008d00 <_dtoa_r+0xa38>
 8008cac:	9b00      	ldr	r3, [sp, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd01      	ble.n	8008cb6 <_dtoa_r+0x9ee>
 8008cb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008cb6:	9b05      	ldr	r3, [sp, #20]
 8008cb8:	1c5d      	adds	r5, r3, #1
 8008cba:	f883 8000 	strb.w	r8, [r3]
 8008cbe:	e782      	b.n	8008bc6 <_dtoa_r+0x8fe>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	e7c2      	b.n	8008c4a <_dtoa_r+0x982>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e7e3      	b.n	8008c90 <_dtoa_r+0x9c8>
 8008cc8:	9a00      	ldr	r2, [sp, #0]
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	db04      	blt.n	8008cd8 <_dtoa_r+0xa10>
 8008cce:	d125      	bne.n	8008d1c <_dtoa_r+0xa54>
 8008cd0:	9a06      	ldr	r2, [sp, #24]
 8008cd2:	bb1a      	cbnz	r2, 8008d1c <_dtoa_r+0xa54>
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	bb0a      	cbnz	r2, 8008d1c <_dtoa_r+0xa54>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	ddec      	ble.n	8008cb6 <_dtoa_r+0x9ee>
 8008cdc:	2201      	movs	r2, #1
 8008cde:	9904      	ldr	r1, [sp, #16]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fa9b 	bl	800921c <__lshift>
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	f000 faeb 	bl	80092c4 <__mcmp>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	dc03      	bgt.n	8008cfa <_dtoa_r+0xa32>
 8008cf2:	d1e0      	bne.n	8008cb6 <_dtoa_r+0x9ee>
 8008cf4:	f018 0f01 	tst.w	r8, #1
 8008cf8:	d0dd      	beq.n	8008cb6 <_dtoa_r+0x9ee>
 8008cfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cfe:	d1d8      	bne.n	8008cb2 <_dtoa_r+0x9ea>
 8008d00:	9b05      	ldr	r3, [sp, #20]
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	1c5d      	adds	r5, r3, #1
 8008d06:	2339      	movs	r3, #57	; 0x39
 8008d08:	7013      	strb	r3, [r2, #0]
 8008d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d0e:	2b39      	cmp	r3, #57	; 0x39
 8008d10:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d14:	d04f      	beq.n	8008db6 <_dtoa_r+0xaee>
 8008d16:	3301      	adds	r3, #1
 8008d18:	7013      	strb	r3, [r2, #0]
 8008d1a:	e754      	b.n	8008bc6 <_dtoa_r+0x8fe>
 8008d1c:	9a05      	ldr	r2, [sp, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f102 0501 	add.w	r5, r2, #1
 8008d24:	dd06      	ble.n	8008d34 <_dtoa_r+0xa6c>
 8008d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d2a:	d0e9      	beq.n	8008d00 <_dtoa_r+0xa38>
 8008d2c:	f108 0801 	add.w	r8, r8, #1
 8008d30:	9b05      	ldr	r3, [sp, #20]
 8008d32:	e7c2      	b.n	8008cba <_dtoa_r+0x9f2>
 8008d34:	9a02      	ldr	r2, [sp, #8]
 8008d36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008d3a:	eba5 030b 	sub.w	r3, r5, fp
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d021      	beq.n	8008d86 <_dtoa_r+0xabe>
 8008d42:	2300      	movs	r3, #0
 8008d44:	220a      	movs	r2, #10
 8008d46:	9904      	ldr	r1, [sp, #16]
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 f8f1 	bl	8008f30 <__multadd>
 8008d4e:	45b1      	cmp	r9, r6
 8008d50:	9004      	str	r0, [sp, #16]
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	f04f 020a 	mov.w	r2, #10
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	d105      	bne.n	8008d6c <_dtoa_r+0xaa4>
 8008d60:	f000 f8e6 	bl	8008f30 <__multadd>
 8008d64:	4681      	mov	r9, r0
 8008d66:	4606      	mov	r6, r0
 8008d68:	9505      	str	r5, [sp, #20]
 8008d6a:	e776      	b.n	8008c5a <_dtoa_r+0x992>
 8008d6c:	f000 f8e0 	bl	8008f30 <__multadd>
 8008d70:	4631      	mov	r1, r6
 8008d72:	4681      	mov	r9, r0
 8008d74:	2300      	movs	r3, #0
 8008d76:	220a      	movs	r2, #10
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 f8d9 	bl	8008f30 <__multadd>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	e7f2      	b.n	8008d68 <_dtoa_r+0xaa0>
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	2201      	movs	r2, #1
 8008d88:	9904      	ldr	r1, [sp, #16]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 fa46 	bl	800921c <__lshift>
 8008d90:	4639      	mov	r1, r7
 8008d92:	9004      	str	r0, [sp, #16]
 8008d94:	f000 fa96 	bl	80092c4 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dcb6      	bgt.n	8008d0a <_dtoa_r+0xa42>
 8008d9c:	d102      	bne.n	8008da4 <_dtoa_r+0xadc>
 8008d9e:	f018 0f01 	tst.w	r8, #1
 8008da2:	d1b2      	bne.n	8008d0a <_dtoa_r+0xa42>
 8008da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008da8:	2b30      	cmp	r3, #48	; 0x30
 8008daa:	f105 32ff 	add.w	r2, r5, #4294967295
 8008dae:	f47f af0a 	bne.w	8008bc6 <_dtoa_r+0x8fe>
 8008db2:	4615      	mov	r5, r2
 8008db4:	e7f6      	b.n	8008da4 <_dtoa_r+0xadc>
 8008db6:	4593      	cmp	fp, r2
 8008db8:	d105      	bne.n	8008dc6 <_dtoa_r+0xafe>
 8008dba:	2331      	movs	r3, #49	; 0x31
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	f88b 3000 	strb.w	r3, [fp]
 8008dc4:	e6ff      	b.n	8008bc6 <_dtoa_r+0x8fe>
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e79f      	b.n	8008d0a <_dtoa_r+0xa42>
 8008dca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008e30 <_dtoa_r+0xb68>
 8008dce:	e007      	b.n	8008de0 <_dtoa_r+0xb18>
 8008dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008e34 <_dtoa_r+0xb6c>
 8008dd6:	b11b      	cbz	r3, 8008de0 <_dtoa_r+0xb18>
 8008dd8:	f10b 0308 	add.w	r3, fp, #8
 8008ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	4658      	mov	r0, fp
 8008de2:	b017      	add	sp, #92	; 0x5c
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	f77f ae35 	ble.w	8008a5a <_dtoa_r+0x792>
 8008df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df2:	9307      	str	r3, [sp, #28]
 8008df4:	e649      	b.n	8008a8a <_dtoa_r+0x7c2>
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dc03      	bgt.n	8008e04 <_dtoa_r+0xb3c>
 8008dfc:	9b06      	ldr	r3, [sp, #24]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	f73f aecc 	bgt.w	8008b9c <_dtoa_r+0x8d4>
 8008e04:	465d      	mov	r5, fp
 8008e06:	4639      	mov	r1, r7
 8008e08:	9804      	ldr	r0, [sp, #16]
 8008e0a:	f7ff f9d1 	bl	80081b0 <quorem>
 8008e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e12:	f805 8b01 	strb.w	r8, [r5], #1
 8008e16:	9a02      	ldr	r2, [sp, #8]
 8008e18:	eba5 030b 	sub.w	r3, r5, fp
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	ddb0      	ble.n	8008d82 <_dtoa_r+0xaba>
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	9904      	ldr	r1, [sp, #16]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f882 	bl	8008f30 <__multadd>
 8008e2c:	9004      	str	r0, [sp, #16]
 8008e2e:	e7ea      	b.n	8008e06 <_dtoa_r+0xb3e>
 8008e30:	08009af4 	.word	0x08009af4
 8008e34:	08009b18 	.word	0x08009b18

08008e38 <__locale_ctype_ptr_l>:
 8008e38:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008e3c:	4770      	bx	lr
	...

08008e40 <_localeconv_r>:
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <_localeconv_r+0x14>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6a18      	ldr	r0, [r3, #32]
 8008e46:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <_localeconv_r+0x18>)
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	bf08      	it	eq
 8008e4c:	4618      	moveq	r0, r3
 8008e4e:	30f0      	adds	r0, #240	; 0xf0
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2000000c 	.word	0x2000000c
 8008e58:	20000070 	.word	0x20000070

08008e5c <__ascii_mbtowc>:
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	b901      	cbnz	r1, 8008e62 <__ascii_mbtowc+0x6>
 8008e60:	a901      	add	r1, sp, #4
 8008e62:	b142      	cbz	r2, 8008e76 <__ascii_mbtowc+0x1a>
 8008e64:	b14b      	cbz	r3, 8008e7a <__ascii_mbtowc+0x1e>
 8008e66:	7813      	ldrb	r3, [r2, #0]
 8008e68:	600b      	str	r3, [r1, #0]
 8008e6a:	7812      	ldrb	r2, [r2, #0]
 8008e6c:	1c10      	adds	r0, r2, #0
 8008e6e:	bf18      	it	ne
 8008e70:	2001      	movne	r0, #1
 8008e72:	b002      	add	sp, #8
 8008e74:	4770      	bx	lr
 8008e76:	4610      	mov	r0, r2
 8008e78:	e7fb      	b.n	8008e72 <__ascii_mbtowc+0x16>
 8008e7a:	f06f 0001 	mvn.w	r0, #1
 8008e7e:	e7f8      	b.n	8008e72 <__ascii_mbtowc+0x16>

08008e80 <memcpy>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	1e43      	subs	r3, r0, #1
 8008e84:	440a      	add	r2, r1
 8008e86:	4291      	cmp	r1, r2
 8008e88:	d100      	bne.n	8008e8c <memcpy+0xc>
 8008e8a:	bd10      	pop	{r4, pc}
 8008e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e94:	e7f7      	b.n	8008e86 <memcpy+0x6>

08008e96 <__malloc_lock>:
 8008e96:	4770      	bx	lr

08008e98 <__malloc_unlock>:
 8008e98:	4770      	bx	lr

08008e9a <_Balloc>:
 8008e9a:	b570      	push	{r4, r5, r6, lr}
 8008e9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460e      	mov	r6, r1
 8008ea2:	b93d      	cbnz	r5, 8008eb4 <_Balloc+0x1a>
 8008ea4:	2010      	movs	r0, #16
 8008ea6:	f7fe fbaf 	bl	8007608 <malloc>
 8008eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8008eac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008eb0:	6005      	str	r5, [r0, #0]
 8008eb2:	60c5      	str	r5, [r0, #12]
 8008eb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008eb6:	68eb      	ldr	r3, [r5, #12]
 8008eb8:	b183      	cbz	r3, 8008edc <_Balloc+0x42>
 8008eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008ec2:	b9b8      	cbnz	r0, 8008ef4 <_Balloc+0x5a>
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	fa01 f506 	lsl.w	r5, r1, r6
 8008eca:	1d6a      	adds	r2, r5, #5
 8008ecc:	0092      	lsls	r2, r2, #2
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 fabe 	bl	8009450 <_calloc_r>
 8008ed4:	b160      	cbz	r0, 8008ef0 <_Balloc+0x56>
 8008ed6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008eda:	e00e      	b.n	8008efa <_Balloc+0x60>
 8008edc:	2221      	movs	r2, #33	; 0x21
 8008ede:	2104      	movs	r1, #4
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 fab5 	bl	8009450 <_calloc_r>
 8008ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee8:	60e8      	str	r0, [r5, #12]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e4      	bne.n	8008eba <_Balloc+0x20>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	6802      	ldr	r2, [r0, #0]
 8008ef6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008efa:	2300      	movs	r3, #0
 8008efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f00:	e7f7      	b.n	8008ef2 <_Balloc+0x58>

08008f02 <_Bfree>:
 8008f02:	b570      	push	{r4, r5, r6, lr}
 8008f04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f06:	4606      	mov	r6, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	b93c      	cbnz	r4, 8008f1c <_Bfree+0x1a>
 8008f0c:	2010      	movs	r0, #16
 8008f0e:	f7fe fb7b 	bl	8007608 <malloc>
 8008f12:	6270      	str	r0, [r6, #36]	; 0x24
 8008f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f18:	6004      	str	r4, [r0, #0]
 8008f1a:	60c4      	str	r4, [r0, #12]
 8008f1c:	b13d      	cbz	r5, 8008f2e <_Bfree+0x2c>
 8008f1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f20:	686a      	ldr	r2, [r5, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f28:	6029      	str	r1, [r5, #0]
 8008f2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}

08008f30 <__multadd>:
 8008f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f34:	690d      	ldr	r5, [r1, #16]
 8008f36:	461f      	mov	r7, r3
 8008f38:	4606      	mov	r6, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f101 0c14 	add.w	ip, r1, #20
 8008f40:	2300      	movs	r3, #0
 8008f42:	f8dc 0000 	ldr.w	r0, [ip]
 8008f46:	b281      	uxth	r1, r0
 8008f48:	fb02 7101 	mla	r1, r2, r1, r7
 8008f4c:	0c0f      	lsrs	r7, r1, #16
 8008f4e:	0c00      	lsrs	r0, r0, #16
 8008f50:	fb02 7000 	mla	r0, r2, r0, r7
 8008f54:	b289      	uxth	r1, r1
 8008f56:	3301      	adds	r3, #1
 8008f58:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f62:	f84c 1b04 	str.w	r1, [ip], #4
 8008f66:	dcec      	bgt.n	8008f42 <__multadd+0x12>
 8008f68:	b1d7      	cbz	r7, 8008fa0 <__multadd+0x70>
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	42ab      	cmp	r3, r5
 8008f6e:	dc12      	bgt.n	8008f96 <__multadd+0x66>
 8008f70:	6861      	ldr	r1, [r4, #4]
 8008f72:	4630      	mov	r0, r6
 8008f74:	3101      	adds	r1, #1
 8008f76:	f7ff ff90 	bl	8008e9a <_Balloc>
 8008f7a:	6922      	ldr	r2, [r4, #16]
 8008f7c:	3202      	adds	r2, #2
 8008f7e:	f104 010c 	add.w	r1, r4, #12
 8008f82:	4680      	mov	r8, r0
 8008f84:	0092      	lsls	r2, r2, #2
 8008f86:	300c      	adds	r0, #12
 8008f88:	f7ff ff7a 	bl	8008e80 <memcpy>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7ff ffb7 	bl	8008f02 <_Bfree>
 8008f94:	4644      	mov	r4, r8
 8008f96:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f9a:	3501      	adds	r5, #1
 8008f9c:	615f      	str	r7, [r3, #20]
 8008f9e:	6125      	str	r5, [r4, #16]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fa6 <__hi0bits>:
 8008fa6:	0c02      	lsrs	r2, r0, #16
 8008fa8:	0412      	lsls	r2, r2, #16
 8008faa:	4603      	mov	r3, r0
 8008fac:	b9b2      	cbnz	r2, 8008fdc <__hi0bits+0x36>
 8008fae:	0403      	lsls	r3, r0, #16
 8008fb0:	2010      	movs	r0, #16
 8008fb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fb6:	bf04      	itt	eq
 8008fb8:	021b      	lsleq	r3, r3, #8
 8008fba:	3008      	addeq	r0, #8
 8008fbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008fc0:	bf04      	itt	eq
 8008fc2:	011b      	lsleq	r3, r3, #4
 8008fc4:	3004      	addeq	r0, #4
 8008fc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008fca:	bf04      	itt	eq
 8008fcc:	009b      	lsleq	r3, r3, #2
 8008fce:	3002      	addeq	r0, #2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db06      	blt.n	8008fe2 <__hi0bits+0x3c>
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	d503      	bpl.n	8008fe0 <__hi0bits+0x3a>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	4770      	bx	lr
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e7e8      	b.n	8008fb2 <__hi0bits+0xc>
 8008fe0:	2020      	movs	r0, #32
 8008fe2:	4770      	bx	lr

08008fe4 <__lo0bits>:
 8008fe4:	6803      	ldr	r3, [r0, #0]
 8008fe6:	f013 0207 	ands.w	r2, r3, #7
 8008fea:	4601      	mov	r1, r0
 8008fec:	d00b      	beq.n	8009006 <__lo0bits+0x22>
 8008fee:	07da      	lsls	r2, r3, #31
 8008ff0:	d423      	bmi.n	800903a <__lo0bits+0x56>
 8008ff2:	0798      	lsls	r0, r3, #30
 8008ff4:	bf49      	itett	mi
 8008ff6:	085b      	lsrmi	r3, r3, #1
 8008ff8:	089b      	lsrpl	r3, r3, #2
 8008ffa:	2001      	movmi	r0, #1
 8008ffc:	600b      	strmi	r3, [r1, #0]
 8008ffe:	bf5c      	itt	pl
 8009000:	600b      	strpl	r3, [r1, #0]
 8009002:	2002      	movpl	r0, #2
 8009004:	4770      	bx	lr
 8009006:	b298      	uxth	r0, r3
 8009008:	b9a8      	cbnz	r0, 8009036 <__lo0bits+0x52>
 800900a:	0c1b      	lsrs	r3, r3, #16
 800900c:	2010      	movs	r0, #16
 800900e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009012:	bf04      	itt	eq
 8009014:	0a1b      	lsreq	r3, r3, #8
 8009016:	3008      	addeq	r0, #8
 8009018:	071a      	lsls	r2, r3, #28
 800901a:	bf04      	itt	eq
 800901c:	091b      	lsreq	r3, r3, #4
 800901e:	3004      	addeq	r0, #4
 8009020:	079a      	lsls	r2, r3, #30
 8009022:	bf04      	itt	eq
 8009024:	089b      	lsreq	r3, r3, #2
 8009026:	3002      	addeq	r0, #2
 8009028:	07da      	lsls	r2, r3, #31
 800902a:	d402      	bmi.n	8009032 <__lo0bits+0x4e>
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	d006      	beq.n	800903e <__lo0bits+0x5a>
 8009030:	3001      	adds	r0, #1
 8009032:	600b      	str	r3, [r1, #0]
 8009034:	4770      	bx	lr
 8009036:	4610      	mov	r0, r2
 8009038:	e7e9      	b.n	800900e <__lo0bits+0x2a>
 800903a:	2000      	movs	r0, #0
 800903c:	4770      	bx	lr
 800903e:	2020      	movs	r0, #32
 8009040:	4770      	bx	lr

08009042 <__i2b>:
 8009042:	b510      	push	{r4, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	2101      	movs	r1, #1
 8009048:	f7ff ff27 	bl	8008e9a <_Balloc>
 800904c:	2201      	movs	r2, #1
 800904e:	6144      	str	r4, [r0, #20]
 8009050:	6102      	str	r2, [r0, #16]
 8009052:	bd10      	pop	{r4, pc}

08009054 <__multiply>:
 8009054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	4614      	mov	r4, r2
 800905a:	690a      	ldr	r2, [r1, #16]
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	429a      	cmp	r2, r3
 8009060:	bfb8      	it	lt
 8009062:	460b      	movlt	r3, r1
 8009064:	4688      	mov	r8, r1
 8009066:	bfbc      	itt	lt
 8009068:	46a0      	movlt	r8, r4
 800906a:	461c      	movlt	r4, r3
 800906c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009070:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009074:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009078:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800907c:	eb07 0609 	add.w	r6, r7, r9
 8009080:	42b3      	cmp	r3, r6
 8009082:	bfb8      	it	lt
 8009084:	3101      	addlt	r1, #1
 8009086:	f7ff ff08 	bl	8008e9a <_Balloc>
 800908a:	f100 0514 	add.w	r5, r0, #20
 800908e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009092:	462b      	mov	r3, r5
 8009094:	2200      	movs	r2, #0
 8009096:	4573      	cmp	r3, lr
 8009098:	d316      	bcc.n	80090c8 <__multiply+0x74>
 800909a:	f104 0214 	add.w	r2, r4, #20
 800909e:	f108 0114 	add.w	r1, r8, #20
 80090a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80090a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	9201      	str	r2, [sp, #4]
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d80c      	bhi.n	80090ce <__multiply+0x7a>
 80090b4:	2e00      	cmp	r6, #0
 80090b6:	dd03      	ble.n	80090c0 <__multiply+0x6c>
 80090b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d05d      	beq.n	800917c <__multiply+0x128>
 80090c0:	6106      	str	r6, [r0, #16]
 80090c2:	b003      	add	sp, #12
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	f843 2b04 	str.w	r2, [r3], #4
 80090cc:	e7e3      	b.n	8009096 <__multiply+0x42>
 80090ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80090d2:	f1bb 0f00 	cmp.w	fp, #0
 80090d6:	d023      	beq.n	8009120 <__multiply+0xcc>
 80090d8:	4689      	mov	r9, r1
 80090da:	46ac      	mov	ip, r5
 80090dc:	f04f 0800 	mov.w	r8, #0
 80090e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80090e4:	f8dc a000 	ldr.w	sl, [ip]
 80090e8:	b2a3      	uxth	r3, r4
 80090ea:	fa1f fa8a 	uxth.w	sl, sl
 80090ee:	fb0b a303 	mla	r3, fp, r3, sl
 80090f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090f6:	f8dc 4000 	ldr.w	r4, [ip]
 80090fa:	4443      	add	r3, r8
 80090fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009100:	fb0b 840a 	mla	r4, fp, sl, r8
 8009104:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009108:	46e2      	mov	sl, ip
 800910a:	b29b      	uxth	r3, r3
 800910c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009110:	454f      	cmp	r7, r9
 8009112:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009116:	f84a 3b04 	str.w	r3, [sl], #4
 800911a:	d82b      	bhi.n	8009174 <__multiply+0x120>
 800911c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009120:	9b01      	ldr	r3, [sp, #4]
 8009122:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009126:	3204      	adds	r2, #4
 8009128:	f1ba 0f00 	cmp.w	sl, #0
 800912c:	d020      	beq.n	8009170 <__multiply+0x11c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	4689      	mov	r9, r1
 8009132:	46a8      	mov	r8, r5
 8009134:	f04f 0b00 	mov.w	fp, #0
 8009138:	f8b9 c000 	ldrh.w	ip, [r9]
 800913c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009140:	fb0a 440c 	mla	r4, sl, ip, r4
 8009144:	445c      	add	r4, fp
 8009146:	46c4      	mov	ip, r8
 8009148:	b29b      	uxth	r3, r3
 800914a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800914e:	f84c 3b04 	str.w	r3, [ip], #4
 8009152:	f859 3b04 	ldr.w	r3, [r9], #4
 8009156:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800915a:	0c1b      	lsrs	r3, r3, #16
 800915c:	fb0a b303 	mla	r3, sl, r3, fp
 8009160:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009164:	454f      	cmp	r7, r9
 8009166:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800916a:	d805      	bhi.n	8009178 <__multiply+0x124>
 800916c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009170:	3504      	adds	r5, #4
 8009172:	e79b      	b.n	80090ac <__multiply+0x58>
 8009174:	46d4      	mov	ip, sl
 8009176:	e7b3      	b.n	80090e0 <__multiply+0x8c>
 8009178:	46e0      	mov	r8, ip
 800917a:	e7dd      	b.n	8009138 <__multiply+0xe4>
 800917c:	3e01      	subs	r6, #1
 800917e:	e799      	b.n	80090b4 <__multiply+0x60>

08009180 <__pow5mult>:
 8009180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009184:	4615      	mov	r5, r2
 8009186:	f012 0203 	ands.w	r2, r2, #3
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	d007      	beq.n	80091a0 <__pow5mult+0x20>
 8009190:	3a01      	subs	r2, #1
 8009192:	4c21      	ldr	r4, [pc, #132]	; (8009218 <__pow5mult+0x98>)
 8009194:	2300      	movs	r3, #0
 8009196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800919a:	f7ff fec9 	bl	8008f30 <__multadd>
 800919e:	4607      	mov	r7, r0
 80091a0:	10ad      	asrs	r5, r5, #2
 80091a2:	d035      	beq.n	8009210 <__pow5mult+0x90>
 80091a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091a6:	b93c      	cbnz	r4, 80091b8 <__pow5mult+0x38>
 80091a8:	2010      	movs	r0, #16
 80091aa:	f7fe fa2d 	bl	8007608 <malloc>
 80091ae:	6270      	str	r0, [r6, #36]	; 0x24
 80091b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091b4:	6004      	str	r4, [r0, #0]
 80091b6:	60c4      	str	r4, [r0, #12]
 80091b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091c0:	b94c      	cbnz	r4, 80091d6 <__pow5mult+0x56>
 80091c2:	f240 2171 	movw	r1, #625	; 0x271
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7ff ff3b 	bl	8009042 <__i2b>
 80091cc:	2300      	movs	r3, #0
 80091ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80091d2:	4604      	mov	r4, r0
 80091d4:	6003      	str	r3, [r0, #0]
 80091d6:	f04f 0800 	mov.w	r8, #0
 80091da:	07eb      	lsls	r3, r5, #31
 80091dc:	d50a      	bpl.n	80091f4 <__pow5mult+0x74>
 80091de:	4639      	mov	r1, r7
 80091e0:	4622      	mov	r2, r4
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff ff36 	bl	8009054 <__multiply>
 80091e8:	4639      	mov	r1, r7
 80091ea:	4681      	mov	r9, r0
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff fe88 	bl	8008f02 <_Bfree>
 80091f2:	464f      	mov	r7, r9
 80091f4:	106d      	asrs	r5, r5, #1
 80091f6:	d00b      	beq.n	8009210 <__pow5mult+0x90>
 80091f8:	6820      	ldr	r0, [r4, #0]
 80091fa:	b938      	cbnz	r0, 800920c <__pow5mult+0x8c>
 80091fc:	4622      	mov	r2, r4
 80091fe:	4621      	mov	r1, r4
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff ff27 	bl	8009054 <__multiply>
 8009206:	6020      	str	r0, [r4, #0]
 8009208:	f8c0 8000 	str.w	r8, [r0]
 800920c:	4604      	mov	r4, r0
 800920e:	e7e4      	b.n	80091da <__pow5mult+0x5a>
 8009210:	4638      	mov	r0, r7
 8009212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009216:	bf00      	nop
 8009218:	08009c20 	.word	0x08009c20

0800921c <__lshift>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	460c      	mov	r4, r1
 8009222:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	6849      	ldr	r1, [r1, #4]
 800922a:	eb0a 0903 	add.w	r9, sl, r3
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	4607      	mov	r7, r0
 8009232:	4616      	mov	r6, r2
 8009234:	f109 0501 	add.w	r5, r9, #1
 8009238:	42ab      	cmp	r3, r5
 800923a:	db32      	blt.n	80092a2 <__lshift+0x86>
 800923c:	4638      	mov	r0, r7
 800923e:	f7ff fe2c 	bl	8008e9a <_Balloc>
 8009242:	2300      	movs	r3, #0
 8009244:	4680      	mov	r8, r0
 8009246:	f100 0114 	add.w	r1, r0, #20
 800924a:	461a      	mov	r2, r3
 800924c:	4553      	cmp	r3, sl
 800924e:	db2b      	blt.n	80092a8 <__lshift+0x8c>
 8009250:	6920      	ldr	r0, [r4, #16]
 8009252:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009256:	f104 0314 	add.w	r3, r4, #20
 800925a:	f016 021f 	ands.w	r2, r6, #31
 800925e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009262:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009266:	d025      	beq.n	80092b4 <__lshift+0x98>
 8009268:	f1c2 0e20 	rsb	lr, r2, #32
 800926c:	2000      	movs	r0, #0
 800926e:	681e      	ldr	r6, [r3, #0]
 8009270:	468a      	mov	sl, r1
 8009272:	4096      	lsls	r6, r2
 8009274:	4330      	orrs	r0, r6
 8009276:	f84a 0b04 	str.w	r0, [sl], #4
 800927a:	f853 0b04 	ldr.w	r0, [r3], #4
 800927e:	459c      	cmp	ip, r3
 8009280:	fa20 f00e 	lsr.w	r0, r0, lr
 8009284:	d814      	bhi.n	80092b0 <__lshift+0x94>
 8009286:	6048      	str	r0, [r1, #4]
 8009288:	b108      	cbz	r0, 800928e <__lshift+0x72>
 800928a:	f109 0502 	add.w	r5, r9, #2
 800928e:	3d01      	subs	r5, #1
 8009290:	4638      	mov	r0, r7
 8009292:	f8c8 5010 	str.w	r5, [r8, #16]
 8009296:	4621      	mov	r1, r4
 8009298:	f7ff fe33 	bl	8008f02 <_Bfree>
 800929c:	4640      	mov	r0, r8
 800929e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a2:	3101      	adds	r1, #1
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	e7c7      	b.n	8009238 <__lshift+0x1c>
 80092a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80092ac:	3301      	adds	r3, #1
 80092ae:	e7cd      	b.n	800924c <__lshift+0x30>
 80092b0:	4651      	mov	r1, sl
 80092b2:	e7dc      	b.n	800926e <__lshift+0x52>
 80092b4:	3904      	subs	r1, #4
 80092b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80092be:	459c      	cmp	ip, r3
 80092c0:	d8f9      	bhi.n	80092b6 <__lshift+0x9a>
 80092c2:	e7e4      	b.n	800928e <__lshift+0x72>

080092c4 <__mcmp>:
 80092c4:	6903      	ldr	r3, [r0, #16]
 80092c6:	690a      	ldr	r2, [r1, #16]
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	b530      	push	{r4, r5, lr}
 80092cc:	d10c      	bne.n	80092e8 <__mcmp+0x24>
 80092ce:	0092      	lsls	r2, r2, #2
 80092d0:	3014      	adds	r0, #20
 80092d2:	3114      	adds	r1, #20
 80092d4:	1884      	adds	r4, r0, r2
 80092d6:	4411      	add	r1, r2
 80092d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092e0:	4295      	cmp	r5, r2
 80092e2:	d003      	beq.n	80092ec <__mcmp+0x28>
 80092e4:	d305      	bcc.n	80092f2 <__mcmp+0x2e>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4618      	mov	r0, r3
 80092ea:	bd30      	pop	{r4, r5, pc}
 80092ec:	42a0      	cmp	r0, r4
 80092ee:	d3f3      	bcc.n	80092d8 <__mcmp+0x14>
 80092f0:	e7fa      	b.n	80092e8 <__mcmp+0x24>
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	e7f7      	b.n	80092e8 <__mcmp+0x24>

080092f8 <__mdiff>:
 80092f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	460d      	mov	r5, r1
 80092fe:	4607      	mov	r7, r0
 8009300:	4611      	mov	r1, r2
 8009302:	4628      	mov	r0, r5
 8009304:	4614      	mov	r4, r2
 8009306:	f7ff ffdd 	bl	80092c4 <__mcmp>
 800930a:	1e06      	subs	r6, r0, #0
 800930c:	d108      	bne.n	8009320 <__mdiff+0x28>
 800930e:	4631      	mov	r1, r6
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff fdc2 	bl	8008e9a <_Balloc>
 8009316:	2301      	movs	r3, #1
 8009318:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800931c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009320:	bfa4      	itt	ge
 8009322:	4623      	movge	r3, r4
 8009324:	462c      	movge	r4, r5
 8009326:	4638      	mov	r0, r7
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	bfa6      	itte	ge
 800932c:	461d      	movge	r5, r3
 800932e:	2600      	movge	r6, #0
 8009330:	2601      	movlt	r6, #1
 8009332:	f7ff fdb2 	bl	8008e9a <_Balloc>
 8009336:	692b      	ldr	r3, [r5, #16]
 8009338:	60c6      	str	r6, [r0, #12]
 800933a:	6926      	ldr	r6, [r4, #16]
 800933c:	f105 0914 	add.w	r9, r5, #20
 8009340:	f104 0214 	add.w	r2, r4, #20
 8009344:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009348:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800934c:	f100 0514 	add.w	r5, r0, #20
 8009350:	f04f 0e00 	mov.w	lr, #0
 8009354:	f852 ab04 	ldr.w	sl, [r2], #4
 8009358:	f859 4b04 	ldr.w	r4, [r9], #4
 800935c:	fa1e f18a 	uxtah	r1, lr, sl
 8009360:	b2a3      	uxth	r3, r4
 8009362:	1ac9      	subs	r1, r1, r3
 8009364:	0c23      	lsrs	r3, r4, #16
 8009366:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800936a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800936e:	b289      	uxth	r1, r1
 8009370:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009374:	45c8      	cmp	r8, r9
 8009376:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800937a:	4694      	mov	ip, r2
 800937c:	f845 3b04 	str.w	r3, [r5], #4
 8009380:	d8e8      	bhi.n	8009354 <__mdiff+0x5c>
 8009382:	45bc      	cmp	ip, r7
 8009384:	d304      	bcc.n	8009390 <__mdiff+0x98>
 8009386:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800938a:	b183      	cbz	r3, 80093ae <__mdiff+0xb6>
 800938c:	6106      	str	r6, [r0, #16]
 800938e:	e7c5      	b.n	800931c <__mdiff+0x24>
 8009390:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009394:	fa1e f381 	uxtah	r3, lr, r1
 8009398:	141a      	asrs	r2, r3, #16
 800939a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800939e:	b29b      	uxth	r3, r3
 80093a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80093a8:	f845 3b04 	str.w	r3, [r5], #4
 80093ac:	e7e9      	b.n	8009382 <__mdiff+0x8a>
 80093ae:	3e01      	subs	r6, #1
 80093b0:	e7e9      	b.n	8009386 <__mdiff+0x8e>

080093b2 <__d2b>:
 80093b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b6:	460e      	mov	r6, r1
 80093b8:	2101      	movs	r1, #1
 80093ba:	ec59 8b10 	vmov	r8, r9, d0
 80093be:	4615      	mov	r5, r2
 80093c0:	f7ff fd6b 	bl	8008e9a <_Balloc>
 80093c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80093c8:	4607      	mov	r7, r0
 80093ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ce:	bb34      	cbnz	r4, 800941e <__d2b+0x6c>
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f1b8 0300 	subs.w	r3, r8, #0
 80093d6:	d027      	beq.n	8009428 <__d2b+0x76>
 80093d8:	a802      	add	r0, sp, #8
 80093da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80093de:	f7ff fe01 	bl	8008fe4 <__lo0bits>
 80093e2:	9900      	ldr	r1, [sp, #0]
 80093e4:	b1f0      	cbz	r0, 8009424 <__d2b+0x72>
 80093e6:	9a01      	ldr	r2, [sp, #4]
 80093e8:	f1c0 0320 	rsb	r3, r0, #32
 80093ec:	fa02 f303 	lsl.w	r3, r2, r3
 80093f0:	430b      	orrs	r3, r1
 80093f2:	40c2      	lsrs	r2, r0
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bf14      	ite	ne
 8009400:	2102      	movne	r1, #2
 8009402:	2101      	moveq	r1, #1
 8009404:	6139      	str	r1, [r7, #16]
 8009406:	b1c4      	cbz	r4, 800943a <__d2b+0x88>
 8009408:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800940c:	4404      	add	r4, r0
 800940e:	6034      	str	r4, [r6, #0]
 8009410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009414:	6028      	str	r0, [r5, #0]
 8009416:	4638      	mov	r0, r7
 8009418:	b003      	add	sp, #12
 800941a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800941e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009422:	e7d5      	b.n	80093d0 <__d2b+0x1e>
 8009424:	6179      	str	r1, [r7, #20]
 8009426:	e7e7      	b.n	80093f8 <__d2b+0x46>
 8009428:	a801      	add	r0, sp, #4
 800942a:	f7ff fddb 	bl	8008fe4 <__lo0bits>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	2101      	movs	r1, #1
 8009434:	6139      	str	r1, [r7, #16]
 8009436:	3020      	adds	r0, #32
 8009438:	e7e5      	b.n	8009406 <__d2b+0x54>
 800943a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800943e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009442:	6030      	str	r0, [r6, #0]
 8009444:	6918      	ldr	r0, [r3, #16]
 8009446:	f7ff fdae 	bl	8008fa6 <__hi0bits>
 800944a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800944e:	e7e1      	b.n	8009414 <__d2b+0x62>

08009450 <_calloc_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	fb02 f401 	mul.w	r4, r2, r1
 8009456:	4621      	mov	r1, r4
 8009458:	f7fe f934 	bl	80076c4 <_malloc_r>
 800945c:	4605      	mov	r5, r0
 800945e:	b118      	cbz	r0, 8009468 <_calloc_r+0x18>
 8009460:	4622      	mov	r2, r4
 8009462:	2100      	movs	r1, #0
 8009464:	f7fe f8d8 	bl	8007618 <memset>
 8009468:	4628      	mov	r0, r5
 800946a:	bd38      	pop	{r3, r4, r5, pc}

0800946c <__ssputs_r>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	688e      	ldr	r6, [r1, #8]
 8009472:	429e      	cmp	r6, r3
 8009474:	4682      	mov	sl, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4690      	mov	r8, r2
 800947a:	4699      	mov	r9, r3
 800947c:	d837      	bhi.n	80094ee <__ssputs_r+0x82>
 800947e:	898a      	ldrh	r2, [r1, #12]
 8009480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009484:	d031      	beq.n	80094ea <__ssputs_r+0x7e>
 8009486:	6825      	ldr	r5, [r4, #0]
 8009488:	6909      	ldr	r1, [r1, #16]
 800948a:	1a6f      	subs	r7, r5, r1
 800948c:	6965      	ldr	r5, [r4, #20]
 800948e:	2302      	movs	r3, #2
 8009490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009494:	fb95 f5f3 	sdiv	r5, r5, r3
 8009498:	f109 0301 	add.w	r3, r9, #1
 800949c:	443b      	add	r3, r7
 800949e:	429d      	cmp	r5, r3
 80094a0:	bf38      	it	cc
 80094a2:	461d      	movcc	r5, r3
 80094a4:	0553      	lsls	r3, r2, #21
 80094a6:	d530      	bpl.n	800950a <__ssputs_r+0x9e>
 80094a8:	4629      	mov	r1, r5
 80094aa:	f7fe f90b 	bl	80076c4 <_malloc_r>
 80094ae:	4606      	mov	r6, r0
 80094b0:	b950      	cbnz	r0, 80094c8 <__ssputs_r+0x5c>
 80094b2:	230c      	movs	r3, #12
 80094b4:	f8ca 3000 	str.w	r3, [sl]
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c8:	463a      	mov	r2, r7
 80094ca:	6921      	ldr	r1, [r4, #16]
 80094cc:	f7ff fcd8 	bl	8008e80 <memcpy>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	6126      	str	r6, [r4, #16]
 80094de:	6165      	str	r5, [r4, #20]
 80094e0:	443e      	add	r6, r7
 80094e2:	1bed      	subs	r5, r5, r7
 80094e4:	6026      	str	r6, [r4, #0]
 80094e6:	60a5      	str	r5, [r4, #8]
 80094e8:	464e      	mov	r6, r9
 80094ea:	454e      	cmp	r6, r9
 80094ec:	d900      	bls.n	80094f0 <__ssputs_r+0x84>
 80094ee:	464e      	mov	r6, r9
 80094f0:	4632      	mov	r2, r6
 80094f2:	4641      	mov	r1, r8
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	f000 f918 	bl	800972a <memmove>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	1b9b      	subs	r3, r3, r6
 80094fe:	60a3      	str	r3, [r4, #8]
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	441e      	add	r6, r3
 8009504:	6026      	str	r6, [r4, #0]
 8009506:	2000      	movs	r0, #0
 8009508:	e7dc      	b.n	80094c4 <__ssputs_r+0x58>
 800950a:	462a      	mov	r2, r5
 800950c:	f000 f926 	bl	800975c <_realloc_r>
 8009510:	4606      	mov	r6, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d1e2      	bne.n	80094dc <__ssputs_r+0x70>
 8009516:	6921      	ldr	r1, [r4, #16]
 8009518:	4650      	mov	r0, sl
 800951a:	f7fe f885 	bl	8007628 <_free_r>
 800951e:	e7c8      	b.n	80094b2 <__ssputs_r+0x46>

08009520 <_svfiprintf_r>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	461d      	mov	r5, r3
 8009526:	898b      	ldrh	r3, [r1, #12]
 8009528:	061f      	lsls	r7, r3, #24
 800952a:	b09d      	sub	sp, #116	; 0x74
 800952c:	4680      	mov	r8, r0
 800952e:	460c      	mov	r4, r1
 8009530:	4616      	mov	r6, r2
 8009532:	d50f      	bpl.n	8009554 <_svfiprintf_r+0x34>
 8009534:	690b      	ldr	r3, [r1, #16]
 8009536:	b96b      	cbnz	r3, 8009554 <_svfiprintf_r+0x34>
 8009538:	2140      	movs	r1, #64	; 0x40
 800953a:	f7fe f8c3 	bl	80076c4 <_malloc_r>
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	6120      	str	r0, [r4, #16]
 8009542:	b928      	cbnz	r0, 8009550 <_svfiprintf_r+0x30>
 8009544:	230c      	movs	r3, #12
 8009546:	f8c8 3000 	str.w	r3, [r8]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	e0c8      	b.n	80096e2 <_svfiprintf_r+0x1c2>
 8009550:	2340      	movs	r3, #64	; 0x40
 8009552:	6163      	str	r3, [r4, #20]
 8009554:	2300      	movs	r3, #0
 8009556:	9309      	str	r3, [sp, #36]	; 0x24
 8009558:	2320      	movs	r3, #32
 800955a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800955e:	2330      	movs	r3, #48	; 0x30
 8009560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009564:	9503      	str	r5, [sp, #12]
 8009566:	f04f 0b01 	mov.w	fp, #1
 800956a:	4637      	mov	r7, r6
 800956c:	463d      	mov	r5, r7
 800956e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009572:	b10b      	cbz	r3, 8009578 <_svfiprintf_r+0x58>
 8009574:	2b25      	cmp	r3, #37	; 0x25
 8009576:	d13e      	bne.n	80095f6 <_svfiprintf_r+0xd6>
 8009578:	ebb7 0a06 	subs.w	sl, r7, r6
 800957c:	d00b      	beq.n	8009596 <_svfiprintf_r+0x76>
 800957e:	4653      	mov	r3, sl
 8009580:	4632      	mov	r2, r6
 8009582:	4621      	mov	r1, r4
 8009584:	4640      	mov	r0, r8
 8009586:	f7ff ff71 	bl	800946c <__ssputs_r>
 800958a:	3001      	adds	r0, #1
 800958c:	f000 80a4 	beq.w	80096d8 <_svfiprintf_r+0x1b8>
 8009590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009592:	4453      	add	r3, sl
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	783b      	ldrb	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 809d 	beq.w	80096d8 <_svfiprintf_r+0x1b8>
 800959e:	2300      	movs	r3, #0
 80095a0:	f04f 32ff 	mov.w	r2, #4294967295
 80095a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b0:	931a      	str	r3, [sp, #104]	; 0x68
 80095b2:	462f      	mov	r7, r5
 80095b4:	2205      	movs	r2, #5
 80095b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80095ba:	4850      	ldr	r0, [pc, #320]	; (80096fc <_svfiprintf_r+0x1dc>)
 80095bc:	f7f6 fe20 	bl	8000200 <memchr>
 80095c0:	9b04      	ldr	r3, [sp, #16]
 80095c2:	b9d0      	cbnz	r0, 80095fa <_svfiprintf_r+0xda>
 80095c4:	06d9      	lsls	r1, r3, #27
 80095c6:	bf44      	itt	mi
 80095c8:	2220      	movmi	r2, #32
 80095ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095ce:	071a      	lsls	r2, r3, #28
 80095d0:	bf44      	itt	mi
 80095d2:	222b      	movmi	r2, #43	; 0x2b
 80095d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095d8:	782a      	ldrb	r2, [r5, #0]
 80095da:	2a2a      	cmp	r2, #42	; 0x2a
 80095dc:	d015      	beq.n	800960a <_svfiprintf_r+0xea>
 80095de:	9a07      	ldr	r2, [sp, #28]
 80095e0:	462f      	mov	r7, r5
 80095e2:	2000      	movs	r0, #0
 80095e4:	250a      	movs	r5, #10
 80095e6:	4639      	mov	r1, r7
 80095e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ec:	3b30      	subs	r3, #48	; 0x30
 80095ee:	2b09      	cmp	r3, #9
 80095f0:	d94d      	bls.n	800968e <_svfiprintf_r+0x16e>
 80095f2:	b1b8      	cbz	r0, 8009624 <_svfiprintf_r+0x104>
 80095f4:	e00f      	b.n	8009616 <_svfiprintf_r+0xf6>
 80095f6:	462f      	mov	r7, r5
 80095f8:	e7b8      	b.n	800956c <_svfiprintf_r+0x4c>
 80095fa:	4a40      	ldr	r2, [pc, #256]	; (80096fc <_svfiprintf_r+0x1dc>)
 80095fc:	1a80      	subs	r0, r0, r2
 80095fe:	fa0b f000 	lsl.w	r0, fp, r0
 8009602:	4318      	orrs	r0, r3
 8009604:	9004      	str	r0, [sp, #16]
 8009606:	463d      	mov	r5, r7
 8009608:	e7d3      	b.n	80095b2 <_svfiprintf_r+0x92>
 800960a:	9a03      	ldr	r2, [sp, #12]
 800960c:	1d11      	adds	r1, r2, #4
 800960e:	6812      	ldr	r2, [r2, #0]
 8009610:	9103      	str	r1, [sp, #12]
 8009612:	2a00      	cmp	r2, #0
 8009614:	db01      	blt.n	800961a <_svfiprintf_r+0xfa>
 8009616:	9207      	str	r2, [sp, #28]
 8009618:	e004      	b.n	8009624 <_svfiprintf_r+0x104>
 800961a:	4252      	negs	r2, r2
 800961c:	f043 0302 	orr.w	r3, r3, #2
 8009620:	9207      	str	r2, [sp, #28]
 8009622:	9304      	str	r3, [sp, #16]
 8009624:	783b      	ldrb	r3, [r7, #0]
 8009626:	2b2e      	cmp	r3, #46	; 0x2e
 8009628:	d10c      	bne.n	8009644 <_svfiprintf_r+0x124>
 800962a:	787b      	ldrb	r3, [r7, #1]
 800962c:	2b2a      	cmp	r3, #42	; 0x2a
 800962e:	d133      	bne.n	8009698 <_svfiprintf_r+0x178>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	1d1a      	adds	r2, r3, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	9203      	str	r2, [sp, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	bfb8      	it	lt
 800963c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009640:	3702      	adds	r7, #2
 8009642:	9305      	str	r3, [sp, #20]
 8009644:	4d2e      	ldr	r5, [pc, #184]	; (8009700 <_svfiprintf_r+0x1e0>)
 8009646:	7839      	ldrb	r1, [r7, #0]
 8009648:	2203      	movs	r2, #3
 800964a:	4628      	mov	r0, r5
 800964c:	f7f6 fdd8 	bl	8000200 <memchr>
 8009650:	b138      	cbz	r0, 8009662 <_svfiprintf_r+0x142>
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	1b40      	subs	r0, r0, r5
 8009656:	fa03 f000 	lsl.w	r0, r3, r0
 800965a:	9b04      	ldr	r3, [sp, #16]
 800965c:	4303      	orrs	r3, r0
 800965e:	3701      	adds	r7, #1
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	7839      	ldrb	r1, [r7, #0]
 8009664:	4827      	ldr	r0, [pc, #156]	; (8009704 <_svfiprintf_r+0x1e4>)
 8009666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800966a:	2206      	movs	r2, #6
 800966c:	1c7e      	adds	r6, r7, #1
 800966e:	f7f6 fdc7 	bl	8000200 <memchr>
 8009672:	2800      	cmp	r0, #0
 8009674:	d038      	beq.n	80096e8 <_svfiprintf_r+0x1c8>
 8009676:	4b24      	ldr	r3, [pc, #144]	; (8009708 <_svfiprintf_r+0x1e8>)
 8009678:	bb13      	cbnz	r3, 80096c0 <_svfiprintf_r+0x1a0>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	3307      	adds	r3, #7
 800967e:	f023 0307 	bic.w	r3, r3, #7
 8009682:	3308      	adds	r3, #8
 8009684:	9303      	str	r3, [sp, #12]
 8009686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009688:	444b      	add	r3, r9
 800968a:	9309      	str	r3, [sp, #36]	; 0x24
 800968c:	e76d      	b.n	800956a <_svfiprintf_r+0x4a>
 800968e:	fb05 3202 	mla	r2, r5, r2, r3
 8009692:	2001      	movs	r0, #1
 8009694:	460f      	mov	r7, r1
 8009696:	e7a6      	b.n	80095e6 <_svfiprintf_r+0xc6>
 8009698:	2300      	movs	r3, #0
 800969a:	3701      	adds	r7, #1
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	4619      	mov	r1, r3
 80096a0:	250a      	movs	r5, #10
 80096a2:	4638      	mov	r0, r7
 80096a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a8:	3a30      	subs	r2, #48	; 0x30
 80096aa:	2a09      	cmp	r2, #9
 80096ac:	d903      	bls.n	80096b6 <_svfiprintf_r+0x196>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0c8      	beq.n	8009644 <_svfiprintf_r+0x124>
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	e7c6      	b.n	8009644 <_svfiprintf_r+0x124>
 80096b6:	fb05 2101 	mla	r1, r5, r1, r2
 80096ba:	2301      	movs	r3, #1
 80096bc:	4607      	mov	r7, r0
 80096be:	e7f0      	b.n	80096a2 <_svfiprintf_r+0x182>
 80096c0:	ab03      	add	r3, sp, #12
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4622      	mov	r2, r4
 80096c6:	4b11      	ldr	r3, [pc, #68]	; (800970c <_svfiprintf_r+0x1ec>)
 80096c8:	a904      	add	r1, sp, #16
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7fe f8e8 	bl	80078a0 <_printf_float>
 80096d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096d4:	4681      	mov	r9, r0
 80096d6:	d1d6      	bne.n	8009686 <_svfiprintf_r+0x166>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	065b      	lsls	r3, r3, #25
 80096dc:	f53f af35 	bmi.w	800954a <_svfiprintf_r+0x2a>
 80096e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e2:	b01d      	add	sp, #116	; 0x74
 80096e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e8:	ab03      	add	r3, sp, #12
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	4622      	mov	r2, r4
 80096ee:	4b07      	ldr	r3, [pc, #28]	; (800970c <_svfiprintf_r+0x1ec>)
 80096f0:	a904      	add	r1, sp, #16
 80096f2:	4640      	mov	r0, r8
 80096f4:	f7fe fb8a 	bl	8007e0c <_printf_i>
 80096f8:	e7ea      	b.n	80096d0 <_svfiprintf_r+0x1b0>
 80096fa:	bf00      	nop
 80096fc:	08009c2c 	.word	0x08009c2c
 8009700:	08009c32 	.word	0x08009c32
 8009704:	08009c36 	.word	0x08009c36
 8009708:	080078a1 	.word	0x080078a1
 800970c:	0800946d 	.word	0x0800946d

08009710 <__ascii_wctomb>:
 8009710:	b149      	cbz	r1, 8009726 <__ascii_wctomb+0x16>
 8009712:	2aff      	cmp	r2, #255	; 0xff
 8009714:	bf85      	ittet	hi
 8009716:	238a      	movhi	r3, #138	; 0x8a
 8009718:	6003      	strhi	r3, [r0, #0]
 800971a:	700a      	strbls	r2, [r1, #0]
 800971c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009720:	bf98      	it	ls
 8009722:	2001      	movls	r0, #1
 8009724:	4770      	bx	lr
 8009726:	4608      	mov	r0, r1
 8009728:	4770      	bx	lr

0800972a <memmove>:
 800972a:	4288      	cmp	r0, r1
 800972c:	b510      	push	{r4, lr}
 800972e:	eb01 0302 	add.w	r3, r1, r2
 8009732:	d807      	bhi.n	8009744 <memmove+0x1a>
 8009734:	1e42      	subs	r2, r0, #1
 8009736:	4299      	cmp	r1, r3
 8009738:	d00a      	beq.n	8009750 <memmove+0x26>
 800973a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009742:	e7f8      	b.n	8009736 <memmove+0xc>
 8009744:	4283      	cmp	r3, r0
 8009746:	d9f5      	bls.n	8009734 <memmove+0xa>
 8009748:	1881      	adds	r1, r0, r2
 800974a:	1ad2      	subs	r2, r2, r3
 800974c:	42d3      	cmn	r3, r2
 800974e:	d100      	bne.n	8009752 <memmove+0x28>
 8009750:	bd10      	pop	{r4, pc}
 8009752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009756:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800975a:	e7f7      	b.n	800974c <memmove+0x22>

0800975c <_realloc_r>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	4607      	mov	r7, r0
 8009760:	4614      	mov	r4, r2
 8009762:	460e      	mov	r6, r1
 8009764:	b921      	cbnz	r1, 8009770 <_realloc_r+0x14>
 8009766:	4611      	mov	r1, r2
 8009768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800976c:	f7fd bfaa 	b.w	80076c4 <_malloc_r>
 8009770:	b922      	cbnz	r2, 800977c <_realloc_r+0x20>
 8009772:	f7fd ff59 	bl	8007628 <_free_r>
 8009776:	4625      	mov	r5, r4
 8009778:	4628      	mov	r0, r5
 800977a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977c:	f000 f814 	bl	80097a8 <_malloc_usable_size_r>
 8009780:	42a0      	cmp	r0, r4
 8009782:	d20f      	bcs.n	80097a4 <_realloc_r+0x48>
 8009784:	4621      	mov	r1, r4
 8009786:	4638      	mov	r0, r7
 8009788:	f7fd ff9c 	bl	80076c4 <_malloc_r>
 800978c:	4605      	mov	r5, r0
 800978e:	2800      	cmp	r0, #0
 8009790:	d0f2      	beq.n	8009778 <_realloc_r+0x1c>
 8009792:	4631      	mov	r1, r6
 8009794:	4622      	mov	r2, r4
 8009796:	f7ff fb73 	bl	8008e80 <memcpy>
 800979a:	4631      	mov	r1, r6
 800979c:	4638      	mov	r0, r7
 800979e:	f7fd ff43 	bl	8007628 <_free_r>
 80097a2:	e7e9      	b.n	8009778 <_realloc_r+0x1c>
 80097a4:	4635      	mov	r5, r6
 80097a6:	e7e7      	b.n	8009778 <_realloc_r+0x1c>

080097a8 <_malloc_usable_size_r>:
 80097a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ac:	1f18      	subs	r0, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbc      	itt	lt
 80097b2:	580b      	ldrlt	r3, [r1, r0]
 80097b4:	18c0      	addlt	r0, r0, r3
 80097b6:	4770      	bx	lr

080097b8 <_init>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr

080097c4 <_fini>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr
