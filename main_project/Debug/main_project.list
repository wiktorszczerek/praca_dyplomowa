
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ecc  08004ecc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  20000078  08004f48  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  08004f48  00021224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117a6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000223c  00000000  00000000  0003184a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00033a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00034840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000238fe  00000000  00000000  000354e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b704  00000000  00000000  00058dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9366  00000000  00000000  000644e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  0013d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dc8 	.word	0x08004dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004dc8 	.word	0x08004dc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fc0e 	bl	8000da6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f85b 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f993 	bl	80008b8 <MX_GPIO_Init>
//  MX_DMA_Init();
  MX_USART2_UART_Init();
 8000592:	f000 f961 	bl	8000858 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000596:	f000 f8eb 	bl	8000770 <MX_ADC1_Init>
  #ifdef DEBUG_MODE
//  show_read_sensor_data(&si);
  #endif


  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	4821      	ldr	r0, [pc, #132]	; (8000624 <main+0xa4>)
 80005a0:	f002 f95c 	bl	800285c <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, adc_vals, 2);
 80005a4:	2202      	movs	r2, #2
 80005a6:	4920      	ldr	r1, [pc, #128]	; (8000628 <main+0xa8>)
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0xac>)
 80005aa:	f000 ffa1 	bl	80014f0 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_vals, 2);
	  HAL_Delay(1000);
	  HAL_ADC_Stop_DMA(&hadc1);
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	#else
	  if(last_error == OK)
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <main+0xb0>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d12c      	bne.n	8000610 <main+0x90>
	  {
		  char* buffer = (char*)malloc(100*sizeof(char));
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f003 ffe8 	bl	800458c <malloc>
 80005bc:	4603      	mov	r3, r0
 80005be:	607b      	str	r3, [r7, #4]
		  //sprintf(buffer,"Measured: ADC11(green) = %u[mV]  /// ADC9(yellow) = %u[mV]\r",measured_values[0],measured_values[1]);
		  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
		  #ifdef DEBUG_MODE
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), 10);
 80005c0:	230a      	movs	r3, #10
 80005c2:	2201      	movs	r2, #1
 80005c4:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xb4>)
 80005c6:	481c      	ldr	r0, [pc, #112]	; (8000638 <main+0xb8>)
 80005c8:	f003 fbb0 	bl	8003d2c <HAL_UART_Transmit>
		  sprintf(buffer,"Control group (bare 12b ADC readings, averaged): holder_debug[0] = %lu /// holder_debug[1] = %lu\r\n",adc_vals[0],adc_vals[1]);
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <main+0xa8>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <main+0xa8>)
 80005d4:	885b      	ldrh	r3, [r3, #2]
 80005d6:	4919      	ldr	r1, [pc, #100]	; (800063c <main+0xbc>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f004 f8a7 	bl	800472c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	230a      	movs	r3, #10
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0xb8>)
 80005ee:	f003 fb9d 	bl	8003d2c <HAL_UART_Transmit>
		  }
		  else
			  sprintf(buffer,"\bMeasurement result is normal (sub-threshold level).\r");
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
		  #endif
		  free(buffer);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f003 ffd2 	bl	800459c <free>
		  filter_done = 0;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <main+0xc0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
		  //For monitoring the state only.
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005fe:	2108      	movs	r1, #8
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0xa4>)
 8000602:	f002 f943 	bl	800288c <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f000 fc41 	bl	8000e90 <HAL_Delay>
 800060e:	e7ce      	b.n	80005ae <main+0x2e>
	  }
	  else
	  {
		  signal_error(last_error);
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <main+0xb0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f9f3 	bl	8000a00 <signal_error>
		  while(1)
		  {
			  HAL_Delay(1000);
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f000 fc37 	bl	8000e90 <HAL_Delay>
 8000622:	e7fa      	b.n	800061a <main+0x9a>
 8000624:	48000400 	.word	0x48000400
 8000628:	20000094 	.word	0x20000094
 800062c:	20000198 	.word	0x20000198
 8000630:	20000000 	.word	0x20000000
 8000634:	08004de0 	.word	0x08004de0
 8000638:	200000f4 	.word	0x200000f4
 800063c:	08004de4 	.word	0x08004de4
 8000640:	20000098 	.word	0x20000098

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0ac      	sub	sp, #176	; 0xb0
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 ffaa 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2254      	movs	r2, #84	; 0x54
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 ff9c 	bl	80045ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f002 f924 	bl	80028c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000678:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <SystemClock_Config+0x124>)
 800067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800067e:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <SystemClock_Config+0x124>)
 8000680:	f023 0318 	bic.w	r3, r3, #24
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000688:	2305      	movs	r3, #5
 800068a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	2303      	movs	r3, #3
 800069e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f96f 	bl	80029a8 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d0:	f000 f9a5 	bl	8000a1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ec:	2101      	movs	r1, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fd7a 	bl	80031e8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006fa:	f000 f990 	bl	8000a1e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <SystemClock_Config+0x128>)
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000706:	2300      	movs	r3, #0
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800070a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800071e:	2308      	movs	r3, #8
 8000720:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000722:	2307      	movs	r3, #7
 8000724:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800072e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000732:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f002 ff86 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000742:	f000 f96c 	bl	8000a1e <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000746:	f002 fef3 	bl	8003530 <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800074a:	f003 f96f 	bl	8003a2c <HAL_RCCEx_EnableLSECSS>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000752:	f002 f8d3 	bl	80028fc <HAL_PWREx_ControlVoltageScaling>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800075c:	f000 f95f 	bl	8000a1e <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	37b0      	adds	r7, #176	; 0xb0
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	00024042 	.word	0x00024042

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_ADC1_Init+0xd8>)
 8000788:	4a30      	ldr	r2, [pc, #192]	; (800084c <MX_ADC1_Init+0xdc>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_ADC1_Init+0xd8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_ADC1_Init+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_ADC1_Init+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_ADC1_Init+0xd8>)
 80007e8:	f000 fd3c 	bl	8001264 <HAL_ADC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007f2:	f000 f914 	bl	8000a1e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC1_Init+0xe0>)
 80007f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fa:	2306      	movs	r3, #6
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007fe:	2307      	movs	r3, #7
 8000800:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000802:	237f      	movs	r3, #127	; 0x7f
 8000804:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000806:	2304      	movs	r3, #4
 8000808:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0xd8>)
 8000814:	f000 ff0e 	bl	8001634 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800081e:	f000 f8fe 	bl	8000a1e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_ADC1_Init+0xe4>)
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000826:	230c      	movs	r3, #12
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0xd8>)
 8000830:	f000 ff00 	bl	8001634 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800083a:	f000 f8f0 	bl	8000a1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000198 	.word	0x20000198
 800084c:	50040000 	.word	0x50040000
 8000850:	25b00200 	.word	0x25b00200
 8000854:	2e300800 	.word	0x2e300800

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f003 f9f8 	bl	8003c90 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f8ba 	bl	8000a1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000f4 	.word	0x200000f4
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <MX_GPIO_Init+0xf0>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <MX_GPIO_Init+0xf0>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <MX_GPIO_Init+0xf0>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_GPIO_Init+0xf0>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <MX_GPIO_Init+0xf0>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_GPIO_Init+0xf0>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_GPIO_Init+0xf0>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <MX_GPIO_Init+0xf0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_GPIO_Init+0xf0>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MX_GPIO_Init+0xf0>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <MX_GPIO_Init+0xf0>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_GPIO_Init+0xf0>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_GPIO_Init+0xf4>)
 8000934:	f001 ff92 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7
                           PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 8000938:	f641 13aa 	movw	r3, #6570	; 0x19aa
 800093c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fe1a 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000954:	23f3      	movs	r3, #243	; 0xf3
 8000956:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000958:	2303      	movs	r3, #3
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_GPIO_Init+0xf4>)
 8000968:	f001 fe0e 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800096c:	2308      	movs	r3, #8
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <MX_GPIO_Init+0xf4>)
 8000984:	f001 fe00 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000988:	2308      	movs	r3, #8
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_GPIO_Init+0xf8>)
 800099c:	f001 fdf4 	bl	8002588 <HAL_GPIO_Init>

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400
 80009b0:	48001c00 	.word	0x48001c00

080009b4 <signal_with_diodes_ms>:
//			//do nothing
//		}
//}

void signal_with_diodes_ms(int num_of_loops, uint32_t ms)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	for(int i=0;i<num_of_loops;++i)
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	e012      	b.n	80009ea <signal_with_diodes_ms+0x36>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2108      	movs	r1, #8
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <signal_with_diodes_ms+0x48>)
 80009ca:	f001 ff47 	bl	800285c <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f000 fa5e 	bl	8000e90 <HAL_Delay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2108      	movs	r1, #8
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <signal_with_diodes_ms+0x48>)
 80009da:	f001 ff3f 	bl	800285c <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f000 fa56 	bl	8000e90 <HAL_Delay>
	for(int i=0;i<num_of_loops;++i)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbe8      	blt.n	80009c4 <signal_with_diodes_ms+0x10>
	}
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	48000400 	.word	0x48000400

08000a00 <signal_error>:

void signal_error(ERRORS err)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	signal_with_diodes_ms(err, 1000);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffcf 	bl	80009b4 <signal_with_diodes_ms>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	signal_with_diodes_ms(10,200);
  /* USER CODE END Error_Handler_Debug */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_MspInit+0x44>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x44>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6593      	str	r3, [r2, #88]	; 0x58
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <HAL_ADC_MspInit+0xcc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d14f      	bne.n	8000b36 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ac6:	2350      	movs	r3, #80	; 0x50
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aca:	230b      	movs	r3, #11
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 fd54 	bl	8002588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ae4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b10:	2220      	movs	r2, #32
 8000b12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b1c:	f001 fb3c 	bl	8002198 <HAL_DMA_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000b26:	f7ff ff7a 	bl	8000a1e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	50040000 	.word	0x50040000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	2000119c 	.word	0x2000119c
 8000b4c:	40020008 	.word	0x40020008

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <HAL_UART_MspInit+0xa0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d13a      	bne.n	8000be8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_UART_MspInit+0xa4>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_UART_MspInit+0xa4>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_UART_MspInit+0xa4>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0xa4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0xa4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0xa4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f001 fce2 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f001 fcd0 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40004400 	.word	0x40004400
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000bfc:	f002 fca8 	bl	8003550 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <BusFault_Handler+0x4>

08000c16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <UsageFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 f901 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <RTC_WKUP_IRQHandler+0x10>)
 8000c5a:	f002 ffe9 	bl	8003c30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200011e4 	.word	0x200011e4

08000c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Channel1_IRQHandler+0x10>)
 8000c6e:	f001 fbab 	bl	80023c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000119c 	.word	0x2000119c

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f003 fc44 	bl	8004538 <__errno>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20010000 	.word	0x20010000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	2000009c 	.word	0x2000009c
 8000ce4:	20001228 	.word	0x20001228

08000ce8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <SystemInit+0x64>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <SystemInit+0x64>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <SystemInit+0x68>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <SystemInit+0x68>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <SystemInit+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <SystemInit+0x68>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <SystemInit+0x68>)
 8000d14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <SystemInit+0x68>)
 8000d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <SystemInit+0x68>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <SystemInit+0x68>)
 8000d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <SystemInit+0x68>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SystemInit+0x64>)
 8000d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00
 8000d50:	40021000 	.word	0x40021000

08000d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d58:	f7ff ffc6 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
	ldr	r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <LoopForever+0x16>)
	cmp	r2, r3
 8000d7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f003 fbdf 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d86:	f7ff fbfb 	bl	8000580 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d90:	08004ed4 	.word	0x08004ed4
	ldr	r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d98:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000d9c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8000da0:	20001224 	.word	0x20001224

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>

08000da6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f001 f9bd 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f80e 	bl	8000dd8 <HAL_InitTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc8:	f7ff fe30 	bl	8000a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_InitTick+0x6c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d023      	beq.n	8000e34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_InitTick+0x70>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_InitTick+0x6c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 f9bb 	bl	800217e <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10f      	bne.n	8000e2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d809      	bhi.n	8000e28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f001 f993 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_InitTick+0x74>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e007      	b.n	8000e38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e004      	b.n	8000e38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e001      	b.n	8000e38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	20000008 	.word	0x20000008

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	2000121c 	.word	0x2000121c

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000121c 	.word	0x2000121c

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_Delay+0x40>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000000c 	.word	0x2000000c

08000ed4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3360      	adds	r3, #96	; 0x60
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <LL_ADC_SetOffset+0x44>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	03fff000 	.word	0x03fff000

08000f84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3360      	adds	r3, #96	; 0x60
 8000f92:	461a      	mov	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3360      	adds	r3, #96	; 0x60
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fda:	bf00      	nop
 8000fdc:	371c      	adds	r7, #28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3330      	adds	r3, #48	; 0x30
 800101c:	461a      	mov	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	4413      	add	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	211f      	movs	r1, #31
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0e9b      	lsrs	r3, r3, #26
 8001044:	f003 011f 	and.w	r1, r3, #31
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	431a      	orrs	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3314      	adds	r3, #20
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	0e5b      	lsrs	r3, r3, #25
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	0d1b      	lsrs	r3, r3, #20
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	2107      	movs	r1, #7
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	401a      	ands	r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	0d1b      	lsrs	r3, r3, #20
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0318 	and.w	r3, r3, #24
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010e0:	40d9      	lsrs	r1, r3
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	400b      	ands	r3, r1
 80010e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ea:	431a      	orrs	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	0007ffff 	.word	0x0007ffff

08001104 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001114:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6093      	str	r3, [r2, #8]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800113c:	d101      	bne.n	8001142 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800118c:	d101      	bne.n	8001192 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <LL_ADC_IsEnabled+0x18>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <LL_ADC_IsEnabled+0x1a>
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001202:	f043 0204 	orr.w	r2, r3, #4
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b04      	cmp	r3, #4
 8001228:	d101      	bne.n	800122e <LL_ADC_REG_IsConversionOngoing+0x18>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b08      	cmp	r3, #8
 800124e:	d101      	bne.n	8001254 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e12a      	b.n	80014d4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fbf1 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff3f 	bl	8001128 <LL_ADC_IsDeepPowerDownEnabled>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff25 	bl	8001104 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff5a 	bl	8001178 <LL_ADC_IsInternalRegulatorEnabled>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d113      	bne.n	80012f2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff3e 	bl	8001150 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_ADC_Init+0x278>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	4a81      	ldr	r2, [pc, #516]	; (80014e0 <HAL_ADC_Init+0x27c>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e4:	e002      	b.n	80012ec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f9      	bne.n	80012e6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff3e 	bl	8001178 <LL_ADC_IsInternalRegulatorEnabled>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff77 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 8001328:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 80c5 	bne.w	80014c2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80c1 	bne.w	80014c2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001344:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001348:	f043 0202 	orr.w	r2, r3, #2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff37 	bl	80011c8 <LL_ADC_IsEnabled>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10b      	bne.n	8001378 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001360:	4860      	ldr	r0, [pc, #384]	; (80014e4 <HAL_ADC_Init+0x280>)
 8001362:	f7ff ff31 	bl	80011c8 <LL_ADC_IsEnabled>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d105      	bne.n	8001378 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4619      	mov	r1, r3
 8001372:	485d      	ldr	r0, [pc, #372]	; (80014e8 <HAL_ADC_Init+0x284>)
 8001374:	f7ff fdae 	bl	8000ed4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e5b      	ldrb	r3, [r3, #25]
 800137c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001382:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001388:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800138e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	3b01      	subs	r3, #1
 80013ac:	045b      	lsls	r3, r3, #17
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b45      	ldr	r3, [pc, #276]	; (80014ec <HAL_ADC_Init+0x288>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff14 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 80013ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff21 	bl	800123c <LL_ADC_INJ_IsConversionOngoing>
 80013fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d13d      	bne.n	800147e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d13a      	bne.n	800147e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800140c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001414:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001424:	f023 0302 	bic.w	r3, r3, #2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	69b9      	ldr	r1, [r7, #24]
 800142e:	430b      	orrs	r3, r1
 8001430:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001438:	2b01      	cmp	r3, #1
 800143a:	d118      	bne.n	800146e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001452:	4311      	orrs	r1, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800145e:	430a      	orrs	r2, r1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	e007      	b.n	800147e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10c      	bne.n	80014a0 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f023 010f 	bic.w	r1, r3, #15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
 800149e:	e007      	b.n	80014b0 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 020f 	bic.w	r2, r2, #15
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f023 0303 	bic.w	r3, r3, #3
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
 80014c0:	e007      	b.n	80014d2 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f043 0210 	orr.w	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004
 80014e0:	053e2d63 	.word	0x053e2d63
 80014e4:	50040000 	.word	0x50040000
 80014e8:	50040300 	.word	0x50040300
 80014ec:	fff0c007 	.word	0xfff0c007

080014f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe88 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d167      	bne.n	80015dc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ADC_Start_DMA+0x2a>
 8001516:	2302      	movs	r3, #2
 8001518:	e063      	b.n	80015e2 <HAL_ADC_Start_DMA+0xf2>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fc64 	bl	8001df0 <ADC_Enable>
 8001528:	4603      	mov	r3, r0
 800152a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d14f      	bne.n	80015d2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f023 0206 	bic.w	r2, r3, #6
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	659a      	str	r2, [r3, #88]	; 0x58
 800155e:	e002      	b.n	8001566 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <HAL_ADC_Start_DMA+0xfc>)
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_ADC_Start_DMA+0x100>)
 8001574:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <HAL_ADC_Start_DMA+0x104>)
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	221c      	movs	r2, #28
 8001584:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0210 	orr.w	r2, r2, #16
 800159c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3340      	adds	r3, #64	; 0x40
 80015b8:	4619      	mov	r1, r3
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f000 fea3 	bl	8002308 <HAL_DMA_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fe0f 	bl	80011ee <LL_ADC_REG_StartConversion>
 80015d0:	e006      	b.n	80015e0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80015da:	e001      	b.n	80015e0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015dc:	2302      	movs	r3, #2
 80015de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	08001ea5 	.word	0x08001ea5
 80015f0:	08001f7d 	.word	0x08001f7d
 80015f4:	08001f99 	.word	0x08001f99

080015f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0b6      	sub	sp, #216	; 0xd8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x22>
 8001652:	2302      	movs	r3, #2
 8001654:	e3b8      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x794>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fdd7 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 839d 	bne.w	8001daa <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d824      	bhi.n	80016c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	3b02      	subs	r3, #2
 800167e:	2b03      	cmp	r3, #3
 8001680:	d81b      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x86>
 8001682:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <HAL_ADC_ConfigChannel+0x54>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	08001699 	.word	0x08001699
 800168c:	080016a1 	.word	0x080016a1
 8001690:	080016a9 	.word	0x080016a9
 8001694:	080016b1 	.word	0x080016b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	220c      	movs	r2, #12
 800169c:	605a      	str	r2, [r3, #4]
          break;
 800169e:	e011      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2212      	movs	r2, #18
 80016a4:	605a      	str	r2, [r3, #4]
          break;
 80016a6:	e00d      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2218      	movs	r2, #24
 80016ac:	605a      	str	r2, [r3, #4]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	605a      	str	r2, [r3, #4]
          break;
 80016b8:	e004      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2206      	movs	r2, #6
 80016be:	605a      	str	r2, [r3, #4]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f7ff fc9b 	bl	800100c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fd9b 	bl	8001216 <LL_ADC_REG_IsConversionOngoing>
 80016e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fda7 	bl	800123c <LL_ADC_INJ_IsConversionOngoing>
 80016ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 81a6 	bne.w	8001a48 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 81a1 	bne.w	8001a48 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	461a      	mov	r2, r3
 8001714:	f7ff fca6 	bl	8001064 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d00a      	beq.n	8001750 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6919      	ldr	r1, [r3, #16]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800174a:	f7ff fbf7 	bl	8000f3c <LL_ADC_SetOffset>
 800174e:	e17b      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc14 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_ADC_ConfigChannel+0x148>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fc09 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	e01e      	b.n	80017ba <HAL_ADC_ConfigChannel+0x186>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fbfe 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800179a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800179e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80017aa:	2320      	movs	r3, #32
 80017ac:	e004      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80017ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x19e>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0e9b      	lsrs	r3, r3, #26
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	e018      	b.n	8001804 <HAL_ADC_ConfigChannel+0x1d0>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e004      	b.n	8001804 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80017fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fbcd 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fbb1 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x20e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fba6 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	e01e      	b.n	8001880 <HAL_ADC_ConfigChannel+0x24c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb9b 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001870:	2320      	movs	r3, #32
 8001872:	e004      	b.n	800187e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x264>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	e018      	b.n	80018ca <HAL_ADC_ConfigChannel+0x296>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80018bc:	2320      	movs	r3, #32
 80018be:	e004      	b.n	80018ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80018c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb6a 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2102      	movs	r1, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fb4e 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x2d4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2102      	movs	r1, #2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fb43 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	f003 021f 	and.w	r2, r3, #31
 8001906:	e01e      	b.n	8001946 <HAL_ADC_ConfigChannel+0x312>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2102      	movs	r1, #2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fb38 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800192a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800192e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e004      	b.n	8001944 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800193a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_ADC_ConfigChannel+0x32a>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	e016      	b.n	800198c <HAL_ADC_ConfigChannel+0x358>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800197e:	2320      	movs	r3, #32
 8001980:	e004      	b.n	800198c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800198c:	429a      	cmp	r2, r3
 800198e:	d106      	bne.n	800199e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	2102      	movs	r1, #2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fb09 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2103      	movs	r1, #3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff faed 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x396>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2103      	movs	r1, #3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fae2 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	0e9b      	lsrs	r3, r3, #26
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	e017      	b.n	80019fa <HAL_ADC_ConfigChannel+0x3c6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2103      	movs	r1, #3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fad7 	bl	8000f84 <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80019ec:	2320      	movs	r3, #32
 80019ee:	e003      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80019f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x3de>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0e9b      	lsrs	r3, r3, #26
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	e011      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x402>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2103      	movs	r1, #3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fab4 	bl	8000fb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fbbb 	bl	80011c8 <LL_ADC_IsEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 813f 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6819      	ldr	r1, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7ff fb28 	bl	80010bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a8e      	ldr	r2, [pc, #568]	; (8001cac <HAL_ADC_ConfigChannel+0x678>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	f040 8130 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x46c>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e019      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x4a0>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ab0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	bf94      	ite	ls
 8001ace:	2301      	movls	r3, #1
 8001ad0:	2300      	movhi	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d079      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x4c0>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	3301      	adds	r3, #1
 8001aec:	069b      	lsls	r3, r3, #26
 8001aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af2:	e015      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x4ec>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e003      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x50c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	3301      	adds	r3, #1
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	e017      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x53c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e003      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	ea42 0103 	orr.w	r1, r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x562>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	051b      	lsls	r3, r3, #20
 8001b94:	e018      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x594>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	e080      	b.n	8001cce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x5b4>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	3301      	adds	r3, #1
 8001be0:	069b      	lsls	r3, r3, #26
 8001be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001be6:	e015      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x5e0>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	e003      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	069b      	lsls	r3, r3, #26
 8001c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x600>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	3301      	adds	r3, #1
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	e017      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x630>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	61fb      	str	r3, [r7, #28]
  return result;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e003      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	ea42 0103 	orr.w	r1, r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x65c>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	3b1e      	subs	r3, #30
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	e01d      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x698>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	613b      	str	r3, [r7, #16]
  return result;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d103      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e005      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x684>
 8001cac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1e      	subs	r3, #30
 8001cc6:	051b      	lsls	r3, r3, #20
 8001cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	6892      	ldr	r2, [r2, #8]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7ff f9c6 	bl	8001064 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_ADC_ConfigChannel+0x79c>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d06b      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce4:	483b      	ldr	r0, [pc, #236]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001ce6:	f7ff f91b 	bl	8000f20 <LL_ADC_GetCommonPathInternalCh>
 8001cea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a39      	ldr	r2, [pc, #228]	; (8001dd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d126      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d120      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <HAL_ADC_ConfigChannel+0x7a8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d156      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d16:	4619      	mov	r1, r3
 8001d18:	482e      	ldr	r0, [pc, #184]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001d1a:	f7ff f8ee 	bl	8000efa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	099a      	lsrs	r2, r3, #6
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d44:	e03a      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d113      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x744>
 8001d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10d      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_ADC_ConfigChannel+0x7a8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001d72:	f7ff f8c2 	bl	8000efa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d76:	e021      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_ADC_ConfigChannel+0x7b8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d11c      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_ADC_ConfigChannel+0x7a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da0:	4619      	mov	r1, r3
 8001da2:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001da4:	f7ff f8a9 	bl	8000efa <LL_ADC_SetCommonPathInternalCh>
 8001da8:	e008      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0220 	orr.w	r2, r3, #32
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	37d8      	adds	r7, #216	; 0xd8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	80080000 	.word	0x80080000
 8001dd4:	50040300 	.word	0x50040300
 8001dd8:	c7520000 	.word	0xc7520000
 8001ddc:	50040000 	.word	0x50040000
 8001de0:	20000004 	.word	0x20000004
 8001de4:	053e2d63 	.word	0x053e2d63
 8001de8:	cb840000 	.word	0xcb840000
 8001dec:	80000001 	.word	0x80000001

08001df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f9e3 	bl	80011c8 <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d146      	bne.n	8001e96 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <ADC_Enable+0xb0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f043 0210 	orr.w	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e032      	b.n	8001e98 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f9b2 	bl	80011a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff f81c 	bl	8000e78 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e42:	e021      	b.n	8001e88 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f9bd 	bl	80011c8 <LL_ADC_IsEnabled>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f9a1 	bl	80011a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e5e:	f7ff f80b 	bl	8000e78 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d90d      	bls.n	8001e88 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e007      	b.n	8001e98 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d1d6      	bne.n	8001e44 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	8000003f 	.word	0x8000003f

08001ea4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d14b      	bne.n	8001f56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d021      	beq.n	8001f1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f882 	bl	8000fe6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d032      	beq.n	8001f4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d12b      	bne.n	8001f4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11f      	bne.n	8001f4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
 8001f1a:	e018      	b.n	8001f4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d111      	bne.n	8001f4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fb52 	bl	80015f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f54:	e00e      	b.n	8001f74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fb5c 	bl	8001620 <HAL_ADC_ErrorCallback>
}
 8001f68:	e004      	b.n	8001f74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fb3e 	bl	800160c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff fb2e 	bl	8001620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff47 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff5c 	bl	8002014 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffb0 	bl	80020ec <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e098      	b.n	80022dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <HAL_DMA_Init+0x150>)
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d80f      	bhi.n	80021d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_DMA_Init+0x154>)
 80021be:	4413      	add	r3, r2
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_DMA_Init+0x158>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	009a      	lsls	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <HAL_DMA_Init+0x15c>)
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
 80021d4:	e00e      	b.n	80021f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_DMA_Init+0x160>)
 80021de:	4413      	add	r3, r2
 80021e0:	4a43      	ldr	r2, [pc, #268]	; (80022f0 <HAL_DMA_Init+0x158>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	009a      	lsls	r2, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_DMA_Init+0x164>)
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800224e:	d039      	beq.n	80022c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_DMA_Init+0x15c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11a      	bne.n	8002290 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_DMA_Init+0x168>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f003 031c 	and.w	r3, r3, #28
 8002266:	210f      	movs	r1, #15
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	4924      	ldr	r1, [pc, #144]	; (8002300 <HAL_DMA_Init+0x168>)
 8002270:	4013      	ands	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_DMA_Init+0x168>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f003 031c 	and.w	r3, r3, #28
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	491d      	ldr	r1, [pc, #116]	; (8002300 <HAL_DMA_Init+0x168>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
 800228e:	e019      	b.n	80022c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_DMA_Init+0x16c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f003 031c 	and.w	r3, r3, #28
 800229c:	210f      	movs	r1, #15
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4917      	ldr	r1, [pc, #92]	; (8002304 <HAL_DMA_Init+0x16c>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_DMA_Init+0x16c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f003 031c 	and.w	r3, r3, #28
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	4911      	ldr	r1, [pc, #68]	; (8002304 <HAL_DMA_Init+0x16c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40020407 	.word	0x40020407
 80022ec:	bffdfff8 	.word	0xbffdfff8
 80022f0:	cccccccd 	.word	0xcccccccd
 80022f4:	40020000 	.word	0x40020000
 80022f8:	bffdfbf8 	.word	0xbffdfbf8
 80022fc:	40020400 	.word	0x40020400
 8002300:	400200a8 	.word	0x400200a8
 8002304:	400204a8 	.word	0x400204a8

08002308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Start_IT+0x20>
 8002324:	2302      	movs	r3, #2
 8002326:	e04b      	b.n	80023c0 <HAL_DMA_Start_IT+0xb8>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d13a      	bne.n	80023b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f8e0 	bl	8002526 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 020e 	orr.w	r2, r2, #14
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e00f      	b.n	80023a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 020a 	orr.w	r2, r2, #10
 800239e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e005      	b.n	80023be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f003 031c 	and.w	r3, r3, #28
 80023e8:	2204      	movs	r2, #4
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d026      	beq.n	8002442 <HAL_DMA_IRQHandler+0x7a>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d021      	beq.n	8002442 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0204 	bic.w	r2, r2, #4
 800241a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f003 021c 	and.w	r2, r3, #28
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2104      	movs	r1, #4
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d071      	beq.n	800251c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002440:	e06c      	b.n	800251c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f003 031c 	and.w	r3, r3, #28
 800244a:	2202      	movs	r2, #2
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d02e      	beq.n	80024b4 <HAL_DMA_IRQHandler+0xec>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d029      	beq.n	80024b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 020a 	bic.w	r2, r2, #10
 800247c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f003 021c 	and.w	r2, r3, #28
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2102      	movs	r1, #2
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d038      	beq.n	800251c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024b2:	e033      	b.n	800251c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f003 031c 	and.w	r3, r3, #28
 80024bc:	2208      	movs	r2, #8
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02a      	beq.n	800251e <HAL_DMA_IRQHandler+0x156>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d025      	beq.n	800251e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 020e 	bic.w	r2, r2, #14
 80024e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f003 021c 	and.w	r2, r3, #28
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800251c:	bf00      	nop
 800251e:	bf00      	nop
}
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f003 021c 	and.w	r2, r3, #28
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d108      	bne.n	800256a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002568:	e007      	b.n	800257a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	60da      	str	r2, [r3, #12]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	e148      	b.n	800282a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 813a 	beq.w	8002824 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d00b      	beq.n	80025d0 <HAL_GPIO_Init+0x48>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d007      	beq.n	80025d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b12      	cmp	r3, #18
 80025ce:	d130      	bne.n	8002632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002606:	2201      	movs	r2, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0201 	and.w	r2, r3, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0xea>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b12      	cmp	r3, #18
 8002670:	d123      	bne.n	80026ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	6939      	ldr	r1, [r7, #16]
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8094 	beq.w	8002824 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_GPIO_Init+0x2c0>)
 80026fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002700:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_GPIO_Init+0x2c0>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6613      	str	r3, [r2, #96]	; 0x60
 8002708:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <HAL_GPIO_Init+0x2c0>)
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002714:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_GPIO_Init+0x2c4>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800273e:	d00d      	beq.n	800275c <HAL_GPIO_Init+0x1d4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a43      	ldr	r2, [pc, #268]	; (8002850 <HAL_GPIO_Init+0x2c8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x1d0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a42      	ldr	r2, [pc, #264]	; (8002854 <HAL_GPIO_Init+0x2cc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_GPIO_Init+0x1cc>
 8002750:	2302      	movs	r3, #2
 8002752:	e004      	b.n	800275e <HAL_GPIO_Init+0x1d6>
 8002754:	2307      	movs	r3, #7
 8002756:	e002      	b.n	800275e <HAL_GPIO_Init+0x1d6>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_GPIO_Init+0x1d6>
 800275c:	2300      	movs	r3, #0
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	f002 0203 	and.w	r2, r2, #3
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	4093      	lsls	r3, r2
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800276e:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_GPIO_Init+0x2c4>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ca:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f aeaf 	bne.w	8002598 <HAL_GPIO_Init+0x10>
  }
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000800 	.word	0x48000800
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43d9      	mvns	r1, r3
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	400b      	ands	r3, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40007000 	.word	0x40007000

080028fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290a:	d130      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800290c:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002918:	d038      	beq.n	800298c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2232      	movs	r2, #50	; 0x32
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	3301      	adds	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002940:	e002      	b.n	8002948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b01      	subs	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d102      	bne.n	800295c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f2      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d110      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e00f      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d007      	beq.n	800298c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002984:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40007000 	.word	0x40007000
 80029a0:	20000004 	.word	0x20000004
 80029a4:	431bde83 	.word	0x431bde83

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f000 bc11 	b.w	80031de <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029bc:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c6:	4b9e      	ldr	r3, [pc, #632]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80e4 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4c>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	f040 808b 	bne.w	8002b02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	f040 8087 	bne.w	8002b02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f4:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x64>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e3e8      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_RCC_OscConfig+0x7e>
 8002a1c:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a24:	e005      	b.n	8002a32 <HAL_RCC_OscConfig+0x8a>
 8002a26:	4b86      	ldr	r3, [pc, #536]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d223      	bcs.n	8002a7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fda4 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e3c9      	b.n	80031de <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4a:	4b7d      	ldr	r3, [pc, #500]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7c      	ldr	r2, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a50:	f043 0308 	orr.w	r3, r3, #8
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b7a      	ldr	r3, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4977      	ldr	r1, [pc, #476]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a68:	4b75      	ldr	r3, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	4972      	ldr	r1, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e025      	b.n	8002aca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a7e:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6f      	ldr	r2, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	496a      	ldr	r1, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	4965      	ldr	r1, [pc, #404]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fd64 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e389      	b.n	80031de <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aca:	f000 fc6f 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	4a5a      	ldr	r2, [pc, #360]	; (8002c44 <HAL_RCC_OscConfig+0x29c>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ae6:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x2a0>)
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aea:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_RCC_OscConfig+0x2a4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f972 	bl	8000dd8 <HAL_InitTick>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d052      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	e36d      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d032      	beq.n	8002b70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b0a:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b16:	f7fe f9af 	bl	8000e78 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1e:	f7fe f9ab 	bl	8000e78 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e356      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	493a      	ldr	r1, [pc, #232]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4935      	ldr	r1, [pc, #212]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
 8002b6e:	e01a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b70:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe f97c 	bl	8000e78 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b84:	f7fe f978 	bl	8000e78 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e323      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b96:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1dc>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d073      	beq.n	8002c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x21c>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d10e      	bne.n	8002bdc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d063      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d15f      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e300      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0x288>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x270>
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0x288>
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f91e 	bl	8000e78 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	e010      	b.n	8002c62 <HAL_RCC_OscConfig+0x2ba>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	08004e48 	.word	0x08004e48
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe f912 	bl	8000e78 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e2bd      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	4baf      	ldr	r3, [pc, #700]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2a8>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f902 	bl	8000e78 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe f8fe 	bl	8000e78 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2a9      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8a:	4ba5      	ldr	r3, [pc, #660]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2d0>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d060      	beq.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x310>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d116      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb8:	4b99      	ldr	r3, [pc, #612]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x328>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e286      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b93      	ldr	r3, [pc, #588]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	4990      	ldr	r1, [pc, #576]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	e040      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d023      	beq.n	8002d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cee:	4b8c      	ldr	r3, [pc, #560]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a8b      	ldr	r2, [pc, #556]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe f8bd 	bl	8000e78 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d02:	f7fe f8b9 	bl	8000e78 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e264      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d14:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	497c      	ldr	r1, [pc, #496]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
 8002d34:	e018      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d36:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a79      	ldr	r2, [pc, #484]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe f899 	bl	8000e78 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe f895 	bl	8000e78 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e240      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d5c:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	4a67      	ldr	r2, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f874 	bl	8000e78 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe f870 	bl	8000e78 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e21b      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da6:	4b5e      	ldr	r3, [pc, #376]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCC_OscConfig+0x3ec>
 8002db4:	e01b      	b.n	8002dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db6:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f857 	bl	8000e78 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe f853 	bl	8000e78 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1fe      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ef      	bne.n	8002dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e00:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	; 0x58
 8002e18:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d118      	bne.n	8002e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e40:	f7fe f81a 	bl	8000e78 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe f816 	bl	8000e78 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1c1      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d108      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4d8>
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7e:	e024      	b.n	8002eca <HAL_RCC_OscConfig+0x522>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d110      	bne.n	8002eaa <HAL_RCC_OscConfig+0x502>
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea8:	e00f      	b.n	8002eca <HAL_RCC_OscConfig+0x522>
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fd ffd1 	bl	8000e78 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fd ffcd 	bl	8000e78 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e176      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ed      	beq.n	8002eda <HAL_RCC_OscConfig+0x532>
 8002efe:	e01a      	b.n	8002f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fd ffba 	bl	8000e78 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f06:	e00f      	b.n	8002f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fd ffb6 	bl	8000e78 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d906      	bls.n	8002f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e15f      	b.n	80031de <HAL_RCC_OscConfig+0x836>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f28:	4baa      	ldr	r3, [pc, #680]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e8      	bne.n	8002f08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4ba5      	ldr	r3, [pc, #660]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4aa4      	ldr	r2, [pc, #656]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d03c      	beq.n	8002fce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01c      	beq.n	8002f96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f5c:	4b9d      	ldr	r3, [pc, #628]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f62:	4a9c      	ldr	r2, [pc, #624]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fd ff84 	bl	8000e78 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f74:	f7fd ff80 	bl	8000e78 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e12b      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f86:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ef      	beq.n	8002f74 <HAL_RCC_OscConfig+0x5cc>
 8002f94:	e01b      	b.n	8002fce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f96:	4b8f      	ldr	r3, [pc, #572]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9c:	4a8d      	ldr	r2, [pc, #564]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fd ff67 	bl	8000e78 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fae:	f7fd ff63 	bl	8000e78 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e10e      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc0:	4b84      	ldr	r3, [pc, #528]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ef      	bne.n	8002fae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8102 	beq.w	80031dc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	f040 80c5 	bne.w	800316c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 0203 	and.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d12c      	bne.n	8003050 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	3b01      	subs	r3, #1
 8003002:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d123      	bne.n	8003050 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003012:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d11b      	bne.n	8003050 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d113      	bne.n	8003050 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d109      	bne.n	8003050 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d067      	beq.n	8003120 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d062      	beq.n	800311c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003056:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0bb      	b.n	80031de <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5a      	ldr	r2, [pc, #360]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800306c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003070:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003072:	f7fd ff01 	bl	8000e78 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7fd fefd 	bl	8000e78 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0a8      	b.n	80031de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308c:	4b51      	ldr	r3, [pc, #324]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	4b4e      	ldr	r3, [pc, #312]	; (80031d8 <HAL_RCC_OscConfig+0x830>)
 800309e:	4013      	ands	r3, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b2:	0212      	lsls	r2, r2, #8
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ba:	0852      	lsrs	r2, r2, #1
 80030bc:	3a01      	subs	r2, #1
 80030be:	0552      	lsls	r2, r2, #21
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c6:	0852      	lsrs	r2, r2, #1
 80030c8:	3a01      	subs	r2, #1
 80030ca:	0652      	lsls	r2, r2, #25
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d2:	06d2      	lsls	r2, r2, #27
 80030d4:	430a      	orrs	r2, r1
 80030d6:	493f      	ldr	r1, [pc, #252]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030dc:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3c      	ldr	r2, [pc, #240]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f4:	f7fd fec0 	bl	8000e78 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd febc 	bl	8000e78 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e067      	b.n	80031de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311a:	e05f      	b.n	80031dc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e05e      	b.n	80031de <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d157      	bne.n	80031dc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003144:	f7fd fe98 	bl	8000e78 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fd fe94 	bl	8000e78 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03f      	b.n	80031de <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x7a4>
 800316a:	e037      	b.n	80031dc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d02d      	beq.n	80031ce <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003190:	f023 0303 	bic.w	r3, r3, #3
 8003194:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 800319c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fd fe67 	bl	8000e78 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fd fe63 	bl	8000e78 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e00e      	b.n	80031de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_OscConfig+0x82c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x806>
 80031cc:	e006      	b.n	80031dc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e005      	b.n	80031de <HAL_RCC_OscConfig+0x836>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0c8      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d910      	bls.n	800322c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 0207 	bic.w	r2, r3, #7
 8003212:	4961      	ldr	r1, [pc, #388]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b0      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d04c      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d107      	bne.n	8003250 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003240:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d121      	bne.n	8003290 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e09e      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d107      	bne.n	8003268 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d115      	bne.n	8003290 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e092      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003270:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e086      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003280:	4b46      	ldr	r3, [pc, #280]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e07e      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003290:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 0203 	bic.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	493f      	ldr	r1, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a2:	f7fd fde9 	bl	8000e78 <HAL_GetTick>
 80032a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032aa:	f7fd fde5 	bl	8000e78 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e066      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 020c 	and.w	r2, r3, #12
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d1eb      	bne.n	80032aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	4b2f      	ldr	r3, [pc, #188]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	492c      	ldr	r1, [pc, #176]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d210      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 0207 	bic.w	r2, r3, #7
 8003306:	4924      	ldr	r1, [pc, #144]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e036      	b.n	800338e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4918      	ldr	r1, [pc, #96]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4910      	ldr	r1, [pc, #64]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800335e:	f000 f825 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8003362:	4601      	mov	r1, r0
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_RCC_ClockConfig+0x1b4>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	5cd3      	ldrb	r3, [r2, r3]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	fa21 f303 	lsr.w	r3, r1, r3
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fd28 	bl	8000dd8 <HAL_InitTick>
 8003388:	4603      	mov	r3, r0
 800338a:	72fb      	strb	r3, [r7, #11]

  return status;
 800338c:	7afb      	ldrb	r3, [r7, #11]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
 80033a0:	08004e48 	.word	0x08004e48
 80033a4:	20000004 	.word	0x20000004
 80033a8:	20000008 	.word	0x20000008

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c4:	4b3a      	ldr	r3, [pc, #232]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d121      	bne.n	800341e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d11e      	bne.n	800341e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033e0:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033ec:	4b30      	ldr	r3, [pc, #192]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e005      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033fc:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d102      	bne.n	800342a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	e004      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d101      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003432:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d133      	bne.n	80034a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xa4>
 800344a:	2b03      	cmp	r3, #3
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0xaa>
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003452:	617b      	str	r3, [r7, #20]
      break;
 8003454:	e005      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003456:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	617b      	str	r3, [r7, #20]
      break;
 8003460:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	3301      	adds	r3, #1
 800346e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	fb02 f203 	mul.w	r2, r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	0e5b      	lsrs	r3, r3, #25
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034a2:	69bb      	ldr	r3, [r7, #24]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3724      	adds	r7, #36	; 0x24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08004e60 	.word	0x08004e60
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4601      	mov	r1, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	08004e58 	.word	0x08004e58

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003508:	f7ff ffda 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 800350c:	4601      	mov	r1, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0adb      	lsrs	r3, r3, #11
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_RCC_GetPCLK2Freq+0x28>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	08004e58 	.word	0x08004e58

08003530 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_EnableCSS+0x1c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_RCC_EnableCSS+0x1c>)
 800353a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003560:	d105      	bne.n	800356e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003562:	f000 f809 	bl	8003578 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003566:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800356c:	621a      	str	r2, [r3, #32]
  }
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035a0:	f7ff f99e 	bl	80028e0 <HAL_PWREx_GetVoltageRange>
 80035a4:	6178      	str	r0, [r7, #20]
 80035a6:	e014      	b.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4a24      	ldr	r2, [pc, #144]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035c0:	f7ff f98e 	bl	80028e0 <HAL_PWREx_GetVoltageRange>
 80035c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d10b      	bne.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d919      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2ba0      	cmp	r3, #160	; 0xa0
 80035e4:	d902      	bls.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e6:	2302      	movs	r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e013      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035ec:	2301      	movs	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e010      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d902      	bls.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035f8:	2303      	movs	r3, #3
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e00a      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d102      	bne.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003604:	2302      	movs	r3, #2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e004      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b70      	cmp	r3, #112	; 0x70
 800360e:	d101      	bne.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003610:	2301      	movs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	4909      	ldr	r1, [pc, #36]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	40022000 	.word	0x40022000

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003650:	2300      	movs	r3, #0
 8003652:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003654:	2300      	movs	r3, #0
 8003656:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800366c:	d005      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800366e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003672:	d015      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003678:	e00f      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800367a:	4bac      	ldr	r3, [pc, #688]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4aab      	ldr	r2, [pc, #684]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003686:	e00c      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f9de 	bl	8003a50 <RCCEx_PLLSAI1_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003698:	e003      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	74fb      	strb	r3, [r7, #19]
      break;
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80036a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a8:	4ba0      	ldr	r3, [pc, #640]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	499d      	ldr	r1, [pc, #628]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036be:	e001      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8099 	beq.w	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036d6:	4b95      	ldr	r3, [pc, #596]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	4b8f      	ldr	r3, [pc, #572]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	4a8e      	ldr	r2, [pc, #568]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6593      	str	r3, [r2, #88]	; 0x58
 80036f8:	4b8c      	ldr	r3, [pc, #560]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003704:	2301      	movs	r3, #1
 8003706:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003708:	4b89      	ldr	r3, [pc, #548]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a88      	ldr	r2, [pc, #544]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003714:	f7fd fbb0 	bl	8000e78 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800371a:	e009      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd fbac 	bl	8000e78 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d902      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	74fb      	strb	r3, [r7, #19]
        break;
 800372e:	e005      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003730:	4b7f      	ldr	r3, [pc, #508]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ef      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d155      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003742:	4b7a      	ldr	r3, [pc, #488]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01e      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	429a      	cmp	r2, r3
 800375c:	d019      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800375e:	4b73      	ldr	r3, [pc, #460]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800376a:	4b70      	ldr	r3, [pc, #448]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	4a6e      	ldr	r2, [pc, #440]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800377a:	4b6c      	ldr	r3, [pc, #432]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	4a6a      	ldr	r2, [pc, #424]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800378a:	4a68      	ldr	r2, [pc, #416]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d016      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fd fb6c 	bl	8000e78 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a2:	e00b      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fd fb68 	bl	8000e78 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d902      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	74fb      	strb	r3, [r7, #19]
            break;
 80037ba:	e006      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037bc:	4b5b      	ldr	r3, [pc, #364]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ec      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d0:	4b56      	ldr	r3, [pc, #344]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	4953      	ldr	r1, [pc, #332]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037e6:	e004      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
 80037ec:	e001      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7c7b      	ldrb	r3, [r7, #17]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a4b      	ldr	r2, [pc, #300]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4943      	ldr	r1, [pc, #268]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003832:	4b3e      	ldr	r3, [pc, #248]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 020c 	bic.w	r2, r3, #12
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	493a      	ldr	r1, [pc, #232]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	4932      	ldr	r1, [pc, #200]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	4929      	ldr	r1, [pc, #164]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4921      	ldr	r1, [pc, #132]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4918      	ldr	r1, [pc, #96]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4910      	ldr	r1, [pc, #64]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02c      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391c:	d10a      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391e:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4a02      	ldr	r2, [pc, #8]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003928:	60d3      	str	r3, [r2, #12]
 800392a:	e015      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f883 	bl	8003a50 <RCCEx_PLLSAI1_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d028      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	492d      	ldr	r1, [pc, #180]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003982:	d106      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399a:	d10c      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f854 	bl	8003a50 <RCCEx_PLLSAI1_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01c      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	4915      	ldr	r1, [pc, #84]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f831 	bl	8003a50 <RCCEx_PLLSAI1_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCCEx_EnableLSECSS+0x20>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_RCCEx_EnableLSECSS+0x20>)
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000

08003a50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a5e:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0203 	and.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d10d      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
       ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d044      	beq.n	8003b20 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e041      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d00c      	beq.n	8003abe <RCCEx_PLLSAI1_Config+0x6e>
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d013      	beq.n	8003ad0 <RCCEx_PLLSAI1_Config+0x80>
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d120      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aac:	4b5f      	ldr	r3, [pc, #380]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11d      	bne.n	8003af4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e01a      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ace:	e013      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ad0:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aec:	e006      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      break;
 8003af2:	e004      	b.n	8003afe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003afc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b04:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	4944      	ldr	r1, [pc, #272]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d17c      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b32:	f7fd f9a1 	bl	8000e78 <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b38:	e009      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b3a:	f7fd f99d 	bl	8000e78 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d902      	bls.n	8003b4e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b4c:	e005      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ef      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d15f      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d110      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	0211      	lsls	r1, r2, #8
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68d2      	ldr	r2, [r2, #12]
 8003b7c:	06d2      	lsls	r2, r2, #27
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	492a      	ldr	r1, [pc, #168]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
 8003b86:	e027      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d112      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	0211      	lsls	r1, r2, #8
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6912      	ldr	r2, [r2, #16]
 8003ba4:	0852      	lsrs	r2, r2, #1
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	0552      	lsls	r2, r2, #21
 8003baa:	430a      	orrs	r2, r1
 8003bac:	491f      	ldr	r1, [pc, #124]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	610b      	str	r3, [r1, #16]
 8003bb2:	e011      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6892      	ldr	r2, [r2, #8]
 8003bc4:	0211      	lsls	r1, r2, #8
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6952      	ldr	r2, [r2, #20]
 8003bca:	0852      	lsrs	r2, r2, #1
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	0652      	lsls	r2, r2, #25
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4916      	ldr	r1, [pc, #88]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd f948 	bl	8000e78 <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bea:	e009      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bec:	f7fd f944 	bl	8000e78 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfe:	e005      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	4904      	ldr	r1, [pc, #16]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000

08003c30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003c3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c3e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003c5e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f80b 	bl	8003c7c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40010400 	.word	0x40010400

08003c7c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e040      	b.n	8003d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc ff4c 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8c0 	bl	8003e54 <UART_SetConfig>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fac4 	bl	8004274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb4b 	bl	80043b8 <UART_CheckIdleState>
 8003d22:	4603      	mov	r3, r0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 8081 	bne.w	8003e48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_Transmit+0x26>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e079      	b.n	8003e4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x38>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e072      	b.n	8003e4a <HAL_UART_Transmit+0x11e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2221      	movs	r2, #33	; 0x21
 8003d76:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d78:	f7fd f87e 	bl	8000e78 <HAL_GetTick>
 8003d7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	d108      	bne.n	8003daa <HAL_UART_Transmit+0x7e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e003      	b.n	8003db2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003dba:	e02d      	b.n	8003e18 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fb3b 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e039      	b.n	8003e4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de8:	b292      	uxth	r2, r2
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	3302      	adds	r3, #2
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e008      	b.n	8003e06 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3301      	adds	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1cb      	bne.n	8003dbc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2140      	movs	r1, #64	; 0x40
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fb07 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e005      	b.n	8003e4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4bb0      	ldr	r3, [pc, #704]	; (8004144 <UART_SetConfig+0x2f0>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	69f9      	ldr	r1, [r7, #28]
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4aa6      	ldr	r2, [pc, #664]	; (8004148 <UART_SetConfig+0x2f4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a9d      	ldr	r2, [pc, #628]	; (800414c <UART_SetConfig+0x2f8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d121      	bne.n	8003f20 <UART_SetConfig+0xcc>
 8003edc:	4b9c      	ldr	r3, [pc, #624]	; (8004150 <UART_SetConfig+0x2fc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d816      	bhi.n	8003f18 <UART_SetConfig+0xc4>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x9c>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f0d 	.word	0x08003f0d
 8003ef8:	08003f07 	.word	0x08003f07
 8003efc:	08003f13 	.word	0x08003f13
 8003f00:	2301      	movs	r3, #1
 8003f02:	76fb      	strb	r3, [r7, #27]
 8003f04:	e072      	b.n	8003fec <UART_SetConfig+0x198>
 8003f06:	2302      	movs	r3, #2
 8003f08:	76fb      	strb	r3, [r7, #27]
 8003f0a:	e06f      	b.n	8003fec <UART_SetConfig+0x198>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	76fb      	strb	r3, [r7, #27]
 8003f10:	e06c      	b.n	8003fec <UART_SetConfig+0x198>
 8003f12:	2308      	movs	r3, #8
 8003f14:	76fb      	strb	r3, [r7, #27]
 8003f16:	e069      	b.n	8003fec <UART_SetConfig+0x198>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	bf00      	nop
 8003f1e:	e065      	b.n	8003fec <UART_SetConfig+0x198>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a8b      	ldr	r2, [pc, #556]	; (8004154 <UART_SetConfig+0x300>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d134      	bne.n	8003f94 <UART_SetConfig+0x140>
 8003f2a:	4b89      	ldr	r3, [pc, #548]	; (8004150 <UART_SetConfig+0x2fc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	d829      	bhi.n	8003f8c <UART_SetConfig+0x138>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0xec>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f8d 	.word	0x08003f8d
 8003f48:	08003f8d 	.word	0x08003f8d
 8003f4c:	08003f8d 	.word	0x08003f8d
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f8d 	.word	0x08003f8d
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08003f7b 	.word	0x08003f7b
 8003f64:	08003f8d 	.word	0x08003f8d
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f8d 	.word	0x08003f8d
 8003f70:	08003f87 	.word	0x08003f87
 8003f74:	2300      	movs	r3, #0
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e038      	b.n	8003fec <UART_SetConfig+0x198>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e035      	b.n	8003fec <UART_SetConfig+0x198>
 8003f80:	2304      	movs	r3, #4
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	e032      	b.n	8003fec <UART_SetConfig+0x198>
 8003f86:	2308      	movs	r3, #8
 8003f88:	76fb      	strb	r3, [r7, #27]
 8003f8a:	e02f      	b.n	8003fec <UART_SetConfig+0x198>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	76fb      	strb	r3, [r7, #27]
 8003f90:	bf00      	nop
 8003f92:	e02b      	b.n	8003fec <UART_SetConfig+0x198>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6b      	ldr	r2, [pc, #428]	; (8004148 <UART_SetConfig+0x2f4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d124      	bne.n	8003fe8 <UART_SetConfig+0x194>
 8003f9e:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <UART_SetConfig+0x2fc>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d012      	beq.n	8003fd4 <UART_SetConfig+0x180>
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d802      	bhi.n	8003fba <UART_SetConfig+0x166>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <UART_SetConfig+0x174>
 8003fb8:	e012      	b.n	8003fe0 <UART_SetConfig+0x18c>
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbe:	d006      	beq.n	8003fce <UART_SetConfig+0x17a>
 8003fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc4:	d009      	beq.n	8003fda <UART_SetConfig+0x186>
 8003fc6:	e00b      	b.n	8003fe0 <UART_SetConfig+0x18c>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	e00e      	b.n	8003fec <UART_SetConfig+0x198>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e00b      	b.n	8003fec <UART_SetConfig+0x198>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x198>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e005      	b.n	8003fec <UART_SetConfig+0x198>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	bf00      	nop
 8003fe6:	e001      	b.n	8003fec <UART_SetConfig+0x198>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a55      	ldr	r2, [pc, #340]	; (8004148 <UART_SetConfig+0x2f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d174      	bne.n	80040e0 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff6:	7efb      	ldrb	r3, [r7, #27]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d824      	bhi.n	8004046 <UART_SetConfig+0x1f2>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x1b0>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004047 	.word	0x08004047
 800400c:	08004031 	.word	0x08004031
 8004010:	08004047 	.word	0x08004047
 8004014:	08004037 	.word	0x08004037
 8004018:	08004047 	.word	0x08004047
 800401c:	08004047 	.word	0x08004047
 8004020:	08004047 	.word	0x08004047
 8004024:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff fa56 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 800402c:	6178      	str	r0, [r7, #20]
        break;
 800402e:	e00f      	b.n	8004050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b49      	ldr	r3, [pc, #292]	; (8004158 <UART_SetConfig+0x304>)
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	e00c      	b.n	8004050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7ff f9b9 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800403a:	6178      	str	r0, [r7, #20]
        break;
 800403c:	e008      	b.n	8004050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	617b      	str	r3, [r7, #20]
        break;
 8004044:	e004      	b.n	8004050 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	76bb      	strb	r3, [r7, #26]
        break;
 800404e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8100 	beq.w	8004258 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	d305      	bcc.n	8004074 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	76bb      	strb	r3, [r7, #26]
 8004078:	e0ee      	b.n	8004258 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4619      	mov	r1, r3
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	0214      	lsls	r4, r2, #8
 800408c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004090:	020b      	lsls	r3, r1, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6852      	ldr	r2, [r2, #4]
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	4611      	mov	r1, r2
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	eb13 0b01 	adds.w	fp, r3, r1
 80040a2:	eb44 0c02 	adc.w	ip, r4, r2
 80040a6:	4658      	mov	r0, fp
 80040a8:	4661      	mov	r1, ip
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	f7fc f8e3 	bl	8000280 <__aeabi_uldivmod>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c6:	d308      	bcc.n	80040da <UART_SetConfig+0x286>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ce:	d204      	bcs.n	80040da <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e0be      	b.n	8004258 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e0bb      	b.n	8004258 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d169      	bne.n	80041be <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d835      	bhi.n	800415c <UART_SetConfig+0x308>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x2a4>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004133 	.word	0x08004133
 800410c:	0800415d 	.word	0x0800415d
 8004110:	0800415d 	.word	0x0800415d
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7ff f9dc 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004120:	6178      	str	r0, [r7, #20]
        break;
 8004122:	e020      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff f9ee 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8004128:	6178      	str	r0, [r7, #20]
        break;
 800412a:	e01c      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <UART_SetConfig+0x304>)
 800412e:	617b      	str	r3, [r7, #20]
        break;
 8004130:	e019      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7ff f93b 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8004136:	6178      	str	r0, [r7, #20]
        break;
 8004138:	e015      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	617b      	str	r3, [r7, #20]
        break;
 8004140:	e011      	b.n	8004166 <UART_SetConfig+0x312>
 8004142:	bf00      	nop
 8004144:	efff69f3 	.word	0xefff69f3
 8004148:	40008000 	.word	0x40008000
 800414c:	40013800 	.word	0x40013800
 8004150:	40021000 	.word	0x40021000
 8004154:	40004400 	.word	0x40004400
 8004158:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	76bb      	strb	r3, [r7, #26]
        break;
 8004164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d075      	beq.n	8004258 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005a      	lsls	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	441a      	add	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d916      	bls.n	80041b8 <UART_SetConfig+0x364>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d212      	bcs.n	80041b8 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f023 030f 	bic.w	r3, r3, #15
 800419a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	89fa      	ldrh	r2, [r7, #14]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e04f      	b.n	8004258 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	76bb      	strb	r3, [r7, #26]
 80041bc:	e04c      	b.n	8004258 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041be:	7efb      	ldrb	r3, [r7, #27]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d828      	bhi.n	8004216 <UART_SetConfig+0x3c2>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x378>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7ff f972 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 80041f4:	6178      	str	r0, [r7, #20]
        break;
 80041f6:	e013      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7ff f984 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 80041fc:	6178      	str	r0, [r7, #20]
        break;
 80041fe:	e00f      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <UART_SetConfig+0x41c>)
 8004202:	617b      	str	r3, [r7, #20]
        break;
 8004204:	e00c      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7ff f8d1 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800420a:	6178      	str	r0, [r7, #20]
        break;
 800420c:	e008      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	617b      	str	r3, [r7, #20]
        break;
 8004214:	e004      	b.n	8004220 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	76bb      	strb	r3, [r7, #26]
        break;
 800421e:	bf00      	nop
    }

    if (pclk != 0U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	085a      	lsrs	r2, r3, #1
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	b29b      	uxth	r3, r3
 800423a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b0f      	cmp	r3, #15
 8004240:	d908      	bls.n	8004254 <UART_SetConfig+0x400>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d204      	bcs.n	8004254 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e001      	b.n	8004258 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004264:	7ebb      	ldrb	r3, [r7, #26]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004270:	00f42400 	.word	0x00f42400

08004274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004372:	d10a      	bne.n	800438a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043c6:	f7fc fd57 	bl	8000e78 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d10e      	bne.n	80043f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f82a 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e020      	b.n	800443a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d10e      	bne.n	8004424 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004406:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f814 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e00a      	b.n	800443a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e05d      	b.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d059      	beq.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fc fd0c 	bl	8000e78 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11b      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004480:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e042      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02b      	beq.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c6:	d123      	bne.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e00f      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	429a      	cmp	r2, r3
 800452c:	d092      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000010 	.word	0x20000010

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4e0d      	ldr	r6, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1ba4      	subs	r4, r4, r6
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2500      	movs	r5, #0
 8004550:	42a5      	cmp	r5, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4e0b      	ldr	r6, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f000 fc36 	bl	8004dc8 <_init>
 800455c:	1ba4      	subs	r4, r4, r6
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2500      	movs	r5, #0
 8004562:	42a5      	cmp	r5, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800456c:	4798      	blx	r3
 800456e:	3501      	adds	r5, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004576:	4798      	blx	r3
 8004578:	3501      	adds	r5, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	08004ecc 	.word	0x08004ecc
 8004580:	08004ecc 	.word	0x08004ecc
 8004584:	08004ecc 	.word	0x08004ecc
 8004588:	08004ed0 	.word	0x08004ed0

0800458c <malloc>:
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <malloc+0xc>)
 800458e:	4601      	mov	r1, r0
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f000 b861 	b.w	8004658 <_malloc_r>
 8004596:	bf00      	nop
 8004598:	20000010 	.word	0x20000010

0800459c <free>:
 800459c:	4b02      	ldr	r3, [pc, #8]	; (80045a8 <free+0xc>)
 800459e:	4601      	mov	r1, r0
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f000 b80b 	b.w	80045bc <_free_r>
 80045a6:	bf00      	nop
 80045a8:	20000010 	.word	0x20000010

080045ac <memset>:
 80045ac:	4402      	add	r2, r0
 80045ae:	4603      	mov	r3, r0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <_free_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4605      	mov	r5, r0
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d045      	beq.n	8004650 <_free_r+0x94>
 80045c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c8:	1f0c      	subs	r4, r1, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfb8      	it	lt
 80045ce:	18e4      	addlt	r4, r4, r3
 80045d0:	f000 f8cc 	bl	800476c <__malloc_lock>
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <_free_r+0x98>)
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	4610      	mov	r0, r2
 80045da:	b933      	cbnz	r3, 80045ea <_free_r+0x2e>
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	6014      	str	r4, [r2, #0]
 80045e0:	4628      	mov	r0, r5
 80045e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e6:	f000 b8c2 	b.w	800476e <__malloc_unlock>
 80045ea:	42a3      	cmp	r3, r4
 80045ec:	d90c      	bls.n	8004608 <_free_r+0x4c>
 80045ee:	6821      	ldr	r1, [r4, #0]
 80045f0:	1862      	adds	r2, r4, r1
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bf04      	itt	eq
 80045f6:	681a      	ldreq	r2, [r3, #0]
 80045f8:	685b      	ldreq	r3, [r3, #4]
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	bf04      	itt	eq
 80045fe:	1852      	addeq	r2, r2, r1
 8004600:	6022      	streq	r2, [r4, #0]
 8004602:	6004      	str	r4, [r0, #0]
 8004604:	e7ec      	b.n	80045e0 <_free_r+0x24>
 8004606:	4613      	mov	r3, r2
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	b10a      	cbz	r2, 8004610 <_free_r+0x54>
 800460c:	42a2      	cmp	r2, r4
 800460e:	d9fa      	bls.n	8004606 <_free_r+0x4a>
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	1858      	adds	r0, r3, r1
 8004614:	42a0      	cmp	r0, r4
 8004616:	d10b      	bne.n	8004630 <_free_r+0x74>
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	4401      	add	r1, r0
 800461c:	1858      	adds	r0, r3, r1
 800461e:	4282      	cmp	r2, r0
 8004620:	6019      	str	r1, [r3, #0]
 8004622:	d1dd      	bne.n	80045e0 <_free_r+0x24>
 8004624:	6810      	ldr	r0, [r2, #0]
 8004626:	6852      	ldr	r2, [r2, #4]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	4401      	add	r1, r0
 800462c:	6019      	str	r1, [r3, #0]
 800462e:	e7d7      	b.n	80045e0 <_free_r+0x24>
 8004630:	d902      	bls.n	8004638 <_free_r+0x7c>
 8004632:	230c      	movs	r3, #12
 8004634:	602b      	str	r3, [r5, #0]
 8004636:	e7d3      	b.n	80045e0 <_free_r+0x24>
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	1821      	adds	r1, r4, r0
 800463c:	428a      	cmp	r2, r1
 800463e:	bf04      	itt	eq
 8004640:	6811      	ldreq	r1, [r2, #0]
 8004642:	6852      	ldreq	r2, [r2, #4]
 8004644:	6062      	str	r2, [r4, #4]
 8004646:	bf04      	itt	eq
 8004648:	1809      	addeq	r1, r1, r0
 800464a:	6021      	streq	r1, [r4, #0]
 800464c:	605c      	str	r4, [r3, #4]
 800464e:	e7c7      	b.n	80045e0 <_free_r+0x24>
 8004650:	bd38      	pop	{r3, r4, r5, pc}
 8004652:	bf00      	nop
 8004654:	200000a0 	.word	0x200000a0

08004658 <_malloc_r>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	1ccd      	adds	r5, r1, #3
 800465c:	f025 0503 	bic.w	r5, r5, #3
 8004660:	3508      	adds	r5, #8
 8004662:	2d0c      	cmp	r5, #12
 8004664:	bf38      	it	cc
 8004666:	250c      	movcc	r5, #12
 8004668:	2d00      	cmp	r5, #0
 800466a:	4606      	mov	r6, r0
 800466c:	db01      	blt.n	8004672 <_malloc_r+0x1a>
 800466e:	42a9      	cmp	r1, r5
 8004670:	d903      	bls.n	800467a <_malloc_r+0x22>
 8004672:	230c      	movs	r3, #12
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	2000      	movs	r0, #0
 8004678:	bd70      	pop	{r4, r5, r6, pc}
 800467a:	f000 f877 	bl	800476c <__malloc_lock>
 800467e:	4a21      	ldr	r2, [pc, #132]	; (8004704 <_malloc_r+0xac>)
 8004680:	6814      	ldr	r4, [r2, #0]
 8004682:	4621      	mov	r1, r4
 8004684:	b991      	cbnz	r1, 80046ac <_malloc_r+0x54>
 8004686:	4c20      	ldr	r4, [pc, #128]	; (8004708 <_malloc_r+0xb0>)
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	b91b      	cbnz	r3, 8004694 <_malloc_r+0x3c>
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f83d 	bl	800470c <_sbrk_r>
 8004692:	6020      	str	r0, [r4, #0]
 8004694:	4629      	mov	r1, r5
 8004696:	4630      	mov	r0, r6
 8004698:	f000 f838 	bl	800470c <_sbrk_r>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d124      	bne.n	80046ea <_malloc_r+0x92>
 80046a0:	230c      	movs	r3, #12
 80046a2:	6033      	str	r3, [r6, #0]
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 f862 	bl	800476e <__malloc_unlock>
 80046aa:	e7e4      	b.n	8004676 <_malloc_r+0x1e>
 80046ac:	680b      	ldr	r3, [r1, #0]
 80046ae:	1b5b      	subs	r3, r3, r5
 80046b0:	d418      	bmi.n	80046e4 <_malloc_r+0x8c>
 80046b2:	2b0b      	cmp	r3, #11
 80046b4:	d90f      	bls.n	80046d6 <_malloc_r+0x7e>
 80046b6:	600b      	str	r3, [r1, #0]
 80046b8:	50cd      	str	r5, [r1, r3]
 80046ba:	18cc      	adds	r4, r1, r3
 80046bc:	4630      	mov	r0, r6
 80046be:	f000 f856 	bl	800476e <__malloc_unlock>
 80046c2:	f104 000b 	add.w	r0, r4, #11
 80046c6:	1d23      	adds	r3, r4, #4
 80046c8:	f020 0007 	bic.w	r0, r0, #7
 80046cc:	1ac3      	subs	r3, r0, r3
 80046ce:	d0d3      	beq.n	8004678 <_malloc_r+0x20>
 80046d0:	425a      	negs	r2, r3
 80046d2:	50e2      	str	r2, [r4, r3]
 80046d4:	e7d0      	b.n	8004678 <_malloc_r+0x20>
 80046d6:	428c      	cmp	r4, r1
 80046d8:	684b      	ldr	r3, [r1, #4]
 80046da:	bf16      	itet	ne
 80046dc:	6063      	strne	r3, [r4, #4]
 80046de:	6013      	streq	r3, [r2, #0]
 80046e0:	460c      	movne	r4, r1
 80046e2:	e7eb      	b.n	80046bc <_malloc_r+0x64>
 80046e4:	460c      	mov	r4, r1
 80046e6:	6849      	ldr	r1, [r1, #4]
 80046e8:	e7cc      	b.n	8004684 <_malloc_r+0x2c>
 80046ea:	1cc4      	adds	r4, r0, #3
 80046ec:	f024 0403 	bic.w	r4, r4, #3
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d005      	beq.n	8004700 <_malloc_r+0xa8>
 80046f4:	1a21      	subs	r1, r4, r0
 80046f6:	4630      	mov	r0, r6
 80046f8:	f000 f808 	bl	800470c <_sbrk_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0cf      	beq.n	80046a0 <_malloc_r+0x48>
 8004700:	6025      	str	r5, [r4, #0]
 8004702:	e7db      	b.n	80046bc <_malloc_r+0x64>
 8004704:	200000a0 	.word	0x200000a0
 8004708:	200000a4 	.word	0x200000a4

0800470c <_sbrk_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4c06      	ldr	r4, [pc, #24]	; (8004728 <_sbrk_r+0x1c>)
 8004710:	2300      	movs	r3, #0
 8004712:	4605      	mov	r5, r0
 8004714:	4608      	mov	r0, r1
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	f7fc fab0 	bl	8000c7c <_sbrk>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_sbrk_r+0x1a>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	b103      	cbz	r3, 8004726 <_sbrk_r+0x1a>
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20001220 	.word	0x20001220

0800472c <siprintf>:
 800472c:	b40e      	push	{r1, r2, r3}
 800472e:	b500      	push	{lr}
 8004730:	b09c      	sub	sp, #112	; 0x70
 8004732:	ab1d      	add	r3, sp, #116	; 0x74
 8004734:	9002      	str	r0, [sp, #8]
 8004736:	9006      	str	r0, [sp, #24]
 8004738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800473c:	4809      	ldr	r0, [pc, #36]	; (8004764 <siprintf+0x38>)
 800473e:	9107      	str	r1, [sp, #28]
 8004740:	9104      	str	r1, [sp, #16]
 8004742:	4909      	ldr	r1, [pc, #36]	; (8004768 <siprintf+0x3c>)
 8004744:	f853 2b04 	ldr.w	r2, [r3], #4
 8004748:	9105      	str	r1, [sp, #20]
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	a902      	add	r1, sp, #8
 8004750:	f000 f868 	bl	8004824 <_svfiprintf_r>
 8004754:	9b02      	ldr	r3, [sp, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	b01c      	add	sp, #112	; 0x70
 800475c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004760:	b003      	add	sp, #12
 8004762:	4770      	bx	lr
 8004764:	20000010 	.word	0x20000010
 8004768:	ffff0208 	.word	0xffff0208

0800476c <__malloc_lock>:
 800476c:	4770      	bx	lr

0800476e <__malloc_unlock>:
 800476e:	4770      	bx	lr

08004770 <__ssputs_r>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	688e      	ldr	r6, [r1, #8]
 8004776:	429e      	cmp	r6, r3
 8004778:	4682      	mov	sl, r0
 800477a:	460c      	mov	r4, r1
 800477c:	4690      	mov	r8, r2
 800477e:	4699      	mov	r9, r3
 8004780:	d837      	bhi.n	80047f2 <__ssputs_r+0x82>
 8004782:	898a      	ldrh	r2, [r1, #12]
 8004784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004788:	d031      	beq.n	80047ee <__ssputs_r+0x7e>
 800478a:	6825      	ldr	r5, [r4, #0]
 800478c:	6909      	ldr	r1, [r1, #16]
 800478e:	1a6f      	subs	r7, r5, r1
 8004790:	6965      	ldr	r5, [r4, #20]
 8004792:	2302      	movs	r3, #2
 8004794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004798:	fb95 f5f3 	sdiv	r5, r5, r3
 800479c:	f109 0301 	add.w	r3, r9, #1
 80047a0:	443b      	add	r3, r7
 80047a2:	429d      	cmp	r5, r3
 80047a4:	bf38      	it	cc
 80047a6:	461d      	movcc	r5, r3
 80047a8:	0553      	lsls	r3, r2, #21
 80047aa:	d530      	bpl.n	800480e <__ssputs_r+0x9e>
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7ff ff53 	bl	8004658 <_malloc_r>
 80047b2:	4606      	mov	r6, r0
 80047b4:	b950      	cbnz	r0, 80047cc <__ssputs_r+0x5c>
 80047b6:	230c      	movs	r3, #12
 80047b8:	f8ca 3000 	str.w	r3, [sl]
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	463a      	mov	r2, r7
 80047ce:	6921      	ldr	r1, [r4, #16]
 80047d0:	f000 faa8 	bl	8004d24 <memcpy>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	81a3      	strh	r3, [r4, #12]
 80047e0:	6126      	str	r6, [r4, #16]
 80047e2:	6165      	str	r5, [r4, #20]
 80047e4:	443e      	add	r6, r7
 80047e6:	1bed      	subs	r5, r5, r7
 80047e8:	6026      	str	r6, [r4, #0]
 80047ea:	60a5      	str	r5, [r4, #8]
 80047ec:	464e      	mov	r6, r9
 80047ee:	454e      	cmp	r6, r9
 80047f0:	d900      	bls.n	80047f4 <__ssputs_r+0x84>
 80047f2:	464e      	mov	r6, r9
 80047f4:	4632      	mov	r2, r6
 80047f6:	4641      	mov	r1, r8
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	f000 fa9e 	bl	8004d3a <memmove>
 80047fe:	68a3      	ldr	r3, [r4, #8]
 8004800:	1b9b      	subs	r3, r3, r6
 8004802:	60a3      	str	r3, [r4, #8]
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	441e      	add	r6, r3
 8004808:	6026      	str	r6, [r4, #0]
 800480a:	2000      	movs	r0, #0
 800480c:	e7dc      	b.n	80047c8 <__ssputs_r+0x58>
 800480e:	462a      	mov	r2, r5
 8004810:	f000 faac 	bl	8004d6c <_realloc_r>
 8004814:	4606      	mov	r6, r0
 8004816:	2800      	cmp	r0, #0
 8004818:	d1e2      	bne.n	80047e0 <__ssputs_r+0x70>
 800481a:	6921      	ldr	r1, [r4, #16]
 800481c:	4650      	mov	r0, sl
 800481e:	f7ff fecd 	bl	80045bc <_free_r>
 8004822:	e7c8      	b.n	80047b6 <__ssputs_r+0x46>

08004824 <_svfiprintf_r>:
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	461d      	mov	r5, r3
 800482a:	898b      	ldrh	r3, [r1, #12]
 800482c:	061f      	lsls	r7, r3, #24
 800482e:	b09d      	sub	sp, #116	; 0x74
 8004830:	4680      	mov	r8, r0
 8004832:	460c      	mov	r4, r1
 8004834:	4616      	mov	r6, r2
 8004836:	d50f      	bpl.n	8004858 <_svfiprintf_r+0x34>
 8004838:	690b      	ldr	r3, [r1, #16]
 800483a:	b96b      	cbnz	r3, 8004858 <_svfiprintf_r+0x34>
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	f7ff ff0b 	bl	8004658 <_malloc_r>
 8004842:	6020      	str	r0, [r4, #0]
 8004844:	6120      	str	r0, [r4, #16]
 8004846:	b928      	cbnz	r0, 8004854 <_svfiprintf_r+0x30>
 8004848:	230c      	movs	r3, #12
 800484a:	f8c8 3000 	str.w	r3, [r8]
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	e0c8      	b.n	80049e6 <_svfiprintf_r+0x1c2>
 8004854:	2340      	movs	r3, #64	; 0x40
 8004856:	6163      	str	r3, [r4, #20]
 8004858:	2300      	movs	r3, #0
 800485a:	9309      	str	r3, [sp, #36]	; 0x24
 800485c:	2320      	movs	r3, #32
 800485e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004862:	2330      	movs	r3, #48	; 0x30
 8004864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004868:	9503      	str	r5, [sp, #12]
 800486a:	f04f 0b01 	mov.w	fp, #1
 800486e:	4637      	mov	r7, r6
 8004870:	463d      	mov	r5, r7
 8004872:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004876:	b10b      	cbz	r3, 800487c <_svfiprintf_r+0x58>
 8004878:	2b25      	cmp	r3, #37	; 0x25
 800487a:	d13e      	bne.n	80048fa <_svfiprintf_r+0xd6>
 800487c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004880:	d00b      	beq.n	800489a <_svfiprintf_r+0x76>
 8004882:	4653      	mov	r3, sl
 8004884:	4632      	mov	r2, r6
 8004886:	4621      	mov	r1, r4
 8004888:	4640      	mov	r0, r8
 800488a:	f7ff ff71 	bl	8004770 <__ssputs_r>
 800488e:	3001      	adds	r0, #1
 8004890:	f000 80a4 	beq.w	80049dc <_svfiprintf_r+0x1b8>
 8004894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004896:	4453      	add	r3, sl
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	783b      	ldrb	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 809d 	beq.w	80049dc <_svfiprintf_r+0x1b8>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	9307      	str	r3, [sp, #28]
 80048b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b4:	931a      	str	r3, [sp, #104]	; 0x68
 80048b6:	462f      	mov	r7, r5
 80048b8:	2205      	movs	r2, #5
 80048ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80048be:	4850      	ldr	r0, [pc, #320]	; (8004a00 <_svfiprintf_r+0x1dc>)
 80048c0:	f7fb fc8e 	bl	80001e0 <memchr>
 80048c4:	9b04      	ldr	r3, [sp, #16]
 80048c6:	b9d0      	cbnz	r0, 80048fe <_svfiprintf_r+0xda>
 80048c8:	06d9      	lsls	r1, r3, #27
 80048ca:	bf44      	itt	mi
 80048cc:	2220      	movmi	r2, #32
 80048ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d2:	071a      	lsls	r2, r3, #28
 80048d4:	bf44      	itt	mi
 80048d6:	222b      	movmi	r2, #43	; 0x2b
 80048d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048dc:	782a      	ldrb	r2, [r5, #0]
 80048de:	2a2a      	cmp	r2, #42	; 0x2a
 80048e0:	d015      	beq.n	800490e <_svfiprintf_r+0xea>
 80048e2:	9a07      	ldr	r2, [sp, #28]
 80048e4:	462f      	mov	r7, r5
 80048e6:	2000      	movs	r0, #0
 80048e8:	250a      	movs	r5, #10
 80048ea:	4639      	mov	r1, r7
 80048ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f0:	3b30      	subs	r3, #48	; 0x30
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	d94d      	bls.n	8004992 <_svfiprintf_r+0x16e>
 80048f6:	b1b8      	cbz	r0, 8004928 <_svfiprintf_r+0x104>
 80048f8:	e00f      	b.n	800491a <_svfiprintf_r+0xf6>
 80048fa:	462f      	mov	r7, r5
 80048fc:	e7b8      	b.n	8004870 <_svfiprintf_r+0x4c>
 80048fe:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <_svfiprintf_r+0x1dc>)
 8004900:	1a80      	subs	r0, r0, r2
 8004902:	fa0b f000 	lsl.w	r0, fp, r0
 8004906:	4318      	orrs	r0, r3
 8004908:	9004      	str	r0, [sp, #16]
 800490a:	463d      	mov	r5, r7
 800490c:	e7d3      	b.n	80048b6 <_svfiprintf_r+0x92>
 800490e:	9a03      	ldr	r2, [sp, #12]
 8004910:	1d11      	adds	r1, r2, #4
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	9103      	str	r1, [sp, #12]
 8004916:	2a00      	cmp	r2, #0
 8004918:	db01      	blt.n	800491e <_svfiprintf_r+0xfa>
 800491a:	9207      	str	r2, [sp, #28]
 800491c:	e004      	b.n	8004928 <_svfiprintf_r+0x104>
 800491e:	4252      	negs	r2, r2
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	9207      	str	r2, [sp, #28]
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	783b      	ldrb	r3, [r7, #0]
 800492a:	2b2e      	cmp	r3, #46	; 0x2e
 800492c:	d10c      	bne.n	8004948 <_svfiprintf_r+0x124>
 800492e:	787b      	ldrb	r3, [r7, #1]
 8004930:	2b2a      	cmp	r3, #42	; 0x2a
 8004932:	d133      	bne.n	800499c <_svfiprintf_r+0x178>
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	9203      	str	r2, [sp, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bfb8      	it	lt
 8004940:	f04f 33ff 	movlt.w	r3, #4294967295
 8004944:	3702      	adds	r7, #2
 8004946:	9305      	str	r3, [sp, #20]
 8004948:	4d2e      	ldr	r5, [pc, #184]	; (8004a04 <_svfiprintf_r+0x1e0>)
 800494a:	7839      	ldrb	r1, [r7, #0]
 800494c:	2203      	movs	r2, #3
 800494e:	4628      	mov	r0, r5
 8004950:	f7fb fc46 	bl	80001e0 <memchr>
 8004954:	b138      	cbz	r0, 8004966 <_svfiprintf_r+0x142>
 8004956:	2340      	movs	r3, #64	; 0x40
 8004958:	1b40      	subs	r0, r0, r5
 800495a:	fa03 f000 	lsl.w	r0, r3, r0
 800495e:	9b04      	ldr	r3, [sp, #16]
 8004960:	4303      	orrs	r3, r0
 8004962:	3701      	adds	r7, #1
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	7839      	ldrb	r1, [r7, #0]
 8004968:	4827      	ldr	r0, [pc, #156]	; (8004a08 <_svfiprintf_r+0x1e4>)
 800496a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800496e:	2206      	movs	r2, #6
 8004970:	1c7e      	adds	r6, r7, #1
 8004972:	f7fb fc35 	bl	80001e0 <memchr>
 8004976:	2800      	cmp	r0, #0
 8004978:	d038      	beq.n	80049ec <_svfiprintf_r+0x1c8>
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <_svfiprintf_r+0x1e8>)
 800497c:	bb13      	cbnz	r3, 80049c4 <_svfiprintf_r+0x1a0>
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	3307      	adds	r3, #7
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	3308      	adds	r3, #8
 8004988:	9303      	str	r3, [sp, #12]
 800498a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498c:	444b      	add	r3, r9
 800498e:	9309      	str	r3, [sp, #36]	; 0x24
 8004990:	e76d      	b.n	800486e <_svfiprintf_r+0x4a>
 8004992:	fb05 3202 	mla	r2, r5, r2, r3
 8004996:	2001      	movs	r0, #1
 8004998:	460f      	mov	r7, r1
 800499a:	e7a6      	b.n	80048ea <_svfiprintf_r+0xc6>
 800499c:	2300      	movs	r3, #0
 800499e:	3701      	adds	r7, #1
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	4619      	mov	r1, r3
 80049a4:	250a      	movs	r5, #10
 80049a6:	4638      	mov	r0, r7
 80049a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ac:	3a30      	subs	r2, #48	; 0x30
 80049ae:	2a09      	cmp	r2, #9
 80049b0:	d903      	bls.n	80049ba <_svfiprintf_r+0x196>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0c8      	beq.n	8004948 <_svfiprintf_r+0x124>
 80049b6:	9105      	str	r1, [sp, #20]
 80049b8:	e7c6      	b.n	8004948 <_svfiprintf_r+0x124>
 80049ba:	fb05 2101 	mla	r1, r5, r1, r2
 80049be:	2301      	movs	r3, #1
 80049c0:	4607      	mov	r7, r0
 80049c2:	e7f0      	b.n	80049a6 <_svfiprintf_r+0x182>
 80049c4:	ab03      	add	r3, sp, #12
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4622      	mov	r2, r4
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <_svfiprintf_r+0x1ec>)
 80049cc:	a904      	add	r1, sp, #16
 80049ce:	4640      	mov	r0, r8
 80049d0:	f3af 8000 	nop.w
 80049d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049d8:	4681      	mov	r9, r0
 80049da:	d1d6      	bne.n	800498a <_svfiprintf_r+0x166>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	065b      	lsls	r3, r3, #25
 80049e0:	f53f af35 	bmi.w	800484e <_svfiprintf_r+0x2a>
 80049e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e6:	b01d      	add	sp, #116	; 0x74
 80049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ec:	ab03      	add	r3, sp, #12
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4622      	mov	r2, r4
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <_svfiprintf_r+0x1ec>)
 80049f4:	a904      	add	r1, sp, #16
 80049f6:	4640      	mov	r0, r8
 80049f8:	f000 f882 	bl	8004b00 <_printf_i>
 80049fc:	e7ea      	b.n	80049d4 <_svfiprintf_r+0x1b0>
 80049fe:	bf00      	nop
 8004a00:	08004e90 	.word	0x08004e90
 8004a04:	08004e96 	.word	0x08004e96
 8004a08:	08004e9a 	.word	0x08004e9a
 8004a0c:	00000000 	.word	0x00000000
 8004a10:	08004771 	.word	0x08004771

08004a14 <_printf_common>:
 8004a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	4691      	mov	r9, r2
 8004a1a:	461f      	mov	r7, r3
 8004a1c:	688a      	ldr	r2, [r1, #8]
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a24:	4293      	cmp	r3, r2
 8004a26:	bfb8      	it	lt
 8004a28:	4613      	movlt	r3, r2
 8004a2a:	f8c9 3000 	str.w	r3, [r9]
 8004a2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a32:	4606      	mov	r6, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	b112      	cbz	r2, 8004a3e <_printf_common+0x2a>
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f8c9 3000 	str.w	r3, [r9]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	0699      	lsls	r1, r3, #26
 8004a42:	bf42      	ittt	mi
 8004a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a48:	3302      	addmi	r3, #2
 8004a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004a4e:	6825      	ldr	r5, [r4, #0]
 8004a50:	f015 0506 	ands.w	r5, r5, #6
 8004a54:	d107      	bne.n	8004a66 <_printf_common+0x52>
 8004a56:	f104 0a19 	add.w	sl, r4, #25
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	42ab      	cmp	r3, r5
 8004a64:	dc28      	bgt.n	8004ab8 <_printf_common+0xa4>
 8004a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	3300      	adds	r3, #0
 8004a6e:	bf18      	it	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	0692      	lsls	r2, r2, #26
 8004a74:	d42d      	bmi.n	8004ad2 <_printf_common+0xbe>
 8004a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	47c0      	blx	r8
 8004a80:	3001      	adds	r0, #1
 8004a82:	d020      	beq.n	8004ac6 <_printf_common+0xb2>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	68e5      	ldr	r5, [r4, #12]
 8004a88:	f8d9 2000 	ldr.w	r2, [r9]
 8004a8c:	f003 0306 	and.w	r3, r3, #6
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	bf08      	it	eq
 8004a94:	1aad      	subeq	r5, r5, r2
 8004a96:	68a3      	ldr	r3, [r4, #8]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	bf0c      	ite	eq
 8004a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa0:	2500      	movne	r5, #0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfc4      	itt	gt
 8004aa6:	1a9b      	subgt	r3, r3, r2
 8004aa8:	18ed      	addgt	r5, r5, r3
 8004aaa:	f04f 0900 	mov.w	r9, #0
 8004aae:	341a      	adds	r4, #26
 8004ab0:	454d      	cmp	r5, r9
 8004ab2:	d11a      	bne.n	8004aea <_printf_common+0xd6>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e008      	b.n	8004aca <_printf_common+0xb6>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4652      	mov	r2, sl
 8004abc:	4639      	mov	r1, r7
 8004abe:	4630      	mov	r0, r6
 8004ac0:	47c0      	blx	r8
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d103      	bne.n	8004ace <_printf_common+0xba>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	3501      	adds	r5, #1
 8004ad0:	e7c3      	b.n	8004a5a <_printf_common+0x46>
 8004ad2:	18e1      	adds	r1, r4, r3
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	2030      	movs	r0, #48	; 0x30
 8004ad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004adc:	4422      	add	r2, r4
 8004ade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	e7c5      	b.n	8004a76 <_printf_common+0x62>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4622      	mov	r2, r4
 8004aee:	4639      	mov	r1, r7
 8004af0:	4630      	mov	r0, r6
 8004af2:	47c0      	blx	r8
 8004af4:	3001      	adds	r0, #1
 8004af6:	d0e6      	beq.n	8004ac6 <_printf_common+0xb2>
 8004af8:	f109 0901 	add.w	r9, r9, #1
 8004afc:	e7d8      	b.n	8004ab0 <_printf_common+0x9c>
	...

08004b00 <_printf_i>:
 8004b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b08:	460c      	mov	r4, r1
 8004b0a:	7e09      	ldrb	r1, [r1, #24]
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	296e      	cmp	r1, #110	; 0x6e
 8004b10:	4617      	mov	r7, r2
 8004b12:	4606      	mov	r6, r0
 8004b14:	4698      	mov	r8, r3
 8004b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b18:	f000 80b3 	beq.w	8004c82 <_printf_i+0x182>
 8004b1c:	d822      	bhi.n	8004b64 <_printf_i+0x64>
 8004b1e:	2963      	cmp	r1, #99	; 0x63
 8004b20:	d036      	beq.n	8004b90 <_printf_i+0x90>
 8004b22:	d80a      	bhi.n	8004b3a <_printf_i+0x3a>
 8004b24:	2900      	cmp	r1, #0
 8004b26:	f000 80b9 	beq.w	8004c9c <_printf_i+0x19c>
 8004b2a:	2958      	cmp	r1, #88	; 0x58
 8004b2c:	f000 8083 	beq.w	8004c36 <_printf_i+0x136>
 8004b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b38:	e032      	b.n	8004ba0 <_printf_i+0xa0>
 8004b3a:	2964      	cmp	r1, #100	; 0x64
 8004b3c:	d001      	beq.n	8004b42 <_printf_i+0x42>
 8004b3e:	2969      	cmp	r1, #105	; 0x69
 8004b40:	d1f6      	bne.n	8004b30 <_printf_i+0x30>
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	0605      	lsls	r5, r0, #24
 8004b48:	f103 0104 	add.w	r1, r3, #4
 8004b4c:	d52a      	bpl.n	8004ba4 <_printf_i+0xa4>
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da03      	bge.n	8004b5e <_printf_i+0x5e>
 8004b56:	222d      	movs	r2, #45	; 0x2d
 8004b58:	425b      	negs	r3, r3
 8004b5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b5e:	486f      	ldr	r0, [pc, #444]	; (8004d1c <_printf_i+0x21c>)
 8004b60:	220a      	movs	r2, #10
 8004b62:	e039      	b.n	8004bd8 <_printf_i+0xd8>
 8004b64:	2973      	cmp	r1, #115	; 0x73
 8004b66:	f000 809d 	beq.w	8004ca4 <_printf_i+0x1a4>
 8004b6a:	d808      	bhi.n	8004b7e <_printf_i+0x7e>
 8004b6c:	296f      	cmp	r1, #111	; 0x6f
 8004b6e:	d020      	beq.n	8004bb2 <_printf_i+0xb2>
 8004b70:	2970      	cmp	r1, #112	; 0x70
 8004b72:	d1dd      	bne.n	8004b30 <_printf_i+0x30>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	f043 0320 	orr.w	r3, r3, #32
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	e003      	b.n	8004b86 <_printf_i+0x86>
 8004b7e:	2975      	cmp	r1, #117	; 0x75
 8004b80:	d017      	beq.n	8004bb2 <_printf_i+0xb2>
 8004b82:	2978      	cmp	r1, #120	; 0x78
 8004b84:	d1d4      	bne.n	8004b30 <_printf_i+0x30>
 8004b86:	2378      	movs	r3, #120	; 0x78
 8004b88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8c:	4864      	ldr	r0, [pc, #400]	; (8004d20 <_printf_i+0x220>)
 8004b8e:	e055      	b.n	8004c3c <_printf_i+0x13c>
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	1d19      	adds	r1, r3, #4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6011      	str	r1, [r2, #0]
 8004b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e08c      	b.n	8004cbe <_printf_i+0x1be>
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6011      	str	r1, [r2, #0]
 8004ba8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bac:	bf18      	it	ne
 8004bae:	b21b      	sxthne	r3, r3
 8004bb0:	e7cf      	b.n	8004b52 <_printf_i+0x52>
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	6825      	ldr	r5, [r4, #0]
 8004bb6:	1d18      	adds	r0, r3, #4
 8004bb8:	6010      	str	r0, [r2, #0]
 8004bba:	0628      	lsls	r0, r5, #24
 8004bbc:	d501      	bpl.n	8004bc2 <_printf_i+0xc2>
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	e002      	b.n	8004bc8 <_printf_i+0xc8>
 8004bc2:	0668      	lsls	r0, r5, #25
 8004bc4:	d5fb      	bpl.n	8004bbe <_printf_i+0xbe>
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	4854      	ldr	r0, [pc, #336]	; (8004d1c <_printf_i+0x21c>)
 8004bca:	296f      	cmp	r1, #111	; 0x6f
 8004bcc:	bf14      	ite	ne
 8004bce:	220a      	movne	r2, #10
 8004bd0:	2208      	moveq	r2, #8
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bd8:	6865      	ldr	r5, [r4, #4]
 8004bda:	60a5      	str	r5, [r4, #8]
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	f2c0 8095 	blt.w	8004d0c <_printf_i+0x20c>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	f021 0104 	bic.w	r1, r1, #4
 8004be8:	6021      	str	r1, [r4, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d13d      	bne.n	8004c6a <_printf_i+0x16a>
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	f040 808e 	bne.w	8004d10 <_printf_i+0x210>
 8004bf4:	4665      	mov	r5, ip
 8004bf6:	2a08      	cmp	r2, #8
 8004bf8:	d10b      	bne.n	8004c12 <_printf_i+0x112>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	07db      	lsls	r3, r3, #31
 8004bfe:	d508      	bpl.n	8004c12 <_printf_i+0x112>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bfde      	ittt	le
 8004c08:	2330      	movle	r3, #48	; 0x30
 8004c0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c12:	ebac 0305 	sub.w	r3, ip, r5
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	f8cd 8000 	str.w	r8, [sp]
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	aa03      	add	r2, sp, #12
 8004c20:	4621      	mov	r1, r4
 8004c22:	4630      	mov	r0, r6
 8004c24:	f7ff fef6 	bl	8004a14 <_printf_common>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d14d      	bne.n	8004cc8 <_printf_i+0x1c8>
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c30:	b005      	add	sp, #20
 8004c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c36:	4839      	ldr	r0, [pc, #228]	; (8004d1c <_printf_i+0x21c>)
 8004c38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c3c:	6813      	ldr	r3, [r2, #0]
 8004c3e:	6821      	ldr	r1, [r4, #0]
 8004c40:	1d1d      	adds	r5, r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6015      	str	r5, [r2, #0]
 8004c46:	060a      	lsls	r2, r1, #24
 8004c48:	d50b      	bpl.n	8004c62 <_printf_i+0x162>
 8004c4a:	07ca      	lsls	r2, r1, #31
 8004c4c:	bf44      	itt	mi
 8004c4e:	f041 0120 	orrmi.w	r1, r1, #32
 8004c52:	6021      	strmi	r1, [r4, #0]
 8004c54:	b91b      	cbnz	r3, 8004c5e <_printf_i+0x15e>
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	f022 0220 	bic.w	r2, r2, #32
 8004c5c:	6022      	str	r2, [r4, #0]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	e7b7      	b.n	8004bd2 <_printf_i+0xd2>
 8004c62:	064d      	lsls	r5, r1, #25
 8004c64:	bf48      	it	mi
 8004c66:	b29b      	uxthmi	r3, r3
 8004c68:	e7ef      	b.n	8004c4a <_printf_i+0x14a>
 8004c6a:	4665      	mov	r5, ip
 8004c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c70:	fb02 3311 	mls	r3, r2, r1, r3
 8004c74:	5cc3      	ldrb	r3, [r0, r3]
 8004c76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d1f5      	bne.n	8004c6c <_printf_i+0x16c>
 8004c80:	e7b9      	b.n	8004bf6 <_printf_i+0xf6>
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	6825      	ldr	r5, [r4, #0]
 8004c86:	6961      	ldr	r1, [r4, #20]
 8004c88:	1d18      	adds	r0, r3, #4
 8004c8a:	6010      	str	r0, [r2, #0]
 8004c8c:	0628      	lsls	r0, r5, #24
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0x196>
 8004c92:	6019      	str	r1, [r3, #0]
 8004c94:	e002      	b.n	8004c9c <_printf_i+0x19c>
 8004c96:	066a      	lsls	r2, r5, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0x192>
 8004c9a:	8019      	strh	r1, [r3, #0]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	4665      	mov	r5, ip
 8004ca2:	e7b9      	b.n	8004c18 <_printf_i+0x118>
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	1d19      	adds	r1, r3, #4
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	681d      	ldr	r5, [r3, #0]
 8004cac:	6862      	ldr	r2, [r4, #4]
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7fb fa95 	bl	80001e0 <memchr>
 8004cb6:	b108      	cbz	r0, 8004cbc <_printf_i+0x1bc>
 8004cb8:	1b40      	subs	r0, r0, r5
 8004cba:	6060      	str	r0, [r4, #4]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc6:	e7a7      	b.n	8004c18 <_printf_i+0x118>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	462a      	mov	r2, r5
 8004ccc:	4639      	mov	r1, r7
 8004cce:	4630      	mov	r0, r6
 8004cd0:	47c0      	blx	r8
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d0aa      	beq.n	8004c2c <_printf_i+0x12c>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	079b      	lsls	r3, r3, #30
 8004cda:	d413      	bmi.n	8004d04 <_printf_i+0x204>
 8004cdc:	68e0      	ldr	r0, [r4, #12]
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	4298      	cmp	r0, r3
 8004ce2:	bfb8      	it	lt
 8004ce4:	4618      	movlt	r0, r3
 8004ce6:	e7a3      	b.n	8004c30 <_printf_i+0x130>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	464a      	mov	r2, r9
 8004cec:	4639      	mov	r1, r7
 8004cee:	4630      	mov	r0, r6
 8004cf0:	47c0      	blx	r8
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d09a      	beq.n	8004c2c <_printf_i+0x12c>
 8004cf6:	3501      	adds	r5, #1
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	9a03      	ldr	r2, [sp, #12]
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	42ab      	cmp	r3, r5
 8004d00:	dcf2      	bgt.n	8004ce8 <_printf_i+0x1e8>
 8004d02:	e7eb      	b.n	8004cdc <_printf_i+0x1dc>
 8004d04:	2500      	movs	r5, #0
 8004d06:	f104 0919 	add.w	r9, r4, #25
 8004d0a:	e7f5      	b.n	8004cf8 <_printf_i+0x1f8>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ac      	bne.n	8004c6a <_printf_i+0x16a>
 8004d10:	7803      	ldrb	r3, [r0, #0]
 8004d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1a:	e76c      	b.n	8004bf6 <_printf_i+0xf6>
 8004d1c:	08004ea1 	.word	0x08004ea1
 8004d20:	08004eb2 	.word	0x08004eb2

08004d24 <memcpy>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	1e43      	subs	r3, r0, #1
 8004d28:	440a      	add	r2, r1
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	d100      	bne.n	8004d30 <memcpy+0xc>
 8004d2e:	bd10      	pop	{r4, pc}
 8004d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d38:	e7f7      	b.n	8004d2a <memcpy+0x6>

08004d3a <memmove>:
 8004d3a:	4288      	cmp	r0, r1
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	eb01 0302 	add.w	r3, r1, r2
 8004d42:	d807      	bhi.n	8004d54 <memmove+0x1a>
 8004d44:	1e42      	subs	r2, r0, #1
 8004d46:	4299      	cmp	r1, r3
 8004d48:	d00a      	beq.n	8004d60 <memmove+0x26>
 8004d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d52:	e7f8      	b.n	8004d46 <memmove+0xc>
 8004d54:	4283      	cmp	r3, r0
 8004d56:	d9f5      	bls.n	8004d44 <memmove+0xa>
 8004d58:	1881      	adds	r1, r0, r2
 8004d5a:	1ad2      	subs	r2, r2, r3
 8004d5c:	42d3      	cmn	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memmove+0x28>
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d6a:	e7f7      	b.n	8004d5c <memmove+0x22>

08004d6c <_realloc_r>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	4607      	mov	r7, r0
 8004d70:	4614      	mov	r4, r2
 8004d72:	460e      	mov	r6, r1
 8004d74:	b921      	cbnz	r1, 8004d80 <_realloc_r+0x14>
 8004d76:	4611      	mov	r1, r2
 8004d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d7c:	f7ff bc6c 	b.w	8004658 <_malloc_r>
 8004d80:	b922      	cbnz	r2, 8004d8c <_realloc_r+0x20>
 8004d82:	f7ff fc1b 	bl	80045bc <_free_r>
 8004d86:	4625      	mov	r5, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8c:	f000 f814 	bl	8004db8 <_malloc_usable_size_r>
 8004d90:	42a0      	cmp	r0, r4
 8004d92:	d20f      	bcs.n	8004db4 <_realloc_r+0x48>
 8004d94:	4621      	mov	r1, r4
 8004d96:	4638      	mov	r0, r7
 8004d98:	f7ff fc5e 	bl	8004658 <_malloc_r>
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d0f2      	beq.n	8004d88 <_realloc_r+0x1c>
 8004da2:	4631      	mov	r1, r6
 8004da4:	4622      	mov	r2, r4
 8004da6:	f7ff ffbd 	bl	8004d24 <memcpy>
 8004daa:	4631      	mov	r1, r6
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7ff fc05 	bl	80045bc <_free_r>
 8004db2:	e7e9      	b.n	8004d88 <_realloc_r+0x1c>
 8004db4:	4635      	mov	r5, r6
 8004db6:	e7e7      	b.n	8004d88 <_realloc_r+0x1c>

08004db8 <_malloc_usable_size_r>:
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f18      	subs	r0, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbc      	itt	lt
 8004dc2:	580b      	ldrlt	r3, [r1, r0]
 8004dc4:	18c0      	addlt	r0, r0, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_init>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr

08004dd4 <_fini>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	bf00      	nop
 8004dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dda:	bc08      	pop	{r3}
 8004ddc:	469e      	mov	lr, r3
 8004dde:	4770      	bx	lr
