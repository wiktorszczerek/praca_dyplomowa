
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd0  08007bd0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd8  08007bd8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  200001e0  08007dbc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001454  08007dbc  00021454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175f7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c4f  00000000  00000000  00037803  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  0003a458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  0003b680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024864  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f97e  00000000  00000000  00060fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da67f  00000000  00000000  00070922  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014afa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  0014b01c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800772c 	.word	0x0800772c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800772c 	.word	0x0800772c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <read_from_eeprom_single_byte>:
		HAL_Delay(500);
	}
}

ERRORS read_from_eeprom_single_byte(uint16_t addr, uint8_t* read_buffer)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	80fb      	strh	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr, 1, read_buffer, sizeof(*read_buffer), HAL_MAX_DELAY)!= HAL_OK)
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	21a0      	movs	r1, #160	; 0xa0
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <read_from_eeprom_single_byte+0x3c>)
 800097a:	f003 fad9 	bl	8003f30 <HAL_I2C_Mem_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <read_from_eeprom_single_byte+0x30>
	{
		/*char msg[] = "EEPROM_READ_ERROR";
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);*/
		return EEPROM_READ_ERROR;
 8000984:	2306      	movs	r3, #6
 8000986:	e000      	b.n	800098a <read_from_eeprom_single_byte+0x32>
	}
	return OK;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000224 	.word	0x20000224

08000998 <read_from_eeprom_byte_by_byte>:

ERRORS read_from_eeprom_byte_by_byte(uint16_t addr, uint8_t num_of_bytes, uint8_t* read_buffer)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af04      	add	r7, sp, #16
 800099e:	4603      	mov	r3, r0
 80009a0:	603a      	str	r2, [r7, #0]
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	460b      	mov	r3, r1
 80009a6:	717b      	strb	r3, [r7, #5]
	for(uint8_t i=0;i<num_of_bytes;++i)
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e01f      	b.n	80009ee <read_from_eeprom_byte_by_byte+0x56>
	{
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr+i, 1, (uint8_t*)(read_buffer+i), sizeof(read_buffer[i]), HAL_MAX_DELAY)!= HAL_OK)
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	b299      	uxth	r1, r3
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	f04f 32ff 	mov.w	r2, #4294967295
 80009c2:	9202      	str	r2, [sp, #8]
 80009c4:	2201      	movs	r2, #1
 80009c6:	9201      	str	r2, [sp, #4]
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	460a      	mov	r2, r1
 80009ce:	21a0      	movs	r1, #160	; 0xa0
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <read_from_eeprom_byte_by_byte+0x68>)
 80009d2:	f003 faad 	bl	8003f30 <HAL_I2C_Mem_Read>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <read_from_eeprom_byte_by_byte+0x48>
		{
			/*char msg[] = "EEPROM_READ_ERROR";
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);*/
			return EEPROM_READ_ERROR;
 80009dc:	2306      	movs	r3, #6
 80009de:	e00b      	b.n	80009f8 <read_from_eeprom_byte_by_byte+0x60>
		}
		HAL_Delay(500);
 80009e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e4:	f001 fa9a 	bl	8001f1c <HAL_Delay>
	for(uint8_t i=0;i<num_of_bytes;++i)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3db      	bcc.n	80009ae <read_from_eeprom_byte_by_byte+0x16>
	}
	return OK;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000224 	.word	0x20000224

08000a04 <check_eeprom_data>:
		}
	HAL_Delay(5000);
}

ERRORS check_eeprom_data()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	char data_start_check = 0, data_end_check = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]
	if((read_from_eeprom_single_byte(EEPROM_DATA_START_ADDR, (uint8_t*)&data_start_check) != OK)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	4619      	mov	r1, r3
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff9e 	bl	8000958 <read_from_eeprom_single_byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d107      	bne.n	8000a32 <check_eeprom_data+0x2e>
			|| 	(read_from_eeprom_single_byte(EEPROM_DATA_END_ADDR, (uint8_t*)&data_end_check) != OK))
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	4619      	mov	r1, r3
 8000a26:	2019      	movs	r0, #25
 8000a28:	f7ff ff96 	bl	8000958 <read_from_eeprom_single_byte>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d001      	beq.n	8000a36 <check_eeprom_data+0x32>
	{
		return EEPROM_READ_ERROR;
 8000a32:	2306      	movs	r3, #6
 8000a34:	e008      	b.n	8000a48 <check_eeprom_data+0x44>
	}
	if(data_start_check != '<' || data_end_check != '>')
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b3c      	cmp	r3, #60	; 0x3c
 8000a3a:	d102      	bne.n	8000a42 <check_eeprom_data+0x3e>
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8000a40:	d001      	beq.n	8000a46 <check_eeprom_data+0x42>
	{
		return EEPROM_DATA_INVALID;
 8000a42:	2304      	movs	r3, #4
 8000a44:	e000      	b.n	8000a48 <check_eeprom_data+0x44>
	}
	return OK;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <add_end_chars_to_sensor_info>:

void add_end_chars_to_sensor_info(struct sensor_info* si)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	si->version_num[VERSION_NUM_SIZE] 													= '\0';
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	709a      	strb	r2, [r3, #2]
	si->sensor_id[SENSOR_ID_SIZE] 														= '\0';
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	715a      	strb	r2, [r3, #5]
	si->sensor_type[SENSOR_TYPE_SIZE]													= '\0';
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	721a      	strb	r2, [r3, #8]
	si->current_per_ppm_coefficient_dec[CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE] 			= '\0';
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	72da      	strb	r2, [r3, #11]
	si->current_per_ppm_coefficient_frac[CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE] 		= '\0';
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	73da      	strb	r2, [r3, #15]
	si->threshold[THRESHOLD_SIZE]														= '\0';
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	74da      	strb	r2, [r3, #19]
	si->device_turned_on_with_sensor_counter[DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE] = '\0';
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
	si->sensor_fired_counter[SENSOR_FIRED_COUNTER_SIZE]									= '\0';
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	77da      	strb	r2, [r3, #31]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <map_sensor_info_to_sensor_data>:

//TODO check if there is any way to inspect if conversion went bad.
void map_sensor_info_to_sensor_data(struct sensor_info* si, struct sensor_data* sd) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	sd->version_num = (uint8_t)strtoul(si->version_num, NULL, 16);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f006 fad9 	bl	800705c <strtoul>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]
	sd->sensor_id = (uint8_t)strtoul(si->sensor_id, NULL, 16);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3303      	adds	r3, #3
 8000ab6:	2210      	movs	r2, #16
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 face 	bl	800705c <strtoul>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	705a      	strb	r2, [r3, #1]
	sd->sensor_type = (uint8_t)strtoul(si->sensor_type, NULL, 16);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3306      	adds	r3, #6
 8000acc:	2210      	movs	r2, #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 fac3 	bl	800705c <strtoul>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	709a      	strb	r2, [r3, #2]
	sd->current_per_ppm_coefficient_dec = (uint8_t)strtoul(si->current_per_ppm_coefficient_dec, NULL, 16);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3309      	adds	r3, #9
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f006 fab8 	bl	800705c <strtoul>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	70da      	strb	r2, [r3, #3]
	sd->current_per_ppm_coefficient_frac = (uint16_t)strtoul(si->current_per_ppm_coefficient_frac, NULL, 16);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	330c      	adds	r3, #12
 8000af8:	2210      	movs	r2, #16
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 faad 	bl	800705c <strtoul>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	809a      	strh	r2, [r3, #4]
	sd->threshold = (uint16_t)strtoul(si->threshold, NULL, 16);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3310      	adds	r3, #16
 8000b0e:	2210      	movs	r2, #16
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f006 faa2 	bl	800705c <strtoul>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	80da      	strh	r2, [r3, #6]
	sd->device_turned_on_with_sensor_counter = (uint16_t)strtoul(si->device_turned_on_with_sensor_counter, NULL, 16);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3314      	adds	r3, #20
 8000b24:	2210      	movs	r2, #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fa97 	bl	800705c <strtoul>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	811a      	strh	r2, [r3, #8]
	sd->sensor_fired_counter = (uint32_t)strtoul(si->sensor_fired_counter, NULL, 16);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3319      	adds	r3, #25
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 fa8c 	bl	800705c <strtoul>
 8000b44:	4602      	mov	r2, r0
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	60da      	str	r2, [r3, #12]
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <read_sensor_data_from_eeprom>:


ERRORS read_sensor_data_from_eeprom(struct sensor_data* sd) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b08c      	sub	sp, #48	; 0x30
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	struct sensor_info si;
	ERRORS last_error=read_sensor_info_from_eeprom(&si);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f810 	bl	8000b84 <read_sensor_info_from_eeprom>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	map_sensor_info_to_sensor_data(&si, sd);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff8f 	bl	8000a94 <map_sensor_info_to_sensor_data>
	return last_error;
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <read_sensor_info_from_eeprom>:

ERRORS read_sensor_info_from_eeprom(struct sensor_info* si)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	if(check_eeprom_data() != OK)
 8000b8c:	f7ff ff3a 	bl	8000a04 <check_eeprom_data>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d001      	beq.n	8000b9a <read_sensor_info_from_eeprom+0x16>
		return EEPROM_DATA_INVALID;
 8000b96:	2304      	movs	r3, #4
 8000b98:	e077      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>


	if(read_from_eeprom_byte_by_byte(VERSION_NUM_ADDR, VERSION_NUM_SIZE, (uint8_t*)(si->version_num)) != OK)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff fef9 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d001      	beq.n	8000bb0 <read_sensor_info_from_eeprom+0x2c>
	{
		return CRITICAL_ERROR;
 8000bac:	2302      	movs	r3, #2
 8000bae:	e06c      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	char forbidden_version[] = "00";
 8000bb0:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <read_sensor_info_from_eeprom+0x110>)
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	8019      	strh	r1, [r3, #0]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	0c12      	lsrs	r2, r2, #16
 8000bc0:	701a      	strb	r2, [r3, #0]
	if(strcmp(si->version_num,forbidden_version) == 0) //if they are identical
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f107 020c 	add.w	r2, r7, #12
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fb00 	bl	80001d0 <strcmp>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <read_sensor_info_from_eeprom+0x56>
	{
		return EEPROM_SENSOR_VERSION_INVALID;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e057      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}

	if(read_from_eeprom_byte_by_byte(SENSOR_ID_ADDR, SENSOR_ID_SIZE, (uint8_t*)(si->sensor_id)) != OK)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3303      	adds	r3, #3
 8000bde:	461a      	mov	r2, r3
 8000be0:	2102      	movs	r1, #2
 8000be2:	2003      	movs	r0, #3
 8000be4:	f7ff fed8 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d001      	beq.n	8000bf2 <read_sensor_info_from_eeprom+0x6e>
	{
		return CRITICAL_ERROR;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	e04b      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(SENSOR_TYPE_ADDR, SENSOR_TYPE_SIZE, (uint8_t*)(si->sensor_type)) != OK)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3306      	adds	r3, #6
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f7ff fecc 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d001      	beq.n	8000c0a <read_sensor_info_from_eeprom+0x86>
	{
		return CRITICAL_ERROR;
 8000c06:	2302      	movs	r3, #2
 8000c08:	e03f      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE,
			(uint8_t*)(si->current_per_ppm_coefficient_dec)) != OK)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3309      	adds	r3, #9
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE,
 8000c0e:	461a      	mov	r2, r3
 8000c10:	2102      	movs	r1, #2
 8000c12:	2007      	movs	r0, #7
 8000c14:	f7ff fec0 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d001      	beq.n	8000c22 <read_sensor_info_from_eeprom+0x9e>
	{
		return CRITICAL_ERROR;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e033      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE,
			(uint8_t*)(si->current_per_ppm_coefficient_frac)) != OK)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	330c      	adds	r3, #12
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE,
 8000c26:	461a      	mov	r2, r3
 8000c28:	2103      	movs	r1, #3
 8000c2a:	2009      	movs	r0, #9
 8000c2c:	f7ff feb4 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d001      	beq.n	8000c3a <read_sensor_info_from_eeprom+0xb6>
	{
		return CRITICAL_ERROR;
 8000c36:	2302      	movs	r3, #2
 8000c38:	e027      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(THRESHOLD_ADDR, THRESHOLD_SIZE, (uint8_t*)(si->threshold)) != OK)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	461a      	mov	r2, r3
 8000c40:	2103      	movs	r1, #3
 8000c42:	200c      	movs	r0, #12
 8000c44:	f7ff fea8 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d001      	beq.n	8000c52 <read_sensor_info_from_eeprom+0xce>
	{
		return CRITICAL_ERROR;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e01b      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE,
			(uint8_t*)(si->device_turned_on_with_sensor_counter)) != OK)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3314      	adds	r3, #20
	if(read_from_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE,
 8000c56:	461a      	mov	r2, r3
 8000c58:	2104      	movs	r1, #4
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f7ff fe9c 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d001      	beq.n	8000c6a <read_sensor_info_from_eeprom+0xe6>
	{
		return CRITICAL_ERROR;
 8000c66:	2302      	movs	r3, #2
 8000c68:	e00f      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, SENSOR_FIRED_COUNTER_SIZE,
			(uint8_t*)(si->sensor_fired_counter)) != OK)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3319      	adds	r3, #25
	if(read_from_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, SENSOR_FIRED_COUNTER_SIZE,
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2106      	movs	r1, #6
 8000c72:	2013      	movs	r0, #19
 8000c74:	f7ff fe90 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <read_sensor_info_from_eeprom+0xfe>
	{
		return CRITICAL_ERROR;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e003      	b.n	8000c8a <read_sensor_info_from_eeprom+0x106>
	}

	add_end_chars_to_sensor_info(si);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fee4 	bl	8000a50 <add_end_chars_to_sensor_info>

	return OK;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	08007838 	.word	0x08007838

08000c98 <show_read_sensor_data>:
	sprintf(msg_buffer,"+========================+\n\r");
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
}

void show_read_sensor_data(struct sensor_data* sd)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b0c2      	sub	sp, #264	; 0x108
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	6018      	str	r0, [r3, #0]
	char msg_buffer[256];
	sprintf(msg_buffer,"+======EEPROM[d]=========+\n\r");
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4a75      	ldr	r2, [pc, #468]	; (8000e7c <show_read_sensor_data+0x1e4>)
 8000ca8:	461c      	mov	r4, r3
 8000caa:	4615      	mov	r5, r2
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cb4:	c407      	stmia	r4!, {r0, r1, r2}
 8000cb6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fa91 	bl	80001e4 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f107 0108 	add.w	r1, r7, #8
 8000cca:	230a      	movs	r3, #10
 8000ccc:	486c      	ldr	r0, [pc, #432]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000cce:	f005 fa75 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"VERSION NUMBER: %u\n\r", sd->version_num);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4969      	ldr	r1, [pc, #420]	; (8000e84 <show_read_sensor_data+0x1ec>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 f921 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa7a 	bl	80001e4 <strlen>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	f107 0108 	add.w	r1, r7, #8
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	4861      	ldr	r0, [pc, #388]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000cfc:	f005 fa5e 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR ID: %u\n\r", sd->sensor_id);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	461a      	mov	r2, r3
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	495e      	ldr	r1, [pc, #376]	; (8000e88 <show_read_sensor_data+0x1f0>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 f90a 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fa63 	bl	80001e4 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	f107 0108 	add.w	r1, r7, #8
 8000d26:	230a      	movs	r3, #10
 8000d28:	4855      	ldr	r0, [pc, #340]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000d2a:	f005 fa47 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR TYPE: %u\n\r", sd->sensor_type);
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	461a      	mov	r2, r3
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4954      	ldr	r1, [pc, #336]	; (8000e8c <show_read_sensor_data+0x1f4>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 f8f3 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa4c 	bl	80001e4 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f107 0108 	add.w	r1, r7, #8
 8000d54:	230a      	movs	r3, #10
 8000d56:	484a      	ldr	r0, [pc, #296]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000d58:	f005 fa30 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"CURRENT_DEC: %u\n\r", sd->current_per_ppm_coefficient_dec);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4949      	ldr	r1, [pc, #292]	; (8000e90 <show_read_sensor_data+0x1f8>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f006 f8dc 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa35 	bl	80001e4 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	230a      	movs	r3, #10
 8000d84:	483e      	ldr	r0, [pc, #248]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000d86:	f005 fa19 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"CURRENT FRAC: %u\n\r", sd->current_per_ppm_coefficient_frac);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	889b      	ldrh	r3, [r3, #4]
 8000d90:	461a      	mov	r2, r3
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	493f      	ldr	r1, [pc, #252]	; (8000e94 <show_read_sensor_data+0x1fc>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 f8c5 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa1e 	bl	80001e4 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f107 0108 	add.w	r1, r7, #8
 8000db0:	230a      	movs	r3, #10
 8000db2:	4833      	ldr	r0, [pc, #204]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000db4:	f005 fa02 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"THRESHOLD: %u\n\r", sd->threshold);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	88db      	ldrh	r3, [r3, #6]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	4934      	ldr	r1, [pc, #208]	; (8000e98 <show_read_sensor_data+0x200>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 f8ae 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa07 	bl	80001e4 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f107 0108 	add.w	r1, r7, #8
 8000dde:	230a      	movs	r3, #10
 8000de0:	4827      	ldr	r0, [pc, #156]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000de2:	f005 f9eb 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"DEVICE ON COUNTER: %u\n\r", sd->device_turned_on_with_sensor_counter);
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	891b      	ldrh	r3, [r3, #8]
 8000dec:	461a      	mov	r2, r3
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	492a      	ldr	r1, [pc, #168]	; (8000e9c <show_read_sensor_data+0x204>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 f897 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9f0 	bl	80001e4 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f107 0108 	add.w	r1, r7, #8
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	481c      	ldr	r0, [pc, #112]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000e10:	f005 f9d4 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR FIRED COUNTER: %lu\n\r", sd->sensor_fired_counter);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4920      	ldr	r1, [pc, #128]	; (8000ea0 <show_read_sensor_data+0x208>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 f881 	bl	8006f28 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff f9da 	bl	80001e4 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	f107 0108 	add.w	r1, r7, #8
 8000e38:	230a      	movs	r3, #10
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000e3c:	f005 f9be 	bl	80061bc <HAL_UART_Transmit>
	sprintf(msg_buffer,"+========================+\n\r");
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <show_read_sensor_data+0x20c>)
 8000e46:	461c      	mov	r4, r3
 8000e48:	4615      	mov	r5, r2
 8000e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e52:	c407      	stmia	r4!, {r0, r1, r2}
 8000e54:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 10);
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9c2 	bl	80001e4 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	f107 0108 	add.w	r1, r7, #8
 8000e68:	230a      	movs	r3, #10
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <show_read_sensor_data+0x1e8>)
 8000e6c:	f005 f9a6 	bl	80061bc <HAL_UART_Transmit>
}
 8000e70:	bf00      	nop
 8000e72:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08007924 	.word	0x08007924
 8000e80:	20000338 	.word	0x20000338
 8000e84:	08007944 	.word	0x08007944
 8000e88:	0800795c 	.word	0x0800795c
 8000e8c:	0800796c 	.word	0x0800796c
 8000e90:	08007980 	.word	0x08007980
 8000e94:	08007994 	.word	0x08007994
 8000e98:	080079a8 	.word	0x080079a8
 8000e9c:	080079b8 	.word	0x080079b8
 8000ea0:	080079d0 	.word	0x080079d0
 8000ea4:	08007904 	.word	0x08007904

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 ffc0 	bl	8001e32 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f885 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 facb 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 faab 	bl	8001414 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 fa79 	bl	80013b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ec2:	f000 f92d 	bl	8001120 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ec6:	f000 f99f 	bl	8001208 <MX_I2C1_Init>
  MX_RTC_Init();
 8000eca:	f000 f9dd 	bl	8001288 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000ece:	f000 fa41 	bl	8001354 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ed2:	f000 f911 	bl	80010f8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
#ifdef DEBUG_MODE
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2108      	movs	r1, #8
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <main+0xf0>)
 8000edc:	f002 ff80 	bl	8003de0 <HAL_GPIO_WritePin>
#endif
  last_error=read_sensor_data_from_eeprom(&sd);
 8000ee0:	482e      	ldr	r0, [pc, #184]	; (8000f9c <main+0xf4>)
 8000ee2:	f7ff fe36 	bl	8000b52 <read_sensor_data_from_eeprom>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <main+0xf8>)
 8000eec:	701a      	strb	r2, [r3, #0]
  #ifdef DEBUG_MODE
  show_read_sensor_data(&sd);
 8000eee:	482b      	ldr	r0, [pc, #172]	; (8000f9c <main+0xf4>)
 8000ef0:	f7ff fed2 	bl	8000c98 <show_read_sensor_data>
  #endif



#ifdef DEBUG_MODE
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4827      	ldr	r0, [pc, #156]	; (8000f98 <main+0xf0>)
 8000efa:	f002 ff71 	bl	8003de0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(last_error == OK)
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <main+0xf8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d13e      	bne.n	8000f84 <main+0xdc>
	  {
		  char* buffer = (char*)malloc(100*sizeof(char));
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f005 ff3e 	bl	8006d88 <malloc>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	607b      	str	r3, [r7, #4]
		  power_mode_sleep(&hrtc);
 8000f10:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <main+0xfc>)
 8000f12:	f000 fcb3 	bl	800187c <power_mode_sleep>
		  reinitializePeriphs();
 8000f16:	f000 fb19 	bl	800154c <reinitializePeriphs>
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_vals, 2);
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4922      	ldr	r1, [pc, #136]	; (8000fa8 <main+0x100>)
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <main+0x104>)
 8000f20:	f001 fb9a 	bl	8002658 <HAL_ADC_Start_DMA>
		  while(!filter_done){}
 8000f24:	bf00      	nop
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <main+0x108>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0fb      	beq.n	8000f26 <main+0x7e>
		  HAL_ADC_Stop_DMA(&hadc1);
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <main+0x104>)
 8000f30:	f001 fc16 	bl	8002760 <HAL_ADC_Stop_DMA>
		  #ifdef DEBUG_MODE
			  sprintf(buffer,"\rControl group (bare 12b ADC readings, averaged): measured[0] = %lu /// measured[1] = %lu",measured_values[0],measured_values[1]);
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <main+0x10c>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <main+0x10c>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	491e      	ldr	r1, [pc, #120]	; (8000fb8 <main+0x110>)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f005 fff1 	bl	8006f28 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff f94c 	bl	80001e4 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	230a      	movs	r3, #10
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <main+0x114>)
 8000f56:	f005 f931 	bl	80061bc <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <main+0xf0>)
 8000f60:	f002 ff3e 	bl	8003de0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f000 ffd8 	bl	8001f1c <HAL_Delay>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <main+0xf0>)
 8000f72:	f002 ff35 	bl	8003de0 <HAL_GPIO_WritePin>
			  }
			  else
				  sprintf(buffer,"\bMeasurement result is normal (sub-threshold level).\r");
			  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
		  #endif
		  free(buffer);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f005 ff0e 	bl	8006d98 <free>
		  filter_done = 0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <main+0x108>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e7bc      	b.n	8000efe <main+0x56>
	  }
	  else
	  {
		  signal_error(last_error);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <main+0xf8>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fc61 	bl	8001850 <signal_error>
		  while(1)
		  {
			  HAL_Delay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f92:	f000 ffc3 	bl	8001f1c <HAL_Delay>
 8000f96:	e7fa      	b.n	8000f8e <main+0xe6>
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	20001438 	.word	0x20001438
 8000fa0:	2000020c 	.word	0x2000020c
 8000fa4:	20001404 	.word	0x20001404
 8000fa8:	200001fc 	.word	0x200001fc
 8000fac:	200003b8 	.word	0x200003b8
 8000fb0:	20000202 	.word	0x20000202
 8000fb4:	20001448 	.word	0x20001448
 8000fb8:	080079ec 	.word	0x080079ec
 8000fbc:	20000338 	.word	0x20000338

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ac      	sub	sp, #176	; 0xb0
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fca:	2244      	movs	r2, #68	; 0x44
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 feea 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2254      	movs	r2, #84	; 0x54
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fedc 	bl	8006da8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ff0:	f003 fb18 	bl	8004624 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <SystemClock_Config+0x130>)
 8000ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ffa:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <SystemClock_Config+0x130>)
 8000ffc:	f023 0318 	bic.w	r3, r3, #24
 8001000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001004:	2314      	movs	r3, #20
 8001006:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001018:	2360      	movs	r3, #96	; 0x60
 800101a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001024:	2301      	movs	r3, #1
 8001026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001030:	2310      	movs	r3, #16
 8001032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001036:	2307      	movs	r3, #7
 8001038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fbd9 	bl	8004804 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001058:	f000 fc09 	bl	800186e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2303      	movs	r3, #3
 8001062:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001070:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001074:	2101      	movs	r1, #1
 8001076:	4618      	mov	r0, r3
 8001078:	f003 ffe4 	bl	8005044 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001082:	f000 fbf4 	bl	800186e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <SystemClock_Config+0x134>)
 8001088:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010aa:	2310      	movs	r3, #16
 80010ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010be:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 f9c2 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80010ce:	f000 fbce 	bl	800186e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d6:	f003 faf7 	bl	80046c8 <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80010e0:	f000 fbc5 	bl	800186e <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010e4:	f004 fba4 	bl	8005830 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010e8:	bf00      	nop
 80010ea:	37b0      	adds	r7, #176	; 0xb0
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	00024043 	.word	0x00024043

080010f8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	200b      	movs	r0, #11
 8001102:	f002 fa56 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001106:	200b      	movs	r0, #11
 8001108:	f002 fa6f 	bl	80035ea <HAL_NVIC_EnableIRQ>
  /* RTC_WKUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2003      	movs	r0, #3
 8001112:	f002 fa4e 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001116:	2003      	movs	r0, #3
 8001118:	f002 fa67 	bl	80035ea <HAL_NVIC_EnableIRQ>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001138:	4a30      	ldr	r2, [pc, #192]	; (80011fc <MX_ADC1_Init+0xdc>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_ADC1_Init+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_ADC1_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001150:	2201      	movs	r2, #1
 8001152:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001156:	2204      	movs	r2, #4
 8001158:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC1_Init+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001162:	2201      	movs	r2, #1
 8001164:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001168:	2202      	movs	r2, #2
 800116a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_ADC1_Init+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_ADC1_Init+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC1_Init+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001196:	4818      	ldr	r0, [pc, #96]	; (80011f8 <MX_ADC1_Init+0xd8>)
 8001198:	f001 f918 	bl	80023cc <HAL_ADC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011a2:	f000 fb64 	bl	800186e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_ADC1_Init+0xe0>)
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011aa:	2306      	movs	r3, #6
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011ae:	2307      	movs	r3, #7
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b2:	237f      	movs	r3, #127	; 0x7f
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b6:	2304      	movs	r3, #4
 80011b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_ADC1_Init+0xd8>)
 80011c4:	f001 fb42 	bl	800284c <HAL_ADC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ce:	f000 fb4e 	bl	800186e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_ADC1_Init+0xe4>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011d6:	230c      	movs	r3, #12
 80011d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC1_Init+0xd8>)
 80011e0:	f001 fb34 	bl	800284c <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80011ea:	f000 fb40 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200003b8 	.word	0x200003b8
 80011fc:	50040000 	.word	0x50040000
 8001200:	25b00200 	.word	0x25b00200
 8001204:	2e300800 	.word	0x2e300800

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_I2C1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_I2C1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_I2C1_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <MX_I2C1_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_I2C1_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <MX_I2C1_Init+0x74>)
 8001244:	f002 fde4 	bl	8003e10 <HAL_I2C_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124e:	f000 fb0e 	bl	800186e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_I2C1_Init+0x74>)
 8001256:	f003 f94d 	bl	80044f4 <HAL_I2CEx_ConfigAnalogFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001260:	f000 fb05 	bl	800186e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_I2C1_Init+0x74>)
 8001268:	f003 f98f 	bl	800458a <HAL_I2CEx_ConfigDigitalFilter>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 fafc 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000224 	.word	0x20000224
 8001280:	40005400 	.word	0x40005400
 8001284:	00707cbb 	.word	0x00707cbb

08001288 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_RTC_Init+0xc4>)
 80012a2:	4a2b      	ldr	r2, [pc, #172]	; (8001350 <MX_RTC_Init+0xc8>)
 80012a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_RTC_Init+0xc4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_RTC_Init+0xc4>)
 80012ae:	227f      	movs	r2, #127	; 0x7f
 80012b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_RTC_Init+0xc4>)
 80012b4:	22ff      	movs	r2, #255	; 0xff
 80012b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_RTC_Init+0xc4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_RTC_Init+0xc4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_RTC_Init+0xc4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_RTC_Init+0xc4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <MX_RTC_Init+0xc4>)
 80012d2:	f004 fbad 	bl	8005a30 <HAL_RTC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 fac7 	bl	800186e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2201      	movs	r2, #1
 80012f8:	4619      	mov	r1, r3
 80012fa:	4814      	ldr	r0, [pc, #80]	; (800134c <MX_RTC_Init+0xc4>)
 80012fc:	f004 fc13 	bl	8005b26 <HAL_RTC_SetTime>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001306:	f000 fab2 	bl	800186e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800130a:	2307      	movs	r3, #7
 800130c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 800130e:	2309      	movs	r3, #9
 8001310:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8001312:	2312      	movs	r3, #18
 8001314:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x99;
 8001316:	2399      	movs	r3, #153	; 0x99
 8001318:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <MX_RTC_Init+0xc4>)
 8001322:	f004 fc9d 	bl	8005c60 <HAL_RTC_SetDate>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800132c:	f000 fa9f 	bl	800186e <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_RTC_Init+0xc4>)
 8001336:	f004 fdd1 	bl	8005edc <HAL_RTCEx_SetWakeUpTimer_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001340:	f000 fa95 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20001404 	.word	0x20001404
 8001350:	40002800 	.word	0x40002800

08001354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART1_UART_Init+0x58>)
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <MX_USART1_UART_Init+0x5c>)
 800135c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001360:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_USART1_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART1_UART_Init+0x58>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x58>)
 8001398:	f004 fec2 	bl	8006120 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013a2:	f000 fa64 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002b8 	.word	0x200002b8
 80013b0:	40013800 	.word	0x40013800

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <MX_USART2_UART_Init+0x5c>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART2_UART_Init+0x58>)
 80013f8:	f004 fe92 	bl	8006120 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001402:	f000 fa34 	bl	800186e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000338 	.word	0x20000338
 8001410:	40004400 	.word	0x40004400

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_DMA_Init+0x38>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <MX_DMA_Init+0x38>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6493      	str	r3, [r2, #72]	; 0x48
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_DMA_Init+0x38>)
 8001428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	200f      	movs	r0, #15
 8001438:	f002 f8bb 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800143c:	200f      	movs	r0, #15
 800143e:	f002 f8d4 	bl	80035ea <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <MX_GPIO_Init+0xf0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a35      	ldr	r2, [pc, #212]	; (8001540 <MX_GPIO_Init+0xf0>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <MX_GPIO_Init+0xf0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MX_GPIO_Init+0xf0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <MX_GPIO_Init+0xf0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MX_GPIO_Init+0xf0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_GPIO_Init+0xf0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a29      	ldr	r2, [pc, #164]	; (8001540 <MX_GPIO_Init+0xf0>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_GPIO_Init+0xf0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_GPIO_Init+0xf0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <MX_GPIO_Init+0xf0>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <MX_GPIO_Init+0xf0>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SIM808_PWR_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2128      	movs	r1, #40	; 0x28
 80014ca:	481e      	ldr	r0, [pc, #120]	; (8001544 <MX_GPIO_Init+0xf4>)
 80014cc:	f002 fc88 	bl	8003de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7
                           PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 80014d0:	f641 13aa 	movw	r3, #6570	; 0x19aa
 80014d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e8:	f002 fb10 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80014ec:	2313      	movs	r3, #19
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f0:	2303      	movs	r3, #3
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4811      	ldr	r0, [pc, #68]	; (8001544 <MX_GPIO_Init+0xf4>)
 8001500:	f002 fb04 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SIM808_PWR_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SIM808_PWR_Pin;
 8001504:	2328      	movs	r3, #40	; 0x28
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	480a      	ldr	r0, [pc, #40]	; (8001544 <MX_GPIO_Init+0xf4>)
 800151c:	f002 faf6 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001520:	2308      	movs	r3, #8
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_GPIO_Init+0xf8>)
 8001534:	f002 faea 	bl	8003b0c <HAL_GPIO_Init>

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	48000400 	.word	0x48000400
 8001548:	48001c00 	.word	0x48001c00

0800154c <reinitializePeriphs>:

/* USER CODE BEGIN 4 */
void reinitializePeriphs()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8001550:	f7ff fd36 	bl	8000fc0 <SystemClock_Config>
	MX_GPIO_Init();
 8001554:	f7ff ff7c 	bl	8001450 <MX_GPIO_Init>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <GPIO_AnalogState_Config>:
/*
 * TODO
 * leave one port/PIN for Ethanol sensor to wake up from the button press
 */
void GPIO_AnalogState_Config()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a29      	ldr	r2, [pc, #164]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 80015ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d2:	617b      	str	r3, [r7, #20]

//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <GPIO_AnalogState_Config+0xcc>)
 80015dc:	f002 fa96 	bl	8003b0c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <GPIO_AnalogState_Config+0xd0>)
 80015e8:	f002 fa90 	bl	8003b0c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <GPIO_AnalogState_Config+0xd4>)
 80015f4:	f002 fa8a 	bl	8003b0c <HAL_GPIO_Init>

//	__HAL_RCC_GPIOA_CLK_DISABLE();
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 80015fe:	f023 0302 	bic.w	r3, r3, #2
 8001602:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <GPIO_AnalogState_Config+0xc8>)
 8001616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800161a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48001c00 	.word	0x48001c00

08001634 <SystemClock_Low>:

void SystemClock_Low(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2244      	movs	r2, #68	; 0x44
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fba9 	bl	8006da8 <memset>

  /* MSI is enabled after System reset, update MSI to 24Mhz (RCC_MSIRANGE_9) */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001656:	2310      	movs	r3, #16
 8001658:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800165a:	2301      	movs	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800165e:	2340      	movs	r3, #64	; 0x40
 8001660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8001666:	2301      	movs	r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4618      	mov	r0, r3
 800166e:	f003 f8c9 	bl	8004804 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Low+0x48>
  {
    /* Initialization Error */
    Error_Handler();
 8001678:	f000 f8f9 	bl	800186e <Error_Handler>
  }

  /* Select MSI as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800167c:	230f      	movs	r3, #15
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001680:	2300      	movs	r3, #0
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001694:	2103      	movs	r1, #3
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fcd4 	bl	8005044 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Low+0x72>
  {
    /* Initialization Error */
    Error_Handler();
 80016a2:	f000 f8e4 	bl	800186e <Error_Handler>
  }

}
 80016a6:	bf00      	nop
 80016a8:	3758      	adds	r7, #88	; 0x58
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
//		measured_values[i] = (adc_vals[i]*3300)/4095;
		if(!filter_done)
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_ADC_ConvCpltCallback+0x128>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 8087 	bne.w	80017d0 <HAL_ADC_ConvCpltCallback+0x120>
		{
			filter_buffer_sensor[filter_counter] = adc_vals[0];
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x130>)
 80016ca:	8819      	ldrh	r1, [r3, #0]
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <HAL_ADC_ConvCpltCallback+0x134>)
 80016ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			filter_buffer_battery[filter_counter] = adc_vals[1];
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_ADC_ConvCpltCallback+0x130>)
 80016da:	8859      	ldrh	r1, [r3, #2]
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <HAL_ADC_ConvCpltCallback+0x138>)
 80016de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if(filter_counter == FILTER_BUFFER_SIZE-1)
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d16a      	bne.n	80017c4 <HAL_ADC_ConvCpltCallback+0x114>
			{
				for(int i=0;i<FILTER_BUFFER_SIZE;++i)
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e014      	b.n	800171e <HAL_ADC_ConvCpltCallback+0x6e>
				{
					holder[0] += filter_buffer_sensor[i];
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	493a      	ldr	r1, [pc, #232]	; (80017e4 <HAL_ADC_ConvCpltCallback+0x134>)
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001700:	4413      	add	r3, r2
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 8001704:	6013      	str	r3, [r2, #0]
					holder[1] += filter_buffer_battery[i];
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4937      	ldr	r1, [pc, #220]	; (80017e8 <HAL_ADC_ConvCpltCallback+0x138>)
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001712:	4413      	add	r3, r2
 8001714:	4a35      	ldr	r2, [pc, #212]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 8001716:	6053      	str	r3, [r2, #4]
				for(int i=0;i<FILTER_BUFFER_SIZE;++i)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001724:	dbe6      	blt.n	80016f4 <HAL_ADC_ConvCpltCallback+0x44>
				}
				for(int i=0;i<NUM_OF_MEASUREMENTS;++i)
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	e041      	b.n	80017b0 <HAL_ADC_ConvCpltCallback+0x100>
				{
					measured_values_double[i] = ((holder[i]/FILTER_BUFFER_SIZE)*3300)/MAX_ADC_VALUE;
 800172c:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <HAL_ADC_ConvCpltCallback+0x140>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001740:	fb02 f203 	mul.w	r2, r2, r3
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_ADC_ConvCpltCallback+0x144>)
 8001746:	fba3 1302 	umull	r1, r3, r3, r2
 800174a:	1ad2      	subs	r2, r2, r3
 800174c:	0852      	lsrs	r2, r2, #1
 800174e:	4413      	add	r3, r2
 8001750:	0adb      	lsrs	r3, r3, #11
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fee6 	bl	8000524 <__aeabi_ui2d>
 8001758:	4603      	mov	r3, r0
 800175a:	460c      	mov	r4, r1
 800175c:	4926      	ldr	r1, [pc, #152]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x148>)
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	00d2      	lsls	r2, r2, #3
 8001762:	440a      	add	r2, r1
 8001764:	e9c2 3400 	strd	r3, r4, [r2]
					measured_values[i] = (uint16_t)measured_values_double[i];
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x148>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001774:	4618      	mov	r0, r3
 8001776:	4621      	mov	r1, r4
 8001778:	f7fe ff4e 	bl	8000618 <__aeabi_d2uiz>
 800177c:	4603      	mov	r3, r0
 800177e:	b299      	uxth	r1, r3
 8001780:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_ADC_ConvCpltCallback+0x14c>)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					#ifdef DEBUG_MODE
					holder_debug[i] = holder[i]/FILTER_BUFFER_SIZE;
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_ADC_ConvCpltCallback+0x140>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	099a      	lsrs	r2, r3, #6
 8001798:	4919      	ldr	r1, [pc, #100]	; (8001800 <HAL_ADC_ConvCpltCallback+0x150>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					#endif
					holder[i] = 0;
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_ADC_ConvCpltCallback+0x13c>)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2100      	movs	r1, #0
 80017a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<NUM_OF_MEASUREMENTS;++i)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	ddba      	ble.n	800172c <HAL_ADC_ConvCpltCallback+0x7c>
				}
				filter_done = 1;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_ADC_ConvCpltCallback+0x128>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
				filter_counter = 0;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	801a      	strh	r2, [r3, #0]
		}
		else
		{
			//do nothing
		}
}
 80017c2:	e005      	b.n	80017d0 <HAL_ADC_ConvCpltCallback+0x120>
				filter_counter++;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80017ce:	801a      	strh	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	20000202 	.word	0x20000202
 80017dc:	20000200 	.word	0x20000200
 80017e0:	200001fc 	.word	0x200001fc
 80017e4:	20000bec 	.word	0x20000bec
 80017e8:	2000041c 	.word	0x2000041c
 80017ec:	20000204 	.word	0x20000204
 80017f0:	10624dd3 	.word	0x10624dd3
 80017f4:	00100101 	.word	0x00100101
 80017f8:	20001428 	.word	0x20001428
 80017fc:	20001448 	.word	0x20001448
 8001800:	20000210 	.word	0x20000210

08001804 <signal_with_diodes_ms>:

void signal_with_diodes_ms(int num_of_loops, uint32_t ms)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	for(int i=0;i<num_of_loops;++i)
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e012      	b.n	800183a <signal_with_diodes_ms+0x36>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2108      	movs	r1, #8
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <signal_with_diodes_ms+0x48>)
 800181a:	f002 fae1 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 800181e:	6838      	ldr	r0, [r7, #0]
 8001820:	f000 fb7c 	bl	8001f1c <HAL_Delay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2108      	movs	r1, #8
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <signal_with_diodes_ms+0x48>)
 800182a:	f002 fad9 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 800182e:	6838      	ldr	r0, [r7, #0]
 8001830:	f000 fb74 	bl	8001f1c <HAL_Delay>
	for(int i=0;i<num_of_loops;++i)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbe8      	blt.n	8001814 <signal_with_diodes_ms+0x10>
	}
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	48000400 	.word	0x48000400

08001850 <signal_error>:

void signal_error(ERRORS err)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	signal_with_diodes_ms(err, 1000);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ffcf 	bl	8001804 <signal_with_diodes_ms>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	signal_with_diodes_ms(10,200);
  /* USER CODE END Error_Handler_Debug */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <power_mode_sleep>:
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON,PWR_STOPENTRY_WFI);
}


void power_mode_sleep(RTC_HandleTypeDef* hrtc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	/* Set all GPIO in analog state to reduce power consumption */
	GPIO_AnalogState_Config();
 8001884:	f7ff fe6a 	bl	800155c <GPIO_AnalogState_Config>

	/* Set the System clock to low freq TODO 1MHz? */
	SystemClock_Low();
 8001888:	f7ff fed4 	bl	8001634 <SystemClock_Low>

	/* Enable Power Clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <power_mode_sleep+0x80>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <power_mode_sleep+0x80>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <power_mode_sleep+0x80>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
	/* Configure the main internal regulator output voltage */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018a8:	f002 ff0e 	bl	80046c8 <HAL_PWREx_ControlVoltageScaling>

	/* Set timer for 5s */
	HAL_RTCEx_SetWakeUpTimer_IT(hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f242 7110 	movw	r1, #10000	; 0x2710
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f004 fb12 	bl	8005edc <HAL_RTCEx_SetWakeUpTimer_IT>

	/* Suspend Tick increment to prevent wakeup by Systick interrupt.         */
	/* Otherwise the Systick interrupt will wake up the device within 1ms     */
	/* (HAL time base).                                                       */
	HAL_SuspendTick();
 80018b8:	f000 fb52 	bl	8001f60 <HAL_SuspendTick>

	/* Switch off all clock enable ... */
	RCC->AHB1SMENR = 0x0;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <power_mode_sleep+0x80>)
 80018be:	2200      	movs	r2, #0
 80018c0:	669a      	str	r2, [r3, #104]	; 0x68
	RCC->AHB2SMENR = 0x0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <power_mode_sleep+0x80>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	66da      	str	r2, [r3, #108]	; 0x6c
	RCC->AHB3SMENR = 0x0;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <power_mode_sleep+0x80>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	671a      	str	r2, [r3, #112]	; 0x70
	RCC->APB1SMENR1 = 0x0;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <power_mode_sleep+0x80>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	679a      	str	r2, [r3, #120]	; 0x78
	RCC->APB1SMENR2 = 0x0;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <power_mode_sleep+0x80>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	67da      	str	r2, [r3, #124]	; 0x7c
	RCC->APB2SMENR = 0x0;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <power_mode_sleep+0x80>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Enter SLEEP Mode, Main regulator is ON */
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80018e2:	2101      	movs	r1, #1
 80018e4:	2000      	movs	r0, #0
 80018e6:	f002 fead 	bl	8004644 <HAL_PWR_EnterSLEEPMode>

	HAL_ResumeTick();
 80018ea:	f000 fb49 	bl	8001f80 <HAL_ResumeTick>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f004 fb88 	bl	8006004 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_MspInit+0x44>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_MspInit+0x44>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_MspInit+0x44>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_MspInit+0x44>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <HAL_ADC_MspInit+0xcc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d14f      	bne.n	8001a0a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_ADC_MspInit+0xd0>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <HAL_ADC_MspInit+0xd0>)
 8001970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_ADC_MspInit+0xd0>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_ADC_MspInit+0xd0>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_ADC_MspInit+0xd0>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_ADC_MspInit+0xd0>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800199a:	2350      	movs	r3, #80	; 0x50
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800199e:	230b      	movs	r3, #11
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f002 f8ac 	bl	8003b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_ADC_MspInit+0xd8>)
 80019b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019e4:	2220      	movs	r2, #32
 80019e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 80019f0:	f001 fe16 	bl	8003620 <HAL_DMA_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80019fa:	f7ff ff38 	bl	800186e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 8001a02:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <HAL_ADC_MspInit+0xd4>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	50040000 	.word	0x50040000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	200013bc 	.word	0x200013bc
 8001a20:	40020008 	.word	0x40020008

08001a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_I2C_MspInit+0x80>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d129      	bne.n	8001a9a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a64:	2312      	movs	r3, #18
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a70:	2304      	movs	r3, #4
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f002 f845 	bl	8003b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_RTC_MspInit+0x30>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d107      	bne.n	8001ace <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_RTC_MspInit+0x34>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_RTC_MspInit+0x34>)
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40002800 	.word	0x40002800
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a50      	ldr	r2, [pc, #320]	; (8001c44 <HAL_UART_MspInit+0x160>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d159      	bne.n	8001bba <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0a:	4a4f      	ldr	r2, [pc, #316]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6613      	str	r3, [r2, #96]	; 0x60
 8001b12:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b46:	2307      	movs	r3, #7
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	483e      	ldr	r0, [pc, #248]	; (8001c4c <HAL_UART_MspInit+0x168>)
 8001b52:	f001 ffdb 	bl	8003b0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b58:	4a3e      	ldr	r2, [pc, #248]	; (8001c54 <HAL_UART_MspInit+0x170>)
 8001b5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7a:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b8c:	4830      	ldr	r0, [pc, #192]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001b8e:	f001 fd47 	bl	8003620 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8001b98:	f7ff fe69 	bl	800186e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a2c      	ldr	r2, [pc, #176]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001ba0:	66da      	str	r2, [r3, #108]	; 0x6c
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_UART_MspInit+0x16c>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2025      	movs	r0, #37	; 0x25
 8001bae:	f001 fd00 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bb2:	2025      	movs	r0, #37	; 0x25
 8001bb4:	f001 fd19 	bl	80035ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb8:	e03f      	b.n	8001c3a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_UART_MspInit+0x174>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d13a      	bne.n	8001c3a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0x164>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c04:	2307      	movs	r3, #7
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f001 ff7b 	bl	8003b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f001 ff69 	bl	8003b0c <HAL_GPIO_Init>
}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	20000270 	.word	0x20000270
 8001c54:	40020058 	.word	0x40020058
 8001c58:	40004400 	.word	0x40004400

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 f914 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <RTC_WKUP_IRQHandler+0x10>)
 8001cbe:	f004 f9ff 	bl	80060c0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20001404 	.word	0x20001404

08001ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Channel1_IRQHandler+0x10>)
 8001cd2:	f001 fe3c 	bl	800394e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200013bc 	.word	0x200013bc

08001ce0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Channel5_IRQHandler+0x10>)
 8001ce6:	f001 fe32 	bl	800394e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000270 	.word	0x20000270

08001cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <USART1_IRQHandler+0x10>)
 8001cfa:	f004 faf3 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200002b8 	.word	0x200002b8

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f004 fffc 	bl	8006d34 <__errno>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	230c      	movs	r3, #12
 8001d40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20010000 	.word	0x20010000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	20000218 	.word	0x20000218
 8001d70:	20001458 	.word	0x20001458

08001d74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <SystemInit+0x64>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <SystemInit+0x64>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <SystemInit+0x68>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <SystemInit+0x68>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <SystemInit+0x68>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <SystemInit+0x68>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <SystemInit+0x68>)
 8001da0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001da4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001da8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <SystemInit+0x68>)
 8001dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <SystemInit+0x68>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <SystemInit+0x68>)
 8001db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <SystemInit+0x68>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SystemInit+0x64>)
 8001dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dca:	609a      	str	r2, [r3, #8]
#endif
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	40021000 	.word	0x40021000

08001de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de4:	f7ff ffc6 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001de8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dea:	e003      	b.n	8001df4 <LoopCopyDataInit>

08001dec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001df0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001df2:	3104      	adds	r1, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001df4:	480a      	ldr	r0, [pc, #40]	; (8001e20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001df8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dfc:	d3f6      	bcc.n	8001dec <CopyDataInit>
	ldr	r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e00:	e002      	b.n	8001e08 <LoopFillZerobss>

08001e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e04:	f842 3b04 	str.w	r3, [r2], #4

08001e08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <LoopForever+0x16>)
	cmp	r2, r3
 8001e0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e0c:	d3f9      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f004 ff97 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e12:	f7ff f849 	bl	8000ea8 <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e18:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001e1c:	08007be0 	.word	0x08007be0
	ldr	r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e24:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001e28:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001e2c:	20001454 	.word	0x20001454

08001e30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_IRQHandler>

08001e32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f001 fbad 	bl	800359c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f80e 	bl	8001e64 <HAL_InitTick>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	e001      	b.n	8001e58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e54:	f7ff fd54 	bl	8001900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e58:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_InitTick+0x6c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_InitTick+0x70>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_InitTick+0x6c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 fbb9 	bl	8003606 <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d809      	bhi.n	8001eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f001 fb83 	bl	80035b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_InitTick+0x74>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e007      	b.n	8001ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e004      	b.n	8001ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e001      	b.n	8001ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008
 8001f00:	2000144c 	.word	0x2000144c

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000144c 	.word	0x2000144c

08001f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff ffee 	bl	8001f04 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_Delay+0x40>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_SuspendTick+0x1c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_SuspendTick+0x1c>)
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_ResumeTick+0x1c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_ResumeTick+0x1c>)
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3360      	adds	r3, #96	; 0x60
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <LL_ADC_SetOffset+0x44>)
 800202a:	4013      	ands	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	4313      	orrs	r3, r2
 8002038:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	03fff000 	.word	0x03fff000

08002050 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3360      	adds	r3, #96	; 0x60
 800205e:	461a      	mov	r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3360      	adds	r3, #96	; 0x60
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3330      	adds	r3, #48	; 0x30
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	211f      	movs	r1, #31
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	f003 011f 	and.w	r1, r3, #31
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	431a      	orrs	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002124:	bf00      	nop
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3314      	adds	r3, #20
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	0e5b      	lsrs	r3, r3, #25
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	4413      	add	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0d1b      	lsrs	r3, r3, #20
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2107      	movs	r1, #7
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	401a      	ands	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0d1b      	lsrs	r3, r3, #20
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0318 	and.w	r3, r3, #24
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80021ac:	40d9      	lsrs	r1, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	400b      	ands	r3, r1
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	0007ffff 	.word	0x0007ffff

080021d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6093      	str	r3, [r2, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002208:	d101      	bne.n	800220e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800222c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002258:	d101      	bne.n	800225e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f043 0202 	orr.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <LL_ADC_IsEnabled+0x18>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <LL_ADC_IsEnabled+0x1a>
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d101      	bne.n	80022fa <LL_ADC_IsDisableOngoing+0x18>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_IsDisableOngoing+0x1a>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d101      	bne.n	8002370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800238e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d101      	bne.n	80023be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e12a      	b.n	800263c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff faa7 	bl	8001948 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fef1 	bl	80021f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fed7 	bl	80021d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff0c 	bl	8002244 <LL_ADC_IsInternalRegulatorEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d113      	bne.n	800245a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fef0 	bl	800221c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800243c:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_ADC_Init+0x278>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	4a81      	ldr	r2, [pc, #516]	; (8002648 <HAL_ADC_Init+0x27c>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800244c:	e002      	b.n	8002454 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fef0 	bl	8002244 <LL_ADC_IsInternalRegulatorEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f043 0210 	orr.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff64 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002490:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 80c5 	bne.w	800262a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 80c1 	bne.w	800262a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024b0:	f043 0202 	orr.w	r2, r3, #2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fefd 	bl	80022bc <LL_ADC_IsEnabled>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c8:	4860      	ldr	r0, [pc, #384]	; (800264c <HAL_ADC_Init+0x280>)
 80024ca:	f7ff fef7 	bl	80022bc <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4619      	mov	r1, r3
 80024da:	485d      	ldr	r0, [pc, #372]	; (8002650 <HAL_ADC_Init+0x284>)
 80024dc:	f7ff fd60 	bl	8001fa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e5b      	ldrb	r3, [r3, #25]
 80024e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d106      	bne.n	800251c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	3b01      	subs	r3, #1
 8002514:	045b      	lsls	r3, r3, #17
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b45      	ldr	r3, [pc, #276]	; (8002654 <HAL_ADC_Init+0x288>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff01 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002556:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff22 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8002562:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d13d      	bne.n	80025e6 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d13a      	bne.n	80025e6 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002574:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800257c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800258c:	f023 0302 	bic.w	r3, r3, #2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	430b      	orrs	r3, r1
 8002598:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d118      	bne.n	80025d6 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025c6:	430a      	orrs	r2, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	e007      	b.n	80025e6 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10c      	bne.n	8002608 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f023 010f 	bic.w	r1, r3, #15
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	e007      	b.n	8002618 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020f 	bic.w	r2, r2, #15
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000000 	.word	0x20000000
 8002648:	053e2d63 	.word	0x053e2d63
 800264c:	50040000 	.word	0x50040000
 8002650:	50040300 	.word	0x50040300
 8002654:	fff0c007 	.word	0xfff0c007

08002658 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fe75 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d167      	bne.n	8002744 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Start_DMA+0x2a>
 800267e:	2302      	movs	r3, #2
 8002680:	e063      	b.n	800274a <HAL_ADC_Start_DMA+0xf2>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fd70 	bl	8003170 <ADC_Enable>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d14f      	bne.n	800273a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f023 0206 	bic.w	r2, r3, #6
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	659a      	str	r2, [r3, #88]	; 0x58
 80026c6:	e002      	b.n	80026ce <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_ADC_Start_DMA+0xfc>)
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_ADC_Start_DMA+0x100>)
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_ADC_Start_DMA+0x104>)
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	221c      	movs	r2, #28
 80026ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0210 	orr.w	r2, r2, #16
 8002704:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3340      	adds	r3, #64	; 0x40
 8002720:	4619      	mov	r1, r3
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f001 f833 	bl	8003790 <HAL_DMA_Start_IT>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fde8 	bl	8002308 <LL_ADC_REG_StartConversion>
 8002738:	e006      	b.n	8002748 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002742:	e001      	b.n	8002748 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002744:	2302      	movs	r3, #2
 8002746:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	080032d5 	.word	0x080032d5
 8002758:	080033ad 	.word	0x080033ad
 800275c:	080033c9 	.word	0x080033c9

08002760 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Stop_DMA+0x16>
 8002772:	2302      	movs	r3, #2
 8002774:	e051      	b.n	800281a <HAL_ADC_Stop_DMA+0xba>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800277e:	2103      	movs	r1, #3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fc41 	bl	8003008 <ADC_ConversionStop>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d13f      	bne.n	8002810 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d10f      	bne.n	80027ce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f84c 	bl	8003850 <HAL_DMA_Abort>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0210 	bic.w	r2, r2, #16
 80027dc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fd1d 	bl	8003224 <ADC_Disable>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fd17 	bl	8003224 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0b6      	sub	sp, #216	; 0xd8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x22>
 800286a:	2302      	movs	r3, #2
 800286c:	e3b8      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x794>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fd6c 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 839d 	bne.w	8002fc2 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d824      	bhi.n	80028da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	3b02      	subs	r3, #2
 8002896:	2b03      	cmp	r3, #3
 8002898:	d81b      	bhi.n	80028d2 <HAL_ADC_ConfigChannel+0x86>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <HAL_ADC_ConfigChannel+0x54>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028b9 	.word	0x080028b9
 80028a8:	080028c1 	.word	0x080028c1
 80028ac:	080028c9 	.word	0x080028c9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	220c      	movs	r2, #12
 80028b4:	605a      	str	r2, [r3, #4]
          break;
 80028b6:	e011      	b.n	80028dc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2212      	movs	r2, #18
 80028bc:	605a      	str	r2, [r3, #4]
          break;
 80028be:	e00d      	b.n	80028dc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2218      	movs	r2, #24
 80028c4:	605a      	str	r2, [r3, #4]
          break;
 80028c6:	e009      	b.n	80028dc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ce:	605a      	str	r2, [r3, #4]
          break;
 80028d0:	e004      	b.n	80028dc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2206      	movs	r2, #6
 80028d6:	605a      	str	r2, [r3, #4]
          break;
 80028d8:	e000      	b.n	80028dc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028da:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f7ff fbf5 	bl	80020d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fd30 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 80028f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd50 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8002906:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800290a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 81a6 	bne.w	8002c60 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 81a1 	bne.w	8002c60 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6819      	ldr	r1, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	461a      	mov	r2, r3
 800292c:	f7ff fc00 	bl	8002130 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00a      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6919      	ldr	r1, [r3, #16]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002962:	f7ff fb51 	bl	8002008 <LL_ADC_SetOffset>
 8002966:	e17b      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fb6e 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x148>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fb63 	bl	8002050 <LL_ADC_GetOffsetChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	f003 021f 	and.w	r2, r3, #31
 8002992:	e01e      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x186>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fb58 	bl	8002050 <LL_ADC_GetOffsetChannel>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e004      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80029c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x19e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	e018      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x1d0>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e004      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fb27 	bl	800207c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fb0b 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x20e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb00 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	e01e      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x24c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff faf5 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e004      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x264>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	e018      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x296>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e004      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d106      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fac4 	bl	800207c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff faa8 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x2d4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fa9d 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	f003 021f 	and.w	r2, r3, #31
 8002b1e:	e01e      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x312>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2102      	movs	r1, #2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fa92 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	e004      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x32a>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	0e9b      	lsrs	r3, r3, #26
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	e016      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x358>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e004      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fa63 	bl	800207c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2103      	movs	r1, #3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fa47 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x396>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2103      	movs	r1, #3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fa3c 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	e017      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x3c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2103      	movs	r1, #3
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa31 	bl	8002050 <LL_ADC_GetOffsetChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d105      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x3de>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	e011      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x402>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d106      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	2103      	movs	r1, #3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fa0e 	bl	800207c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fb29 	bl	80022bc <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 813f 	bne.w	8002ef0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f7ff fa82 	bl	8002188 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a8e      	ldr	r2, [pc, #568]	; (8002ec4 <HAL_ADC_ConfigChannel+0x678>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f040 8130 	bne.w	8002ef0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x46c>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e019      	b.n	8002cec <HAL_ADC_ConfigChannel+0x4a0>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2b09      	cmp	r3, #9
 8002ce4:	bf94      	ite	ls
 8002ce6:	2301      	movls	r3, #1
 8002ce8:	2300      	movhi	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d079      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x4c0>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	3301      	adds	r3, #1
 8002d04:	069b      	lsls	r3, r3, #26
 8002d06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d0a:	e015      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x4ec>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	069b      	lsls	r3, r3, #26
 8002d34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x50c>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	e017      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x53c>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	ea42 0103 	orr.w	r1, r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x562>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	051b      	lsls	r3, r3, #20
 8002dac:	e018      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x594>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e003      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de0:	430b      	orrs	r3, r1
 8002de2:	e080      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x5b4>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	3301      	adds	r3, #1
 8002df8:	069b      	lsls	r3, r3, #26
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	e015      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x5e0>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e003      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x600>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	e017      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x630>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	61fb      	str	r3, [r7, #28]
  return result;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	ea42 0103 	orr.w	r1, r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x65c>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	3301      	adds	r3, #1
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b1e      	subs	r3, #30
 8002ea0:	051b      	lsls	r3, r3, #20
 8002ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	e01d      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x698>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	613b      	str	r3, [r7, #16]
  return result;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e005      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x684>
 8002ec4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f003 021f 	and.w	r2, r3, #31
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	3b1e      	subs	r3, #30
 8002ede:	051b      	lsls	r3, r3, #20
 8002ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	6892      	ldr	r2, [r2, #8]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7ff f920 	bl	8002130 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_ADC_ConfigChannel+0x79c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d06b      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002efc:	483b      	ldr	r0, [pc, #236]	; (8002fec <HAL_ADC_ConfigChannel+0x7a0>)
 8002efe:	f7ff f875 	bl	8001fec <LL_ADC_GetCommonPathInternalCh>
 8002f02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d126      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d120      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d156      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f2e:	4619      	mov	r1, r3
 8002f30:	482e      	ldr	r0, [pc, #184]	; (8002fec <HAL_ADC_ConfigChannel+0x7a0>)
 8002f32:	f7ff f848 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <HAL_ADC_ConfigChannel+0x7b0>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	099a      	lsrs	r2, r3, #6
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f4e:	e002      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f5c:	e03a      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d113      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x744>
 8002f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10d      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d12a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f86:	4619      	mov	r1, r3
 8002f88:	4818      	ldr	r0, [pc, #96]	; (8002fec <HAL_ADC_ConfigChannel+0x7a0>)
 8002f8a:	f7ff f81c 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8e:	e021      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d11c      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb8:	4619      	mov	r1, r3
 8002fba:	480c      	ldr	r0, [pc, #48]	; (8002fec <HAL_ADC_ConfigChannel+0x7a0>)
 8002fbc:	f7ff f803 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
 8002fc0:	e008      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fdc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	37d8      	adds	r7, #216	; 0xd8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	80080000 	.word	0x80080000
 8002fec:	50040300 	.word	0x50040300
 8002ff0:	c7520000 	.word	0xc7520000
 8002ff4:	50040000 	.word	0x50040000
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	053e2d63 	.word	0x053e2d63
 8003000:	cb840000 	.word	0xcb840000
 8003004:	80000001 	.word	0x80000001

08003008 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f99a 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 8003024:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f9bb 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 8003030:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8090 	beq.w	8003160 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02a      	beq.n	80030a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7e5b      	ldrb	r3, [r3, #25]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d126      	bne.n	80030a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7e1b      	ldrb	r3, [r3, #24]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d122      	bne.n	80030a4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003062:	e014      	b.n	800308e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4a41      	ldr	r2, [pc, #260]	; (800316c <ADC_ConversionStop+0x164>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d90d      	bls.n	8003088 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e06c      	b.n	8003162 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d1e3      	bne.n	8003064 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d014      	beq.n	80030d4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff f952 	bl	8002358 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f90f 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d104      	bne.n	80030d4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff f92e 	bl	8002330 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d014      	beq.n	8003104 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f961 	bl	80023a6 <LL_ADC_INJ_IsConversionOngoing>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f8f7 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f93d 	bl	800237e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d004      	beq.n	8003114 <ADC_ConversionStop+0x10c>
 800310a:	2b03      	cmp	r3, #3
 800310c:	d105      	bne.n	800311a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800310e:	230c      	movs	r3, #12
 8003110:	617b      	str	r3, [r7, #20]
        break;
 8003112:	e005      	b.n	8003120 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003114:	2308      	movs	r3, #8
 8003116:	617b      	str	r3, [r7, #20]
        break;
 8003118:	e002      	b.n	8003120 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800311a:	2304      	movs	r3, #4
 800311c:	617b      	str	r3, [r7, #20]
        break;
 800311e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003120:	f7fe fef0 	bl	8001f04 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003126:	e014      	b.n	8003152 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003128:	f7fe feec 	bl	8001f04 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b05      	cmp	r3, #5
 8003134:	d90d      	bls.n	8003152 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e007      	b.n	8003162 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e3      	bne.n	8003128 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	a33fffff 	.word	0xa33fffff

08003170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f89d 	bl	80022bc <LL_ADC_IsEnabled>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d146      	bne.n	8003216 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <ADC_Enable+0xb0>)
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e032      	b.n	8003218 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f858 	bl	800226c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031bc:	f7fe fea2 	bl	8001f04 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c2:	e021      	b.n	8003208 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f877 	bl	80022bc <LL_ADC_IsEnabled>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f847 	bl	800226c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031de:	f7fe fe91 	bl	8001f04 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d90d      	bls.n	8003208 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d1d6      	bne.n	80031c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	8000003f 	.word	0x8000003f

08003224 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f856 	bl	80022e2 <LL_ADC_IsDisableOngoing>
 8003236:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f83d 	bl	80022bc <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d040      	beq.n	80032ca <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d13d      	bne.n	80032ca <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030d 	and.w	r3, r3, #13
 8003258:	2b01      	cmp	r3, #1
 800325a:	d10c      	bne.n	8003276 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff f817 	bl	8002294 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2203      	movs	r2, #3
 800326c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800326e:	f7fe fe49 	bl	8001f04 <HAL_GetTick>
 8003272:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003274:	e022      	b.n	80032bc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e01c      	b.n	80032cc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003292:	f7fe fe37 	bl	8001f04 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d90d      	bls.n	80032bc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0210 	orr.w	r2, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e007      	b.n	80032cc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e3      	bne.n	8003292 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d14b      	bne.n	8003386 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d021      	beq.n	800334c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fed0 	bl	80020b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d12b      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
 800334a:	e018      	b.n	800337e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d111      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7fe f996 	bl	80016b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003384:	e00e      	b.n	80033a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff fa4f 	bl	8002836 <HAL_ADC_ErrorCallback>
}
 8003398:	e004      	b.n	80033a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff fa31 	bl	8002822 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f043 0204 	orr.w	r2, r3, #4
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fa21 	bl	8002836 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	; (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003568:	d301      	bcc.n	800356e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356a:	2301      	movs	r3, #1
 800356c:	e00f      	b.n	800358e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <SysTick_Config+0x40>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3b01      	subs	r3, #1
 8003574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003576:	210f      	movs	r1, #15
 8003578:	f04f 30ff 	mov.w	r0, #4294967295
 800357c:	f7ff ff8e 	bl	800349c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <SysTick_Config+0x40>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <SysTick_Config+0x40>)
 8003588:	2207      	movs	r2, #7
 800358a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	e000e010 	.word	0xe000e010

0800359c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff29 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c4:	f7ff ff3e 	bl	8003444 <__NVIC_GetPriorityGrouping>
 80035c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f7ff ff8e 	bl	80034f0 <NVIC_EncodePriority>
 80035d4:	4602      	mov	r2, r0
 80035d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff5d 	bl	800349c <__NVIC_SetPriority>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff31 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ffa2 	bl	8003558 <SysTick_Config>
 8003614:	4603      	mov	r3, r0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e098      	b.n	8003764 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4b4d      	ldr	r3, [pc, #308]	; (8003770 <HAL_DMA_Init+0x150>)
 800363a:	429a      	cmp	r2, r3
 800363c:	d80f      	bhi.n	800365e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_DMA_Init+0x154>)
 8003646:	4413      	add	r3, r2
 8003648:	4a4b      	ldr	r2, [pc, #300]	; (8003778 <HAL_DMA_Init+0x158>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	009a      	lsls	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a48      	ldr	r2, [pc, #288]	; (800377c <HAL_DMA_Init+0x15c>)
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
 800365c:	e00e      	b.n	800367c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	4b46      	ldr	r3, [pc, #280]	; (8003780 <HAL_DMA_Init+0x160>)
 8003666:	4413      	add	r3, r2
 8003668:	4a43      	ldr	r2, [pc, #268]	; (8003778 <HAL_DMA_Init+0x158>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	009a      	lsls	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_DMA_Init+0x164>)
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d6:	d039      	beq.n	800374c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a27      	ldr	r2, [pc, #156]	; (800377c <HAL_DMA_Init+0x15c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d11a      	bne.n	8003718 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_DMA_Init+0x168>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f003 031c 	and.w	r3, r3, #28
 80036ee:	210f      	movs	r1, #15
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	4924      	ldr	r1, [pc, #144]	; (8003788 <HAL_DMA_Init+0x168>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_DMA_Init+0x168>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f003 031c 	and.w	r3, r3, #28
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	491d      	ldr	r1, [pc, #116]	; (8003788 <HAL_DMA_Init+0x168>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
 8003716:	e019      	b.n	800374c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <HAL_DMA_Init+0x16c>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f003 031c 	and.w	r3, r3, #28
 8003724:	210f      	movs	r1, #15
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	4917      	ldr	r1, [pc, #92]	; (800378c <HAL_DMA_Init+0x16c>)
 800372e:	4013      	ands	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003732:	4b16      	ldr	r3, [pc, #88]	; (800378c <HAL_DMA_Init+0x16c>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f003 031c 	and.w	r3, r3, #28
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	4911      	ldr	r1, [pc, #68]	; (800378c <HAL_DMA_Init+0x16c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40020407 	.word	0x40020407
 8003774:	bffdfff8 	.word	0xbffdfff8
 8003778:	cccccccd 	.word	0xcccccccd
 800377c:	40020000 	.word	0x40020000
 8003780:	bffdfbf8 	.word	0xbffdfbf8
 8003784:	40020400 	.word	0x40020400
 8003788:	400200a8 	.word	0x400200a8
 800378c:	400204a8 	.word	0x400204a8

08003790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Start_IT+0x20>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e04b      	b.n	8003848 <HAL_DMA_Start_IT+0xb8>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d13a      	bne.n	800383a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f95f 	bl	8003aac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 020e 	orr.w	r2, r2, #14
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e00f      	b.n	8003828 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 020a 	orr.w	r2, r2, #10
 8003826:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e005      	b.n	8003846 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003842:	2302      	movs	r3, #2
 8003844:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d008      	beq.n	800387a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2204      	movs	r2, #4
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e022      	b.n	80038c0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 020e 	bic.w	r2, r2, #14
 8003888:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f003 021c 	and.w	r2, r3, #28
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d005      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2204      	movs	r2, #4
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e029      	b.n	8003944 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020e 	bic.w	r2, r2, #14
 80038fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f003 021c 	and.w	r2, r3, #28
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f202 	lsl.w	r2, r1, r2
 8003922:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
    }
  }
  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f003 031c 	and.w	r3, r3, #28
 800396e:	2204      	movs	r2, #4
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d026      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x7a>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d021      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0204 	bic.w	r2, r2, #4
 80039a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 021c 	and.w	r2, r3, #28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2104      	movs	r1, #4
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d071      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80039c6:	e06c      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f003 031c 	and.w	r3, r3, #28
 80039d0:	2202      	movs	r2, #2
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02e      	beq.n	8003a3a <HAL_DMA_IRQHandler+0xec>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d029      	beq.n	8003a3a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020a 	bic.w	r2, r2, #10
 8003a02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 021c 	and.w	r2, r3, #28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2102      	movs	r1, #2
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d038      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a38:	e033      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f003 031c 	and.w	r3, r3, #28
 8003a42:	2208      	movs	r2, #8
 8003a44:	409a      	lsls	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x156>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d025      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 020e 	bic.w	r2, r2, #14
 8003a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f003 021c 	and.w	r2, r3, #28
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
}
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f003 021c 	and.w	r2, r3, #28
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8003acc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d108      	bne.n	8003af0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aee:	e007      	b.n	8003b00 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1a:	e148      	b.n	8003dae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 813a 	beq.w	8003da8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d00b      	beq.n	8003b54 <HAL_GPIO_Init+0x48>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d007      	beq.n	8003b54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b48:	2b11      	cmp	r3, #17
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b12      	cmp	r3, #18
 8003b52:	d130      	bne.n	8003bb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 0201 	and.w	r2, r3, #1
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0xea>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b12      	cmp	r3, #18
 8003bf4:	d123      	bne.n	8003c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	08da      	lsrs	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3208      	adds	r2, #8
 8003bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	6939      	ldr	r1, [r7, #16]
 8003c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0203 	and.w	r2, r3, #3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8094 	beq.w	8003da8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c80:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_GPIO_Init+0x2c0>)
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_GPIO_Init+0x2c0>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8003c8c:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <HAL_GPIO_Init+0x2c0>)
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c98:	4a4d      	ldr	r2, [pc, #308]	; (8003dd0 <HAL_GPIO_Init+0x2c4>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_GPIO_Init+0x1d4>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a43      	ldr	r2, [pc, #268]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d007      	beq.n	8003cdc <HAL_GPIO_Init+0x1d0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <HAL_GPIO_Init+0x2cc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_GPIO_Init+0x1cc>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e004      	b.n	8003ce2 <HAL_GPIO_Init+0x1d6>
 8003cd8:	2307      	movs	r3, #7
 8003cda:	e002      	b.n	8003ce2 <HAL_GPIO_Init+0x1d6>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_GPIO_Init+0x1d6>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	f002 0203 	and.w	r2, r2, #3
 8003ce8:	0092      	lsls	r2, r2, #2
 8003cea:	4093      	lsls	r3, r2
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cf2:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_GPIO_Init+0x2c4>)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d00:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d24:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d4e:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d78:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3301      	adds	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f47f aeaf 	bne.w	8003b1c <HAL_GPIO_Init+0x10>
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	48000400 	.word	0x48000400
 8003dd8:	48000800 	.word	0x48000800
 8003ddc:	40010400 	.word	0x40010400

08003de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	807b      	strh	r3, [r7, #2]
 8003dec:	4613      	mov	r3, r2
 8003dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df0:	787b      	ldrb	r3, [r7, #1]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dfc:	e002      	b.n	8003e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dfe:	887a      	ldrh	r2, [r7, #2]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e081      	b.n	8003f26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd fdf4 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	; 0x24
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	e006      	b.n	8003e98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d104      	bne.n	8003eaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	ea42 0103 	orr.w	r1, r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	817b      	strh	r3, [r7, #10]
 8003f42:	460b      	mov	r3, r1
 8003f44:	813b      	strh	r3, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 80fd 	bne.w	8004152 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x34>
 8003f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0f1      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x4e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0ea      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f86:	f7fd ffbd 	bl	8001f04 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2319      	movs	r3, #25
 8003f92:	2201      	movs	r2, #1
 8003f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f95b 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0d5      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd0:	88f8      	ldrh	r0, [r7, #6]
 8003fd2:	893a      	ldrh	r2, [r7, #8]
 8003fd4:	8979      	ldrh	r1, [r7, #10]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4603      	mov	r3, r0
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f8bf 	bl	8004164 <I2C_RequestMemoryRead>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0ad      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2bff      	cmp	r3, #255	; 0xff
 8004000:	d90e      	bls.n	8004020 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	4b52      	ldr	r3, [pc, #328]	; (800415c <HAL_I2C_Mem_Read+0x22c>)
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fa3d 	bl	8004498 <I2C_TransferConfig>
 800401e:	e00f      	b.n	8004040 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	b2da      	uxtb	r2, r3
 8004030:	8979      	ldrh	r1, [r7, #10]
 8004032:	4b4a      	ldr	r3, [pc, #296]	; (800415c <HAL_I2C_Mem_Read+0x22c>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa2c 	bl	8004498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	2200      	movs	r2, #0
 8004048:	2104      	movs	r1, #4
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f902 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07c      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d034      	beq.n	8004100 <HAL_I2C_Mem_Read+0x1d0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d130      	bne.n	8004100 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8d3 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e04d      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2bff      	cmp	r3, #255	; 0xff
 80040c0:	d90e      	bls.n	80040e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	8979      	ldrh	r1, [r7, #10]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f9dd 	bl	8004498 <I2C_TransferConfig>
 80040de:	e00f      	b.n	8004100 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	8979      	ldrh	r1, [r7, #10]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f9cc 	bl	8004498 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d19a      	bne.n	8004040 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f920 	bl	8004354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e01a      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2220      	movs	r2, #32
 8004124:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_I2C_Mem_Read+0x230>)
 8004132:	400b      	ands	r3, r1
 8004134:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	80002400 	.word	0x80002400
 8004160:	fe00e800 	.word	0xfe00e800

08004164 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	460b      	mov	r3, r1
 8004178:	813b      	strh	r3, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	8979      	ldrh	r1, [r7, #10]
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <I2C_RequestMemoryRead+0xa4>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2300      	movs	r3, #0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f984 	bl	8004498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	69b9      	ldr	r1, [r7, #24]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f89d 	bl	80042d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e02c      	b.n	80041fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041aa:	893b      	ldrh	r3, [r7, #8]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
 80041b4:	e015      	b.n	80041e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041b6:	893b      	ldrh	r3, [r7, #8]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f883 	bl	80042d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e012      	b.n	80041fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041d8:	893b      	ldrh	r3, [r7, #8]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	; 0x40
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f831 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	80002000 	.word	0x80002000

0800420c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d103      	bne.n	800422a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d007      	beq.n	8004248 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	619a      	str	r2, [r3, #24]
  }
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004264:	e022      	b.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d01e      	beq.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fd fe49 	bl	8001f04 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e00f      	b.n	80042cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d0cd      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042e0:	e02c      	b.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f870 	bl	80043cc <I2C_IsAcknowledgeFailed>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e02a      	b.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d01e      	beq.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fd fe01 	bl	8001f04 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d113      	bne.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d1cb      	bne.n	80042e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004360:	e028      	b.n	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f830 	bl	80043cc <I2C_IsAcknowledgeFailed>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e026      	b.n	80043c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fd fdc5 	bl	8001f04 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d113      	bne.n	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e007      	b.n	80043c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d1cf      	bne.n	8004362 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d151      	bne.n	800448a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e6:	e022      	b.n	800442e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d01e      	beq.n	800442e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7fd fd88 	bl	8001f04 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <I2C_IsAcknowledgeFailed+0x3a>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d113      	bne.n	800442e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e02e      	b.n	800448c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b20      	cmp	r3, #32
 800443a:	d1d5      	bne.n	80043e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2210      	movs	r2, #16
 8004442:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2220      	movs	r2, #32
 800444a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fedd 	bl	800420c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <I2C_IsAcknowledgeFailed+0xc8>)
 800445e:	400b      	ands	r3, r1
 8004460:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	fe00e800 	.word	0xfe00e800

08004498 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	4613      	mov	r3, r2
 80044a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	0d5b      	lsrs	r3, r3, #21
 80044b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <I2C_TransferConfig+0x58>)
 80044ba:	430b      	orrs	r3, r1
 80044bc:	43db      	mvns	r3, r3
 80044be:	ea02 0103 	and.w	r1, r2, r3
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044c8:	7a7b      	ldrb	r3, [r7, #9]
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	03ff63ff 	.word	0x03ff63ff

080044f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b20      	cmp	r3, #32
 8004508:	d138      	bne.n	800457c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004514:	2302      	movs	r3, #2
 8004516:	e032      	b.n	800457e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	d139      	bne.n	8004614 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e033      	b.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2224      	movs	r2, #36	; 0x24
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800462e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40007000 	.word	0x40007000

08004644 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10c      	bne.n	8004670 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004662:	d10e      	bne.n	8004682 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004664:	f000 f896 	bl	8004794 <HAL_PWREx_DisableLowPowerRunMode>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800466e:	e016      	b.n	800469e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467c:	d001      	beq.n	8004682 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800467e:	f000 f879 	bl	8004774 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004694:	bf30      	wfi
 8004696:	e002      	b.n	800469e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004698:	bf40      	sev
    __WFE();
 800469a:	bf20      	wfe
    __WFE();
 800469c:	bf20      	wfe
  }

}
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40007000 	.word	0x40007000
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40007000 	.word	0x40007000

080046c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d6:	d130      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e4:	d038      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046ee:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046f6:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2232      	movs	r2, #50	; 0x32
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	0c9b      	lsrs	r3, r3, #18
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800470c:	e002      	b.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3b01      	subs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004720:	d102      	bne.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f2      	bne.n	800470e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d110      	bne.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e00f      	b.n	800475a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d007      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004750:	4a05      	ldr	r2, [pc, #20]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004756:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40007000 	.word	0x40007000
 800476c:	20000000 	.word	0x20000000
 8004770:	431bde83 	.word	0x431bde83

08004774 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800477e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004782:	6013      	str	r3, [r2, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40007000 	.word	0x40007000

08004794 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80047a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2232      	movs	r2, #50	; 0x32
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0c9b      	lsrs	r3, r3, #18
 80047b8:	3301      	adds	r3, #1
 80047ba:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047bc:	e002      	b.n	80047c4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d102      	bne.n	80047d8 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f2      	bne.n	80047be <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e4:	d101      	bne.n	80047ea <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e000      	b.n	80047ec <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40007000 	.word	0x40007000
 80047fc:	20000000 	.word	0x20000000
 8004800:	431bde83 	.word	0x431bde83

08004804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f000 bc11 	b.w	800503a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004818:	4ba0      	ldr	r3, [pc, #640]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004822:	4b9e      	ldr	r3, [pc, #632]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80e4 	beq.w	8004a02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_RCC_OscConfig+0x4c>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	f040 808b 	bne.w	800495e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b01      	cmp	r3, #1
 800484c:	f040 8087 	bne.w	800495e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004850:	4b92      	ldr	r3, [pc, #584]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_OscConfig+0x64>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e3e8      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	4b8b      	ldr	r3, [pc, #556]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_RCC_OscConfig+0x7e>
 8004878:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004880:	e005      	b.n	800488e <HAL_RCC_OscConfig+0x8a>
 8004882:	4b86      	ldr	r3, [pc, #536]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488e:	4293      	cmp	r3, r2
 8004890:	d223      	bcs.n	80048da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fd78 	bl	800538c <RCC_SetFlashLatencyFromMSIRange>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e3c9      	b.n	800503a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a6:	4b7d      	ldr	r3, [pc, #500]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7c      	ldr	r2, [pc, #496]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b7a      	ldr	r3, [pc, #488]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4977      	ldr	r1, [pc, #476]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c4:	4b75      	ldr	r3, [pc, #468]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	4972      	ldr	r1, [pc, #456]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	e025      	b.n	8004926 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048da:	4b70      	ldr	r3, [pc, #448]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6f      	ldr	r2, [pc, #444]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048e0:	f043 0308 	orr.w	r3, r3, #8
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b6d      	ldr	r3, [pc, #436]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	496a      	ldr	r1, [pc, #424]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f8:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	4965      	ldr	r1, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd38 	bl	800538c <RCC_SetFlashLatencyFromMSIRange>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e389      	b.n	800503a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004926:	f000 fc6f 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 800492a:	4601      	mov	r1, r0
 800492c:	4b5b      	ldr	r3, [pc, #364]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	4a5a      	ldr	r2, [pc, #360]	; (8004aa0 <HAL_RCC_OscConfig+0x29c>)
 8004938:	5cd3      	ldrb	r3, [r2, r3]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	fa21 f303 	lsr.w	r3, r1, r3
 8004942:	4a58      	ldr	r2, [pc, #352]	; (8004aa4 <HAL_RCC_OscConfig+0x2a0>)
 8004944:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004946:	4b58      	ldr	r3, [pc, #352]	; (8004aa8 <HAL_RCC_OscConfig+0x2a4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fa8a 	bl	8001e64 <HAL_InitTick>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d052      	beq.n	8004a00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	e36d      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d032      	beq.n	80049cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004966:	4b4d      	ldr	r3, [pc, #308]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004972:	f7fd fac7 	bl	8001f04 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800497a:	f7fd fac3 	bl	8001f04 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e356      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800498c:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004998:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a3f      	ldr	r2, [pc, #252]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 800499e:	f043 0308 	orr.w	r3, r3, #8
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	493a      	ldr	r1, [pc, #232]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b6:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	4935      	ldr	r1, [pc, #212]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
 80049ca:	e01a      	b.n	8004a02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049cc:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a32      	ldr	r2, [pc, #200]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049d8:	f7fd fa94 	bl	8001f04 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e0:	f7fd fa90 	bl	8001f04 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e323      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x1dc>
 80049fe:	e000      	b.n	8004a02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d073      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_OscConfig+0x21c>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d10e      	bne.n	8004a38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d063      	beq.n	8004af4 <HAL_RCC_OscConfig+0x2f0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d15f      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e300      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x24c>
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e01d      	b.n	8004a8c <HAL_RCC_OscConfig+0x288>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x270>
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0x288>
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <HAL_RCC_OscConfig+0x298>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd fa36 	bl	8001f04 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9a:	e010      	b.n	8004abe <HAL_RCC_OscConfig+0x2ba>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	08007a48 	.word	0x08007a48
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fa2a 	bl	8001f04 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e2bd      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004abe:	4baf      	ldr	r3, [pc, #700]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x2a8>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fa1a 	bl	8001f04 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fa16 	bl	8001f04 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e2a9      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae6:	4ba5      	ldr	r3, [pc, #660]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x2d0>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d060      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_OscConfig+0x310>
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d119      	bne.n	8004b42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d116      	bne.n	8004b42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b14:	4b99      	ldr	r3, [pc, #612]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_OscConfig+0x328>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e286      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b93      	ldr	r3, [pc, #588]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	4990      	ldr	r1, [pc, #576]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b40:	e040      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d023      	beq.n	8004b92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b4a:	4b8c      	ldr	r3, [pc, #560]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a8b      	ldr	r2, [pc, #556]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fd f9d5 	bl	8001f04 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fd f9d1 	bl	8001f04 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e264      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b70:	4b82      	ldr	r3, [pc, #520]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b7f      	ldr	r3, [pc, #508]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	497c      	ldr	r1, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	e018      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a79      	ldr	r2, [pc, #484]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fd f9b1 	bl	8001f04 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba6:	f7fd f9ad 	bl	8001f04 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e240      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb8:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d03c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bde:	4a67      	ldr	r2, [pc, #412]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fd f98c 	bl	8001f04 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf0:	f7fd f988 	bl	8001f04 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e21b      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c02:	4b5e      	ldr	r3, [pc, #376]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x3ec>
 8004c10:	e01b      	b.n	8004c4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c12:	4b5a      	ldr	r3, [pc, #360]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c18:	4a58      	ldr	r2, [pc, #352]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fd f96f 	bl	8001f04 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2a:	f7fd f96b 	bl	8001f04 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e1fe      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ef      	bne.n	8004c2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a6 	beq.w	8004da4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c5c:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b44      	ldr	r3, [pc, #272]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	4a43      	ldr	r2, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	6593      	str	r3, [r2, #88]	; 0x58
 8004c74:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c84:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <HAL_RCC_OscConfig+0x57c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <HAL_RCC_OscConfig+0x57c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <HAL_RCC_OscConfig+0x57c>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd f932 	bl	8001f04 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd f92e 	bl	8001f04 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1c1      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb6:	4b32      	ldr	r3, [pc, #200]	; (8004d80 <HAL_RCC_OscConfig+0x57c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4d8>
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cda:	e024      	b.n	8004d26 <HAL_RCC_OscConfig+0x522>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	d110      	bne.n	8004d06 <HAL_RCC_OscConfig+0x502>
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004cec:	f043 0304 	orr.w	r3, r3, #4
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d04:	e00f      	b.n	8004d26 <HAL_RCC_OscConfig+0x522>
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004d1e:	f023 0304 	bic.w	r3, r3, #4
 8004d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fd f8e9 	bl	8001f04 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d36:	f7fd f8e5 	bl	8001f04 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e176      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x578>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ed      	beq.n	8004d36 <HAL_RCC_OscConfig+0x532>
 8004d5a:	e01a      	b.n	8004d92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd f8d2 	bl	8001f04 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d62:	e00f      	b.n	8004d84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fd f8ce 	bl	8001f04 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d906      	bls.n	8004d84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e15f      	b.n	800503a <HAL_RCC_OscConfig+0x836>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d84:	4baa      	ldr	r3, [pc, #680]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e8      	bne.n	8004d64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4ba5      	ldr	r3, [pc, #660]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	4aa4      	ldr	r2, [pc, #656]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d03c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dbe:	4a9c      	ldr	r2, [pc, #624]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd f89c 	bl	8001f04 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd0:	f7fd f898 	bl	8001f04 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e12b      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004de2:	4b93      	ldr	r3, [pc, #588]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x5cc>
 8004df0:	e01b      	b.n	8004e2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004df2:	4b8f      	ldr	r3, [pc, #572]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df8:	4a8d      	ldr	r2, [pc, #564]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fd f87f 	bl	8001f04 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0a:	f7fd f87b 	bl	8001f04 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e10e      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e1c:	4b84      	ldr	r3, [pc, #528]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ef      	bne.n	8004e0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8102 	beq.w	8005038 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	f040 80c5 	bne.w	8004fc8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e3e:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0203 	and.w	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d12c      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d123      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d11b      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d113      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	3b01      	subs	r3, #1
 8004e92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d109      	bne.n	8004eac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d067      	beq.n	8004f7c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d062      	beq.n	8004f78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004eb2:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0bb      	b.n	800503a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5a      	ldr	r2, [pc, #360]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ecc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ece:	f7fd f819 	bl	8001f04 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7fd f815 	bl	8001f04 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0a8      	b.n	800503a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee8:	4b51      	ldr	r3, [pc, #324]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef4:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	4b4e      	ldr	r3, [pc, #312]	; (8005034 <HAL_RCC_OscConfig+0x830>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f04:	3a01      	subs	r2, #1
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	4311      	orrs	r1, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f0e:	0212      	lsls	r2, r2, #8
 8004f10:	4311      	orrs	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0552      	lsls	r2, r2, #21
 8004f1c:	4311      	orrs	r1, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f22:	0852      	lsrs	r2, r2, #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0652      	lsls	r2, r2, #25
 8004f28:	4311      	orrs	r1, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f2e:	06d2      	lsls	r2, r2, #27
 8004f30:	430a      	orrs	r2, r1
 8004f32:	493f      	ldr	r1, [pc, #252]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f38:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3c      	ldr	r2, [pc, #240]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f44:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a39      	ldr	r2, [pc, #228]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f50:	f7fc ffd8 	bl	8001f04 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc ffd4 	bl	8001f04 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e067      	b.n	800503a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f76:	e05f      	b.n	8005038 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e05e      	b.n	800503a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d157      	bne.n	8005038 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f88:	4b29      	ldr	r3, [pc, #164]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fa0:	f7fc ffb0 	bl	8001f04 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fc ffac 	bl	8001f04 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e03f      	b.n	800503a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x7a4>
 8004fc6:	e037      	b.n	8005038 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d02d      	beq.n	800502a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b18      	ldr	r3, [pc, #96]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fe6:	4b12      	ldr	r3, [pc, #72]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	4a11      	ldr	r2, [pc, #68]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004fec:	f023 0303 	bic.w	r3, r3, #3
 8004ff0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 8004ff8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005000:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7fc ff7f 	bl	8001f04 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500a:	f7fc ff7b 	bl	8001f04 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e00e      	b.n	800503a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_RCC_OscConfig+0x82c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x806>
 8005028:	e006      	b.n	8005038 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e005      	b.n	800503a <HAL_RCC_OscConfig+0x836>
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop

08005044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0c8      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b66      	ldr	r3, [pc, #408]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d910      	bls.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b63      	ldr	r3, [pc, #396]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 0207 	bic.w	r2, r3, #7
 800506e:	4961      	ldr	r1, [pc, #388]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b5f      	ldr	r3, [pc, #380]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0b0      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d04c      	beq.n	800512e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d107      	bne.n	80050ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509c:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d121      	bne.n	80050ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e09e      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b4:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d115      	bne.n	80050ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e092      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d107      	bne.n	80050dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050cc:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e086      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050dc:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e07e      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ec:	4b42      	ldr	r3, [pc, #264]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 0203 	bic.w	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	493f      	ldr	r1, [pc, #252]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fe:	f7fc ff01 	bl	8001f04 <HAL_GetTick>
 8005102:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005104:	e00a      	b.n	800511c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005106:	f7fc fefd 	bl	8001f04 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	; 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e066      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511c:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 020c 	and.w	r2, r3, #12
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	429a      	cmp	r2, r3
 800512c:	d1eb      	bne.n	8005106 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513a:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	492c      	ldr	r1, [pc, #176]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800514c:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d210      	bcs.n	800517c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b26      	ldr	r3, [pc, #152]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 0207 	bic.w	r2, r3, #7
 8005162:	4924      	ldr	r1, [pc, #144]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <HAL_RCC_ClockConfig+0x1b0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e036      	b.n	80051ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4918      	ldr	r1, [pc, #96]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4910      	ldr	r1, [pc, #64]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ba:	f000 f825 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 80051be:	4601      	mov	r1, r0
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	5cd3      	ldrb	r3, [r2, r3]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	fa21 f303 	lsr.w	r3, r1, r3
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc fe40 	bl	8001e64 <HAL_InitTick>
 80051e4:	4603      	mov	r3, r0
 80051e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80051e8:	7afb      	ldrb	r3, [r7, #11]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40021000 	.word	0x40021000
 80051fc:	08007a48 	.word	0x08007a48
 8005200:	20000000 	.word	0x20000000
 8005204:	20000004 	.word	0x20000004

08005208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	; 0x24
 800520c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005216:	4b3d      	ldr	r3, [pc, #244]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005220:	4b3a      	ldr	r3, [pc, #232]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0x34>
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d121      	bne.n	800527a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d11e      	bne.n	800527a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800523c:	4b33      	ldr	r3, [pc, #204]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d107      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 800524a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	e005      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005258:	4b2c      	ldr	r3, [pc, #176]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005264:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <HAL_RCC_GetSysClockFreq+0x108>)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10d      	bne.n	8005290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005278:	e00a      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d102      	bne.n	8005286 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005280:	4b24      	ldr	r3, [pc, #144]	; (8005314 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e004      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d101      	bne.n	8005290 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <HAL_RCC_GetSysClockFreq+0x110>)
 800528e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d133      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0xa4>
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80052aa:	e005      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052ac:	4b19      	ldr	r3, [pc, #100]	; (8005314 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052ae:	617b      	str	r3, [r7, #20]
      break;
 80052b0:	e005      	b.n	80052be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_RCC_GetSysClockFreq+0x110>)
 80052b4:	617b      	str	r3, [r7, #20]
      break;
 80052b6:	e002      	b.n	80052be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	617b      	str	r3, [r7, #20]
      break;
 80052bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	3301      	adds	r3, #1
 80052ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	fb02 f203 	mul.w	r2, r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_GetSysClockFreq+0x104>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	0e5b      	lsrs	r3, r3, #25
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	3301      	adds	r3, #1
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052fe:	69bb      	ldr	r3, [r7, #24]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3724      	adds	r7, #36	; 0x24
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40021000 	.word	0x40021000
 8005310:	08007a60 	.word	0x08007a60
 8005314:	00f42400 	.word	0x00f42400
 8005318:	007a1200 	.word	0x007a1200

0800531c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <HAL_RCC_GetHCLKFreq+0x14>)
 8005322:	681b      	ldr	r3, [r3, #0]
}
 8005324:	4618      	mov	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000000 	.word	0x20000000

08005334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005338:	f7ff fff0 	bl	800531c <HAL_RCC_GetHCLKFreq>
 800533c:	4601      	mov	r1, r0
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	4a04      	ldr	r2, [pc, #16]	; (800535c <HAL_RCC_GetPCLK1Freq+0x28>)
 800534a:	5cd3      	ldrb	r3, [r2, r3]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	08007a58 	.word	0x08007a58

08005360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005364:	f7ff ffda 	bl	800531c <HAL_RCC_GetHCLKFreq>
 8005368:	4601      	mov	r1, r0
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0adb      	lsrs	r3, r3, #11
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4a04      	ldr	r2, [pc, #16]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005376:	5cd3      	ldrb	r3, [r2, r3]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	08007a58 	.word	0x08007a58

0800538c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005398:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053a4:	f7ff f982 	bl	80046ac <HAL_PWREx_GetVoltageRange>
 80053a8:	6178      	str	r0, [r7, #20]
 80053aa:	e014      	b.n	80053d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053ac:	4b25      	ldr	r3, [pc, #148]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	4a24      	ldr	r2, [pc, #144]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b6:	6593      	str	r3, [r2, #88]	; 0x58
 80053b8:	4b22      	ldr	r3, [pc, #136]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053c4:	f7ff f972 	bl	80046ac <HAL_PWREx_GetVoltageRange>
 80053c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053ca:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053dc:	d10b      	bne.n	80053f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d919      	bls.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2ba0      	cmp	r3, #160	; 0xa0
 80053e8:	d902      	bls.n	80053f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053ea:	2302      	movs	r3, #2
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e013      	b.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053f0:	2301      	movs	r3, #1
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e010      	b.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d902      	bls.n	8005402 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053fc:	2303      	movs	r3, #3
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e00a      	b.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d102      	bne.n	800540e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005408:	2302      	movs	r3, #2
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e004      	b.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b70      	cmp	r3, #112	; 0x70
 8005412:	d101      	bne.n	8005418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005414:	2301      	movs	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 0207 	bic.w	r2, r3, #7
 8005420:	4909      	ldr	r1, [pc, #36]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	40022000 	.word	0x40022000

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005454:	2300      	movs	r3, #0
 8005456:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005458:	2300      	movs	r3, #0
 800545a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02f      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005470:	d005      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005472:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800547c:	e00f      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800547e:	4bac      	ldr	r3, [pc, #688]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4aab      	ldr	r2, [pc, #684]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800548a:	e00c      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f9dc 	bl	8005850 <RCCEx_PLLSAI1_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	74fb      	strb	r3, [r7, #19]
      break;
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80054a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ac:	4ba0      	ldr	r3, [pc, #640]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	499d      	ldr	r1, [pc, #628]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054c2:	e001      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8099 	beq.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054da:	4b95      	ldr	r3, [pc, #596]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f0:	4b8f      	ldr	r3, [pc, #572]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f4:	4a8e      	ldr	r2, [pc, #568]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6593      	str	r3, [r2, #88]	; 0x58
 80054fc:	4b8c      	ldr	r3, [pc, #560]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005508:	2301      	movs	r3, #1
 800550a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800550c:	4b89      	ldr	r3, [pc, #548]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a88      	ldr	r2, [pc, #544]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005518:	f7fc fcf4 	bl	8001f04 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800551e:	e009      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005520:	f7fc fcf0 	bl	8001f04 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d902      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	74fb      	strb	r3, [r7, #19]
        break;
 8005532:	e005      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005534:	4b7f      	ldr	r3, [pc, #508]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ef      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d155      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005546:	4b7a      	ldr	r3, [pc, #488]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01e      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	429a      	cmp	r2, r3
 8005560:	d019      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005562:	4b73      	ldr	r3, [pc, #460]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800556e:	4b70      	ldr	r3, [pc, #448]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	4a6e      	ldr	r2, [pc, #440]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800557e:	4b6c      	ldr	r3, [pc, #432]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	4a6a      	ldr	r2, [pc, #424]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800558e:	4a68      	ldr	r2, [pc, #416]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d016      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fc fcb0 	bl	8001f04 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055a6:	e00b      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fc fcac 	bl	8001f04 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d902      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	74fb      	strb	r3, [r7, #19]
            break;
 80055be:	e006      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c0:	4b5b      	ldr	r3, [pc, #364]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ec      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055d4:	4b56      	ldr	r3, [pc, #344]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	4953      	ldr	r1, [pc, #332]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055ea:	e004      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	74bb      	strb	r3, [r7, #18]
 80055f0:	e001      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	7cfb      	ldrb	r3, [r7, #19]
 80055f4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055f6:	7c7b      	ldrb	r3, [r7, #17]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d105      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055fc:	4b4c      	ldr	r3, [pc, #304]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	4a4b      	ldr	r2, [pc, #300]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005606:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005614:	4b46      	ldr	r3, [pc, #280]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f023 0203 	bic.w	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	4943      	ldr	r1, [pc, #268]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005636:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f023 020c 	bic.w	r2, r3, #12
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	493a      	ldr	r1, [pc, #232]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	4932      	ldr	r1, [pc, #200]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800567a:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	4929      	ldr	r1, [pc, #164]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800569c:	4b24      	ldr	r3, [pc, #144]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	4921      	ldr	r1, [pc, #132]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	4918      	ldr	r1, [pc, #96]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4910      	ldr	r1, [pc, #64]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02c      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	4907      	ldr	r1, [pc, #28]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005720:	d10a      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005722:	4b03      	ldr	r3, [pc, #12]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	4a02      	ldr	r2, [pc, #8]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572c:	60d3      	str	r3, [r2, #12]
 800572e:	e015      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005730:	40021000 	.word	0x40021000
 8005734:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005740:	d10c      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3304      	adds	r3, #4
 8005746:	2101      	movs	r1, #1
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f881 	bl	8005850 <RCCEx_PLLSAI1_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005752:	7cfb      	ldrb	r3, [r7, #19]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d028      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005768:	4b30      	ldr	r3, [pc, #192]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	492d      	ldr	r1, [pc, #180]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d106      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005788:	4b28      	ldr	r3, [pc, #160]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005792:	60d3      	str	r3, [r2, #12]
 8005794:	e011      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800579e:	d10c      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	2101      	movs	r1, #1
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f852 	bl	8005850 <RCCEx_PLLSAI1_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01c      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c6:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d4:	4915      	ldr	r1, [pc, #84]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f82f 	bl	8005850 <RCCEx_PLLSAI1_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800580c:	4b07      	ldr	r3, [pc, #28]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	4904      	ldr	r1, [pc, #16]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005822:	7cbb      	ldrb	r3, [r7, #18]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40021000 	.word	0x40021000

08005830 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a04      	ldr	r2, [pc, #16]	; (800584c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000

08005850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800585e:	4b73      	ldr	r3, [pc, #460]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800586a:	4b70      	ldr	r3, [pc, #448]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0203 	and.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d10d      	bne.n	8005896 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
       ||
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005882:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
       ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d044      	beq.n	8005920 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e041      	b.n	8005920 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d00c      	beq.n	80058be <RCCEx_PLLSAI1_Config+0x6e>
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d013      	beq.n	80058d0 <RCCEx_PLLSAI1_Config+0x80>
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d120      	bne.n	80058ee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ac:	4b5f      	ldr	r3, [pc, #380]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11d      	bne.n	80058f4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058bc:	e01a      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d116      	bne.n	80058f8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ce:	e013      	b.n	80058f8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058d0:	4b56      	ldr	r3, [pc, #344]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10f      	bne.n	80058fc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ec:	e006      	b.n	80058fc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      break;
 80058f2:	e004      	b.n	80058fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80058fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10d      	bne.n	8005920 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005904:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	3b01      	subs	r3, #1
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	430b      	orrs	r3, r1
 800591a:	4944      	ldr	r1, [pc, #272]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d17c      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a40      	ldr	r2, [pc, #256]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 800592c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fc fae7 	bl	8001f04 <HAL_GetTick>
 8005936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005938:	e009      	b.n	800594e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593a:	f7fc fae3 	bl	8001f04 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d902      	bls.n	800594e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	73fb      	strb	r3, [r7, #15]
        break;
 800594c:	e005      	b.n	800595a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1ef      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d15f      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005966:	4b31      	ldr	r3, [pc, #196]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800596e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6892      	ldr	r2, [r2, #8]
 8005976:	0211      	lsls	r1, r2, #8
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	68d2      	ldr	r2, [r2, #12]
 800597c:	06d2      	lsls	r2, r2, #27
 800597e:	430a      	orrs	r2, r1
 8005980:	492a      	ldr	r1, [pc, #168]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	610b      	str	r3, [r1, #16]
 8005986:	e027      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d112      	bne.n	80059b4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800598e:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005996:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6892      	ldr	r2, [r2, #8]
 800599e:	0211      	lsls	r1, r2, #8
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6912      	ldr	r2, [r2, #16]
 80059a4:	0852      	lsrs	r2, r2, #1
 80059a6:	3a01      	subs	r2, #1
 80059a8:	0552      	lsls	r2, r2, #21
 80059aa:	430a      	orrs	r2, r1
 80059ac:	491f      	ldr	r1, [pc, #124]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	610b      	str	r3, [r1, #16]
 80059b2:	e011      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059b4:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6892      	ldr	r2, [r2, #8]
 80059c4:	0211      	lsls	r1, r2, #8
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6952      	ldr	r2, [r2, #20]
 80059ca:	0852      	lsrs	r2, r2, #1
 80059cc:	3a01      	subs	r2, #1
 80059ce:	0652      	lsls	r2, r2, #25
 80059d0:	430a      	orrs	r2, r1
 80059d2:	4916      	ldr	r1, [pc, #88]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80059de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fc fa8e 	bl	8001f04 <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ea:	e009      	b.n	8005a00 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ec:	f7fc fa8a 	bl	8001f04 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d902      	bls.n	8005a00 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	73fb      	strb	r3, [r7, #15]
          break;
 80059fe:	e005      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ef      	beq.n	80059ec <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	4904      	ldr	r1, [pc, #16]	; (8005a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000

08005a30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d06c      	beq.n	8005b1c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc f828 	bl	8001aac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	22ca      	movs	r2, #202	; 0xca
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2253      	movs	r2, #83	; 0x53
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f9a0 	bl	8005dba <RTC_EnterInitMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d14b      	bne.n	8005b1c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6812      	ldr	r2, [r2, #0]
 8005a8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a96:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68d2      	ldr	r2, [r2, #12]
 8005abe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6919      	ldr	r1, [r3, #16]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	041a      	lsls	r2, r3, #16
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9a3 	bl	8005e20 <RTC_ExitInitMode>
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11b      	bne.n	8005b1c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0203 	bic.w	r2, r2, #3
 8005af2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69da      	ldr	r2, [r3, #28]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b087      	sub	sp, #28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_RTC_SetTime+0x1a>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e08b      	b.n	8005c58 <HAL_RTC_SetTime+0x132>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	22ca      	movs	r2, #202	; 0xca
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2253      	movs	r2, #83	; 0x53
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f92a 	bl	8005dba <RTC_EnterInitMode>
 8005b66:	4603      	mov	r3, r0
 8005b68:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d163      	bne.n	8005c38 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d126      	bne.n	8005bc4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f984 	bl	8005e9c <RTC_ByteToBcd2>
 8005b94:	4603      	mov	r3, r0
 8005b96:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f97d 	bl	8005e9c <RTC_ByteToBcd2>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ba6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	789b      	ldrb	r3, [r3, #2]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f975 	bl	8005e9c <RTC_ByteToBcd2>
 8005bb2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bb4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	78db      	ldrb	r3, [r3, #3]
 8005bbc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e018      	b.n	8005bf6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005be4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bea:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c04:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f8f6 	bl	8005e20 <RTC_ExitInitMode>
 8005c34:	4603      	mov	r3, r0
 8005c36:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005c40:	7cfb      	ldrb	r3, [r7, #19]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005c56:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd90      	pop	{r4, r7, pc}

08005c60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_RTC_SetDate+0x1a>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e075      	b.n	8005d66 <HAL_RTC_SetDate+0x106>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10e      	bne.n	8005cae <HAL_RTC_SetDate+0x4e>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	f023 0310 	bic.w	r3, r3, #16
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	330a      	adds	r3, #10
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11c      	bne.n	8005cee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f8ef 	bl	8005e9c <RTC_ByteToBcd2>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f8e8 	bl	8005e9c <RTC_ByteToBcd2>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005cd0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	789b      	ldrb	r3, [r3, #2]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f8e0 	bl	8005e9c <RTC_ByteToBcd2>
 8005cdc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cde:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e00e      	b.n	8005d0c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	78db      	ldrb	r3, [r3, #3]
 8005cf2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cfa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	22ca      	movs	r2, #202	; 0xca
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2253      	movs	r2, #83	; 0x53
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f84c 	bl	8005dba <RTC_EnterInitMode>
 8005d22:	4603      	mov	r3, r0
 8005d24:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10c      	bne.n	8005d46 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d3a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f86f 	bl	8005e20 <RTC_ExitInitMode>
 8005d42:	4603      	mov	r3, r0
 8005d44:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d4e:	7cfb      	ldrb	r3, [r7, #19]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}

08005d6e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d84:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005d86:	f7fc f8bd 	bl	8001f04 <HAL_GetTick>
 8005d8a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d8c:	e009      	b.n	8005da2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d8e:	f7fc f8b9 	bl	8001f04 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9c:	d901      	bls.n	8005da2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e007      	b.n	8005db2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ee      	beq.n	8005d8e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d120      	bne.n	8005e16 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ddc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dde:	f7fc f891 	bl	8001f04 <HAL_GetTick>
 8005de2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005de4:	e00d      	b.n	8005e02 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005de6:	f7fc f88d 	bl	8001f04 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df4:	d905      	bls.n	8005e02 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <RTC_EnterInitMode+0x5c>
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d1e7      	bne.n	8005de6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a19      	ldr	r2, [pc, #100]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e36:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e38:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10c      	bne.n	8005e5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff ff92 	bl	8005d6e <HAL_RTC_WaitForSynchro>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01e      	beq.n	8005e8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	e017      	b.n	8005e8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e64:	f023 0320 	bic.w	r3, r3, #32
 8005e68:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff ff7f 	bl	8005d6e <HAL_RTC_WaitForSynchro>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <RTC_ExitInitMode+0x78>)
 8005e88:	f043 0320 	orr.w	r3, r3, #32
 8005e8c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40002800 	.word	0x40002800

08005e9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005eae:	e005      	b.n	8005ebc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	3b0a      	subs	r3, #10
 8005eba:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	2b09      	cmp	r3, #9
 8005ec0:	d8f6      	bhi.n	8005eb0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b2db      	uxtb	r3, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e07f      	b.n	8005ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ca      	movs	r2, #202	; 0xca
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2253      	movs	r2, #83	; 0x53
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f24:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005f36:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d120      	bne.n	8005f88 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005f46:	f7fb ffdd 	bl	8001f04 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005f4c:	e015      	b.n	8005f7a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f4e:	f7fb ffd9 	bl	8001f04 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5c:	d90d      	bls.n	8005f7a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e03d      	b.n	8005ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0e2      	beq.n	8005f4e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f023 0107 	bic.w	r1, r3, #7
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005fa4:	4b16      	ldr	r3, [pc, #88]	; (8006000 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fae:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005fb0:	4b13      	ldr	r3, [pc, #76]	; (8006000 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a12      	ldr	r2, [pc, #72]	; (8006000 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fba:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fca:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fda:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40010400 	.word	0x40010400

08006004 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006016:	2302      	movs	r3, #2
 8006018:	e04d      	b.n	80060b6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	22ca      	movs	r2, #202	; 0xca
 8006030:	625a      	str	r2, [r3, #36]	; 0x24
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2253      	movs	r2, #83	; 0x53
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006048:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006058:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800605a:	f7fb ff53 	bl	8001f04 <HAL_GetTick>
 800605e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006060:	e015      	b.n	800608e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006062:	f7fb ff4f 	bl	8001f04 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006070:	d90d      	bls.n	800608e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	22ff      	movs	r2, #255	; 0xff
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2203      	movs	r2, #3
 800607e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e013      	b.n	80060b6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0e2      	beq.n	8006062 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80060ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060ce:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060ee:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f80b 	bl	800610c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40010400 	.word	0x40010400

0800610c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e040      	b.n	80061b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb fcce 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fa1c 	bl	800659c <UART_SetConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e022      	b.n	80061b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fc20 	bl	80069bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800618a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800619a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fca7 	bl	8006b00 <UART_CheckIdleState>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	f040 8081 	bne.w	80062d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_UART_Transmit+0x26>
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e079      	b.n	80062da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_UART_Transmit+0x38>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e072      	b.n	80062da <HAL_UART_Transmit+0x11e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2221      	movs	r2, #33	; 0x21
 8006206:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006208:	f7fb fe7c 	bl	8001f04 <HAL_GetTick>
 800620c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	88fa      	ldrh	r2, [r7, #6]
 800621a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d108      	bne.n	800623a <HAL_UART_Transmit+0x7e>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	e003      	b.n	8006242 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800624a:	e02d      	b.n	80062a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fc97 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e039      	b.n	80062da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10b      	bne.n	8006284 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	881a      	ldrh	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006278:	b292      	uxth	r2, r2
 800627a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	3302      	adds	r3, #2
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e008      	b.n	8006296 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	781a      	ldrb	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	b292      	uxth	r2, r2
 800628e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3301      	adds	r3, #1
 8006294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1cb      	bne.n	800624c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	2140      	movs	r1, #64	; 0x40
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fc63 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e005      	b.n	80062da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e000      	b.n	80062da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	f640 030f 	movw	r3, #2063	; 0x80f
 800630a:	4013      	ands	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d113      	bne.n	800633c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00e      	beq.n	800633c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8114 	beq.w	800655a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
      }
      return;
 800633a:	e10e      	b.n	800655a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80d6 	beq.w	80064f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d105      	bne.n	800635a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4b86      	ldr	r3, [pc, #536]	; (800656c <HAL_UART_IRQHandler+0x288>)
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80cb 	beq.w	80064f0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00e      	beq.n	8006382 <HAL_UART_IRQHandler+0x9e>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2201      	movs	r2, #1
 8006374:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637a:	f043 0201 	orr.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00e      	beq.n	80063aa <HAL_UART_IRQHandler+0xc6>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2202      	movs	r2, #2
 800639c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <HAL_UART_IRQHandler+0xee>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2204      	movs	r2, #4
 80063c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ca:	f043 0202 	orr.w	r2, r3, #2
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d009      	beq.n	8006404 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2208      	movs	r2, #8
 80063f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fc:	f043 0208 	orr.w	r2, r3, #8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00f      	beq.n	800642e <HAL_UART_IRQHandler+0x14a>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8093 	beq.w	800655e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00c      	beq.n	800645c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006460:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d004      	beq.n	800647a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006476:	2b00      	cmp	r3, #0
 8006478:	d031      	beq.n	80064de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fc00 	bl	8006c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d123      	bne.n	80064d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064aa:	4a31      	ldr	r2, [pc, #196]	; (8006570 <HAL_UART_IRQHandler+0x28c>)
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd fa0a 	bl	80038cc <HAL_DMA_Abort_IT>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	e00e      	b.n	80064ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f85a 	bl	8006588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	e00a      	b.n	80064ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f856 	bl	8006588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064dc:	e006      	b.n	80064ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f852 	bl	8006588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80064ea:	e038      	b.n	800655e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	bf00      	nop
    return;
 80064ee:	e036      	b.n	800655e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <HAL_UART_IRQHandler+0x232>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800650c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fc05 	bl	8006d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006514:	e026      	b.n	8006564 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652e:	2b00      	cmp	r3, #0
 8006530:	d017      	beq.n	8006562 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
    }
    return;
 800653a:	e012      	b.n	8006562 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <HAL_UART_IRQHandler+0x280>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fbcb 	bl	8006cec <UART_EndTransmit_IT>
    return;
 8006556:	bf00      	nop
 8006558:	e004      	b.n	8006564 <HAL_UART_IRQHandler+0x280>
      return;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <HAL_UART_IRQHandler+0x280>
    return;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_UART_IRQHandler+0x280>
    return;
 8006562:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	04000120 	.word	0x04000120
 8006570:	08006cc1 	.word	0x08006cc1

08006574 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065a0:	b088      	sub	sp, #32
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4313      	orrs	r3, r2
 80065c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4bb0      	ldr	r3, [pc, #704]	; (800688c <UART_SetConfig+0x2f0>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4aa6      	ldr	r2, [pc, #664]	; (8006890 <UART_SetConfig+0x2f4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	4313      	orrs	r3, r2
 8006604:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	430a      	orrs	r2, r1
 8006618:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a9d      	ldr	r2, [pc, #628]	; (8006894 <UART_SetConfig+0x2f8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d121      	bne.n	8006668 <UART_SetConfig+0xcc>
 8006624:	4b9c      	ldr	r3, [pc, #624]	; (8006898 <UART_SetConfig+0x2fc>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d816      	bhi.n	8006660 <UART_SetConfig+0xc4>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x9c>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006649 	.word	0x08006649
 800663c:	08006655 	.word	0x08006655
 8006640:	0800664f 	.word	0x0800664f
 8006644:	0800665b 	.word	0x0800665b
 8006648:	2301      	movs	r3, #1
 800664a:	76fb      	strb	r3, [r7, #27]
 800664c:	e072      	b.n	8006734 <UART_SetConfig+0x198>
 800664e:	2302      	movs	r3, #2
 8006650:	76fb      	strb	r3, [r7, #27]
 8006652:	e06f      	b.n	8006734 <UART_SetConfig+0x198>
 8006654:	2304      	movs	r3, #4
 8006656:	76fb      	strb	r3, [r7, #27]
 8006658:	e06c      	b.n	8006734 <UART_SetConfig+0x198>
 800665a:	2308      	movs	r3, #8
 800665c:	76fb      	strb	r3, [r7, #27]
 800665e:	e069      	b.n	8006734 <UART_SetConfig+0x198>
 8006660:	2310      	movs	r3, #16
 8006662:	76fb      	strb	r3, [r7, #27]
 8006664:	bf00      	nop
 8006666:	e065      	b.n	8006734 <UART_SetConfig+0x198>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a8b      	ldr	r2, [pc, #556]	; (800689c <UART_SetConfig+0x300>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d134      	bne.n	80066dc <UART_SetConfig+0x140>
 8006672:	4b89      	ldr	r3, [pc, #548]	; (8006898 <UART_SetConfig+0x2fc>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f003 030c 	and.w	r3, r3, #12
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d829      	bhi.n	80066d4 <UART_SetConfig+0x138>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0xec>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	080066bd 	.word	0x080066bd
 800668c:	080066d5 	.word	0x080066d5
 8006690:	080066d5 	.word	0x080066d5
 8006694:	080066d5 	.word	0x080066d5
 8006698:	080066c9 	.word	0x080066c9
 800669c:	080066d5 	.word	0x080066d5
 80066a0:	080066d5 	.word	0x080066d5
 80066a4:	080066d5 	.word	0x080066d5
 80066a8:	080066c3 	.word	0x080066c3
 80066ac:	080066d5 	.word	0x080066d5
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066d5 	.word	0x080066d5
 80066b8:	080066cf 	.word	0x080066cf
 80066bc:	2300      	movs	r3, #0
 80066be:	76fb      	strb	r3, [r7, #27]
 80066c0:	e038      	b.n	8006734 <UART_SetConfig+0x198>
 80066c2:	2302      	movs	r3, #2
 80066c4:	76fb      	strb	r3, [r7, #27]
 80066c6:	e035      	b.n	8006734 <UART_SetConfig+0x198>
 80066c8:	2304      	movs	r3, #4
 80066ca:	76fb      	strb	r3, [r7, #27]
 80066cc:	e032      	b.n	8006734 <UART_SetConfig+0x198>
 80066ce:	2308      	movs	r3, #8
 80066d0:	76fb      	strb	r3, [r7, #27]
 80066d2:	e02f      	b.n	8006734 <UART_SetConfig+0x198>
 80066d4:	2310      	movs	r3, #16
 80066d6:	76fb      	strb	r3, [r7, #27]
 80066d8:	bf00      	nop
 80066da:	e02b      	b.n	8006734 <UART_SetConfig+0x198>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a6b      	ldr	r2, [pc, #428]	; (8006890 <UART_SetConfig+0x2f4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d124      	bne.n	8006730 <UART_SetConfig+0x194>
 80066e6:	4b6c      	ldr	r3, [pc, #432]	; (8006898 <UART_SetConfig+0x2fc>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f4:	d012      	beq.n	800671c <UART_SetConfig+0x180>
 80066f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fa:	d802      	bhi.n	8006702 <UART_SetConfig+0x166>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <UART_SetConfig+0x174>
 8006700:	e012      	b.n	8006728 <UART_SetConfig+0x18c>
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006706:	d006      	beq.n	8006716 <UART_SetConfig+0x17a>
 8006708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800670c:	d009      	beq.n	8006722 <UART_SetConfig+0x186>
 800670e:	e00b      	b.n	8006728 <UART_SetConfig+0x18c>
 8006710:	2300      	movs	r3, #0
 8006712:	76fb      	strb	r3, [r7, #27]
 8006714:	e00e      	b.n	8006734 <UART_SetConfig+0x198>
 8006716:	2302      	movs	r3, #2
 8006718:	76fb      	strb	r3, [r7, #27]
 800671a:	e00b      	b.n	8006734 <UART_SetConfig+0x198>
 800671c:	2304      	movs	r3, #4
 800671e:	76fb      	strb	r3, [r7, #27]
 8006720:	e008      	b.n	8006734 <UART_SetConfig+0x198>
 8006722:	2308      	movs	r3, #8
 8006724:	76fb      	strb	r3, [r7, #27]
 8006726:	e005      	b.n	8006734 <UART_SetConfig+0x198>
 8006728:	2310      	movs	r3, #16
 800672a:	76fb      	strb	r3, [r7, #27]
 800672c:	bf00      	nop
 800672e:	e001      	b.n	8006734 <UART_SetConfig+0x198>
 8006730:	2310      	movs	r3, #16
 8006732:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a55      	ldr	r2, [pc, #340]	; (8006890 <UART_SetConfig+0x2f4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d174      	bne.n	8006828 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800673e:	7efb      	ldrb	r3, [r7, #27]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d824      	bhi.n	800678e <UART_SetConfig+0x1f2>
 8006744:	a201      	add	r2, pc, #4	; (adr r2, 800674c <UART_SetConfig+0x1b0>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	08006771 	.word	0x08006771
 8006750:	0800678f 	.word	0x0800678f
 8006754:	08006779 	.word	0x08006779
 8006758:	0800678f 	.word	0x0800678f
 800675c:	0800677f 	.word	0x0800677f
 8006760:	0800678f 	.word	0x0800678f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800678f 	.word	0x0800678f
 800676c:	08006787 	.word	0x08006787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006770:	f7fe fde0 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 8006774:	6178      	str	r0, [r7, #20]
        break;
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006778:	4b49      	ldr	r3, [pc, #292]	; (80068a0 <UART_SetConfig+0x304>)
 800677a:	617b      	str	r3, [r7, #20]
        break;
 800677c:	e00c      	b.n	8006798 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677e:	f7fe fd43 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 8006782:	6178      	str	r0, [r7, #20]
        break;
 8006784:	e008      	b.n	8006798 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e004      	b.n	8006798 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	76bb      	strb	r3, [r7, #26]
        break;
 8006796:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8100 	beq.w	80069a0 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	4413      	add	r3, r2
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d305      	bcc.n	80067bc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d902      	bls.n	80067c2 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	76bb      	strb	r3, [r7, #26]
 80067c0:	e0ee      	b.n	80069a0 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4619      	mov	r1, r3
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	f04f 0400 	mov.w	r4, #0
 80067d2:	0214      	lsls	r4, r2, #8
 80067d4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067d8:	020b      	lsls	r3, r1, #8
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6852      	ldr	r2, [r2, #4]
 80067de:	0852      	lsrs	r2, r2, #1
 80067e0:	4611      	mov	r1, r2
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	eb13 0b01 	adds.w	fp, r3, r1
 80067ea:	eb44 0c02 	adc.w	ip, r4, r2
 80067ee:	4658      	mov	r0, fp
 80067f0:	4661      	mov	r1, ip
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f04f 0400 	mov.w	r4, #0
 80067fa:	461a      	mov	r2, r3
 80067fc:	4623      	mov	r3, r4
 80067fe:	f7f9 ff2b 	bl	8000658 <__aeabi_uldivmod>
 8006802:	4603      	mov	r3, r0
 8006804:	460c      	mov	r4, r1
 8006806:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800680e:	d308      	bcc.n	8006822 <UART_SetConfig+0x286>
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006816:	d204      	bcs.n	8006822 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	60da      	str	r2, [r3, #12]
 8006820:	e0be      	b.n	80069a0 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	76bb      	strb	r3, [r7, #26]
 8006826:	e0bb      	b.n	80069a0 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006830:	d169      	bne.n	8006906 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8006832:	7efb      	ldrb	r3, [r7, #27]
 8006834:	2b08      	cmp	r3, #8
 8006836:	d835      	bhi.n	80068a4 <UART_SetConfig+0x308>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x2a4>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	080068a5 	.word	0x080068a5
 8006850:	0800687b 	.word	0x0800687b
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068a5 	.word	0x080068a5
 8006860:	08006883 	.word	0x08006883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006864:	f7fe fd66 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 8006868:	6178      	str	r0, [r7, #20]
        break;
 800686a:	e020      	b.n	80068ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800686c:	f7fe fd78 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 8006870:	6178      	str	r0, [r7, #20]
        break;
 8006872:	e01c      	b.n	80068ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <UART_SetConfig+0x304>)
 8006876:	617b      	str	r3, [r7, #20]
        break;
 8006878:	e019      	b.n	80068ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800687a:	f7fe fcc5 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 800687e:	6178      	str	r0, [r7, #20]
        break;
 8006880:	e015      	b.n	80068ae <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006886:	617b      	str	r3, [r7, #20]
        break;
 8006888:	e011      	b.n	80068ae <UART_SetConfig+0x312>
 800688a:	bf00      	nop
 800688c:	efff69f3 	.word	0xefff69f3
 8006890:	40008000 	.word	0x40008000
 8006894:	40013800 	.word	0x40013800
 8006898:	40021000 	.word	0x40021000
 800689c:	40004400 	.word	0x40004400
 80068a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	76bb      	strb	r3, [r7, #26]
        break;
 80068ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d075      	beq.n	80069a0 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	005a      	lsls	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	441a      	add	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b0f      	cmp	r3, #15
 80068d0:	d916      	bls.n	8006900 <UART_SetConfig+0x364>
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d8:	d212      	bcs.n	8006900 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f023 030f 	bic.w	r3, r3, #15
 80068e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	89fa      	ldrh	r2, [r7, #14]
 80068fc:	60da      	str	r2, [r3, #12]
 80068fe:	e04f      	b.n	80069a0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	76bb      	strb	r3, [r7, #26]
 8006904:	e04c      	b.n	80069a0 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006906:	7efb      	ldrb	r3, [r7, #27]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d828      	bhi.n	800695e <UART_SetConfig+0x3c2>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x378>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006939 	.word	0x08006939
 8006918:	08006941 	.word	0x08006941
 800691c:	08006949 	.word	0x08006949
 8006920:	0800695f 	.word	0x0800695f
 8006924:	0800694f 	.word	0x0800694f
 8006928:	0800695f 	.word	0x0800695f
 800692c:	0800695f 	.word	0x0800695f
 8006930:	0800695f 	.word	0x0800695f
 8006934:	08006957 	.word	0x08006957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006938:	f7fe fcfc 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 800693c:	6178      	str	r0, [r7, #20]
        break;
 800693e:	e013      	b.n	8006968 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006940:	f7fe fd0e 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 8006944:	6178      	str	r0, [r7, #20]
        break;
 8006946:	e00f      	b.n	8006968 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <UART_SetConfig+0x41c>)
 800694a:	617b      	str	r3, [r7, #20]
        break;
 800694c:	e00c      	b.n	8006968 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694e:	f7fe fc5b 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 8006952:	6178      	str	r0, [r7, #20]
        break;
 8006954:	e008      	b.n	8006968 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695a:	617b      	str	r3, [r7, #20]
        break;
 800695c:	e004      	b.n	8006968 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	76bb      	strb	r3, [r7, #26]
        break;
 8006966:	bf00      	nop
    }

    if (pclk != 0U)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	085a      	lsrs	r2, r3, #1
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	441a      	add	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	b29b      	uxth	r3, r3
 8006982:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b0f      	cmp	r3, #15
 8006988:	d908      	bls.n	800699c <UART_SetConfig+0x400>
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006990:	d204      	bcs.n	800699c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	e001      	b.n	80069a0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80069ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80069b8:	00f42400 	.word	0x00f42400

080069bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01a      	beq.n	8006ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aba:	d10a      	bne.n	8006ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
  }
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006b0e:	f7fb f9f9 	bl	8001f04 <HAL_GetTick>
 8006b12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d10e      	bne.n	8006b40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f82a 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e020      	b.n	8006b82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d10e      	bne.n	8006b6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f814 	bl	8006b8a <UART_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e00a      	b.n	8006b82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9a:	e05d      	b.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d059      	beq.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba4:	f7fb f9ae 	bl	8001f04 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d11b      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e042      	b.n	8006c78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02b      	beq.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0e:	d123      	bne.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e00f      	b.n	8006c78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69da      	ldr	r2, [r3, #28]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d092      	beq.n	8006b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fc52 	bl	8006588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fc2f 	bl	8006574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <__errno>:
 8006d34:	4b01      	ldr	r3, [pc, #4]	; (8006d3c <__errno+0x8>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	2000000c 	.word	0x2000000c

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4e0d      	ldr	r6, [pc, #52]	; (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	; (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4e0b      	ldr	r6, [pc, #44]	; (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	; (8006d84 <__libc_init_array+0x44>)
 8006d54:	f000 fcea 	bl	800772c <_init>
 8006d58:	1ba4      	subs	r4, r4, r6
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	42a5      	cmp	r5, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d68:	4798      	blx	r3
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d72:	4798      	blx	r3
 8006d74:	3501      	adds	r5, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	08007bd8 	.word	0x08007bd8
 8006d7c:	08007bd8 	.word	0x08007bd8
 8006d80:	08007bd8 	.word	0x08007bd8
 8006d84:	08007bdc 	.word	0x08007bdc

08006d88 <malloc>:
 8006d88:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <malloc+0xc>)
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	f000 b861 	b.w	8006e54 <_malloc_r>
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c

08006d98 <free>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <free+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f000 b80b 	b.w	8006db8 <_free_r>
 8006da2:	bf00      	nop
 8006da4:	2000000c 	.word	0x2000000c

08006da8 <memset>:
 8006da8:	4402      	add	r2, r0
 8006daa:	4603      	mov	r3, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <_free_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4605      	mov	r5, r0
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	d045      	beq.n	8006e4c <_free_r+0x94>
 8006dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc4:	1f0c      	subs	r4, r1, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfb8      	it	lt
 8006dca:	18e4      	addlt	r4, r4, r3
 8006dcc:	f000 f971 	bl	80070b2 <__malloc_lock>
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <_free_r+0x98>)
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	b933      	cbnz	r3, 8006de6 <_free_r+0x2e>
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6014      	str	r4, [r2, #0]
 8006ddc:	4628      	mov	r0, r5
 8006dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006de2:	f000 b967 	b.w	80070b4 <__malloc_unlock>
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	d90c      	bls.n	8006e04 <_free_r+0x4c>
 8006dea:	6821      	ldr	r1, [r4, #0]
 8006dec:	1862      	adds	r2, r4, r1
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bf04      	itt	eq
 8006df2:	681a      	ldreq	r2, [r3, #0]
 8006df4:	685b      	ldreq	r3, [r3, #4]
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	bf04      	itt	eq
 8006dfa:	1852      	addeq	r2, r2, r1
 8006dfc:	6022      	streq	r2, [r4, #0]
 8006dfe:	6004      	str	r4, [r0, #0]
 8006e00:	e7ec      	b.n	8006ddc <_free_r+0x24>
 8006e02:	4613      	mov	r3, r2
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	b10a      	cbz	r2, 8006e0c <_free_r+0x54>
 8006e08:	42a2      	cmp	r2, r4
 8006e0a:	d9fa      	bls.n	8006e02 <_free_r+0x4a>
 8006e0c:	6819      	ldr	r1, [r3, #0]
 8006e0e:	1858      	adds	r0, r3, r1
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d10b      	bne.n	8006e2c <_free_r+0x74>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	4401      	add	r1, r0
 8006e18:	1858      	adds	r0, r3, r1
 8006e1a:	4282      	cmp	r2, r0
 8006e1c:	6019      	str	r1, [r3, #0]
 8006e1e:	d1dd      	bne.n	8006ddc <_free_r+0x24>
 8006e20:	6810      	ldr	r0, [r2, #0]
 8006e22:	6852      	ldr	r2, [r2, #4]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	4401      	add	r1, r0
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	e7d7      	b.n	8006ddc <_free_r+0x24>
 8006e2c:	d902      	bls.n	8006e34 <_free_r+0x7c>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	602b      	str	r3, [r5, #0]
 8006e32:	e7d3      	b.n	8006ddc <_free_r+0x24>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	1821      	adds	r1, r4, r0
 8006e38:	428a      	cmp	r2, r1
 8006e3a:	bf04      	itt	eq
 8006e3c:	6811      	ldreq	r1, [r2, #0]
 8006e3e:	6852      	ldreq	r2, [r2, #4]
 8006e40:	6062      	str	r2, [r4, #4]
 8006e42:	bf04      	itt	eq
 8006e44:	1809      	addeq	r1, r1, r0
 8006e46:	6021      	streq	r1, [r4, #0]
 8006e48:	605c      	str	r4, [r3, #4]
 8006e4a:	e7c7      	b.n	8006ddc <_free_r+0x24>
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	2000021c 	.word	0x2000021c

08006e54 <_malloc_r>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	1ccd      	adds	r5, r1, #3
 8006e58:	f025 0503 	bic.w	r5, r5, #3
 8006e5c:	3508      	adds	r5, #8
 8006e5e:	2d0c      	cmp	r5, #12
 8006e60:	bf38      	it	cc
 8006e62:	250c      	movcc	r5, #12
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	4606      	mov	r6, r0
 8006e68:	db01      	blt.n	8006e6e <_malloc_r+0x1a>
 8006e6a:	42a9      	cmp	r1, r5
 8006e6c:	d903      	bls.n	8006e76 <_malloc_r+0x22>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	2000      	movs	r0, #0
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	f000 f91c 	bl	80070b2 <__malloc_lock>
 8006e7a:	4a21      	ldr	r2, [pc, #132]	; (8006f00 <_malloc_r+0xac>)
 8006e7c:	6814      	ldr	r4, [r2, #0]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	b991      	cbnz	r1, 8006ea8 <_malloc_r+0x54>
 8006e82:	4c20      	ldr	r4, [pc, #128]	; (8006f04 <_malloc_r+0xb0>)
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	b91b      	cbnz	r3, 8006e90 <_malloc_r+0x3c>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f83d 	bl	8006f08 <_sbrk_r>
 8006e8e:	6020      	str	r0, [r4, #0]
 8006e90:	4629      	mov	r1, r5
 8006e92:	4630      	mov	r0, r6
 8006e94:	f000 f838 	bl	8006f08 <_sbrk_r>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d124      	bne.n	8006ee6 <_malloc_r+0x92>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	6033      	str	r3, [r6, #0]
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f000 f907 	bl	80070b4 <__malloc_unlock>
 8006ea6:	e7e4      	b.n	8006e72 <_malloc_r+0x1e>
 8006ea8:	680b      	ldr	r3, [r1, #0]
 8006eaa:	1b5b      	subs	r3, r3, r5
 8006eac:	d418      	bmi.n	8006ee0 <_malloc_r+0x8c>
 8006eae:	2b0b      	cmp	r3, #11
 8006eb0:	d90f      	bls.n	8006ed2 <_malloc_r+0x7e>
 8006eb2:	600b      	str	r3, [r1, #0]
 8006eb4:	50cd      	str	r5, [r1, r3]
 8006eb6:	18cc      	adds	r4, r1, r3
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 f8fb 	bl	80070b4 <__malloc_unlock>
 8006ebe:	f104 000b 	add.w	r0, r4, #11
 8006ec2:	1d23      	adds	r3, r4, #4
 8006ec4:	f020 0007 	bic.w	r0, r0, #7
 8006ec8:	1ac3      	subs	r3, r0, r3
 8006eca:	d0d3      	beq.n	8006e74 <_malloc_r+0x20>
 8006ecc:	425a      	negs	r2, r3
 8006ece:	50e2      	str	r2, [r4, r3]
 8006ed0:	e7d0      	b.n	8006e74 <_malloc_r+0x20>
 8006ed2:	428c      	cmp	r4, r1
 8006ed4:	684b      	ldr	r3, [r1, #4]
 8006ed6:	bf16      	itet	ne
 8006ed8:	6063      	strne	r3, [r4, #4]
 8006eda:	6013      	streq	r3, [r2, #0]
 8006edc:	460c      	movne	r4, r1
 8006ede:	e7eb      	b.n	8006eb8 <_malloc_r+0x64>
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	6849      	ldr	r1, [r1, #4]
 8006ee4:	e7cc      	b.n	8006e80 <_malloc_r+0x2c>
 8006ee6:	1cc4      	adds	r4, r0, #3
 8006ee8:	f024 0403 	bic.w	r4, r4, #3
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d005      	beq.n	8006efc <_malloc_r+0xa8>
 8006ef0:	1a21      	subs	r1, r4, r0
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f000 f808 	bl	8006f08 <_sbrk_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d0cf      	beq.n	8006e9c <_malloc_r+0x48>
 8006efc:	6025      	str	r5, [r4, #0]
 8006efe:	e7db      	b.n	8006eb8 <_malloc_r+0x64>
 8006f00:	2000021c 	.word	0x2000021c
 8006f04:	20000220 	.word	0x20000220

08006f08 <_sbrk_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4c06      	ldr	r4, [pc, #24]	; (8006f24 <_sbrk_r+0x1c>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4605      	mov	r5, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	f7fa fef8 	bl	8001d08 <_sbrk>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_sbrk_r+0x1a>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_sbrk_r+0x1a>
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	20001450 	.word	0x20001450

08006f28 <siprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	b500      	push	{lr}
 8006f2c:	b09c      	sub	sp, #112	; 0x70
 8006f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f38:	4809      	ldr	r0, [pc, #36]	; (8006f60 <siprintf+0x38>)
 8006f3a:	9107      	str	r1, [sp, #28]
 8006f3c:	9104      	str	r1, [sp, #16]
 8006f3e:	4909      	ldr	r1, [pc, #36]	; (8006f64 <siprintf+0x3c>)
 8006f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f44:	9105      	str	r1, [sp, #20]
 8006f46:	6800      	ldr	r0, [r0, #0]
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	a902      	add	r1, sp, #8
 8006f4c:	f000 f90e 	bl	800716c <_svfiprintf_r>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	b01c      	add	sp, #112	; 0x70
 8006f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f5c:	b003      	add	sp, #12
 8006f5e:	4770      	bx	lr
 8006f60:	2000000c 	.word	0x2000000c
 8006f64:	ffff0208 	.word	0xffff0208

08006f68 <_strtoul_l.isra.0>:
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	4692      	mov	sl, r2
 8006f72:	461e      	mov	r6, r3
 8006f74:	460f      	mov	r7, r1
 8006f76:	463d      	mov	r5, r7
 8006f78:	9808      	ldr	r0, [sp, #32]
 8006f7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f7e:	f000 f883 	bl	8007088 <__locale_ctype_ptr_l>
 8006f82:	4420      	add	r0, r4
 8006f84:	7843      	ldrb	r3, [r0, #1]
 8006f86:	f013 0308 	ands.w	r3, r3, #8
 8006f8a:	d130      	bne.n	8006fee <_strtoul_l.isra.0+0x86>
 8006f8c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f8e:	d130      	bne.n	8006ff2 <_strtoul_l.isra.0+0x8a>
 8006f90:	787c      	ldrb	r4, [r7, #1]
 8006f92:	1cbd      	adds	r5, r7, #2
 8006f94:	2101      	movs	r1, #1
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	d05c      	beq.n	8007054 <_strtoul_l.isra.0+0xec>
 8006f9a:	2e10      	cmp	r6, #16
 8006f9c:	d109      	bne.n	8006fb2 <_strtoul_l.isra.0+0x4a>
 8006f9e:	2c30      	cmp	r4, #48	; 0x30
 8006fa0:	d107      	bne.n	8006fb2 <_strtoul_l.isra.0+0x4a>
 8006fa2:	782b      	ldrb	r3, [r5, #0]
 8006fa4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fa8:	2b58      	cmp	r3, #88	; 0x58
 8006faa:	d14e      	bne.n	800704a <_strtoul_l.isra.0+0xe2>
 8006fac:	786c      	ldrb	r4, [r5, #1]
 8006fae:	2610      	movs	r6, #16
 8006fb0:	3502      	adds	r5, #2
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	fbb2 f2f6 	udiv	r2, r2, r6
 8006fbc:	fb06 fc02 	mul.w	ip, r6, r2
 8006fc0:	ea6f 0c0c 	mvn.w	ip, ip
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006fca:	2f09      	cmp	r7, #9
 8006fcc:	d817      	bhi.n	8006ffe <_strtoul_l.isra.0+0x96>
 8006fce:	463c      	mov	r4, r7
 8006fd0:	42a6      	cmp	r6, r4
 8006fd2:	dd23      	ble.n	800701c <_strtoul_l.isra.0+0xb4>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	db1e      	blt.n	8007016 <_strtoul_l.isra.0+0xae>
 8006fd8:	4282      	cmp	r2, r0
 8006fda:	d31c      	bcc.n	8007016 <_strtoul_l.isra.0+0xae>
 8006fdc:	d101      	bne.n	8006fe2 <_strtoul_l.isra.0+0x7a>
 8006fde:	45a4      	cmp	ip, r4
 8006fe0:	db19      	blt.n	8007016 <_strtoul_l.isra.0+0xae>
 8006fe2:	fb00 4006 	mla	r0, r0, r6, r4
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fec:	e7eb      	b.n	8006fc6 <_strtoul_l.isra.0+0x5e>
 8006fee:	462f      	mov	r7, r5
 8006ff0:	e7c1      	b.n	8006f76 <_strtoul_l.isra.0+0xe>
 8006ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8006ff4:	bf04      	itt	eq
 8006ff6:	1cbd      	addeq	r5, r7, #2
 8006ff8:	787c      	ldrbeq	r4, [r7, #1]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	e7cb      	b.n	8006f96 <_strtoul_l.isra.0+0x2e>
 8006ffe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007002:	2f19      	cmp	r7, #25
 8007004:	d801      	bhi.n	800700a <_strtoul_l.isra.0+0xa2>
 8007006:	3c37      	subs	r4, #55	; 0x37
 8007008:	e7e2      	b.n	8006fd0 <_strtoul_l.isra.0+0x68>
 800700a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800700e:	2f19      	cmp	r7, #25
 8007010:	d804      	bhi.n	800701c <_strtoul_l.isra.0+0xb4>
 8007012:	3c57      	subs	r4, #87	; 0x57
 8007014:	e7dc      	b.n	8006fd0 <_strtoul_l.isra.0+0x68>
 8007016:	f04f 33ff 	mov.w	r3, #4294967295
 800701a:	e7e5      	b.n	8006fe8 <_strtoul_l.isra.0+0x80>
 800701c:	2b00      	cmp	r3, #0
 800701e:	da09      	bge.n	8007034 <_strtoul_l.isra.0+0xcc>
 8007020:	2322      	movs	r3, #34	; 0x22
 8007022:	f8c8 3000 	str.w	r3, [r8]
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
 800702a:	f1ba 0f00 	cmp.w	sl, #0
 800702e:	d107      	bne.n	8007040 <_strtoul_l.isra.0+0xd8>
 8007030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007034:	b101      	cbz	r1, 8007038 <_strtoul_l.isra.0+0xd0>
 8007036:	4240      	negs	r0, r0
 8007038:	f1ba 0f00 	cmp.w	sl, #0
 800703c:	d0f8      	beq.n	8007030 <_strtoul_l.isra.0+0xc8>
 800703e:	b10b      	cbz	r3, 8007044 <_strtoul_l.isra.0+0xdc>
 8007040:	f105 39ff 	add.w	r9, r5, #4294967295
 8007044:	f8ca 9000 	str.w	r9, [sl]
 8007048:	e7f2      	b.n	8007030 <_strtoul_l.isra.0+0xc8>
 800704a:	2430      	movs	r4, #48	; 0x30
 800704c:	2e00      	cmp	r6, #0
 800704e:	d1b0      	bne.n	8006fb2 <_strtoul_l.isra.0+0x4a>
 8007050:	2608      	movs	r6, #8
 8007052:	e7ae      	b.n	8006fb2 <_strtoul_l.isra.0+0x4a>
 8007054:	2c30      	cmp	r4, #48	; 0x30
 8007056:	d0a4      	beq.n	8006fa2 <_strtoul_l.isra.0+0x3a>
 8007058:	260a      	movs	r6, #10
 800705a:	e7aa      	b.n	8006fb2 <_strtoul_l.isra.0+0x4a>

0800705c <strtoul>:
 800705c:	4b08      	ldr	r3, [pc, #32]	; (8007080 <strtoul+0x24>)
 800705e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007060:	681c      	ldr	r4, [r3, #0]
 8007062:	4d08      	ldr	r5, [pc, #32]	; (8007084 <strtoul+0x28>)
 8007064:	6a23      	ldr	r3, [r4, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf08      	it	eq
 800706a:	462b      	moveq	r3, r5
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	460a      	mov	r2, r1
 8007072:	4601      	mov	r1, r0
 8007074:	4620      	mov	r0, r4
 8007076:	f7ff ff77 	bl	8006f68 <_strtoul_l.isra.0>
 800707a:	b003      	add	sp, #12
 800707c:	bd30      	pop	{r4, r5, pc}
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c
 8007084:	20000070 	.word	0x20000070

08007088 <__locale_ctype_ptr_l>:
 8007088:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800708c:	4770      	bx	lr

0800708e <__ascii_mbtowc>:
 800708e:	b082      	sub	sp, #8
 8007090:	b901      	cbnz	r1, 8007094 <__ascii_mbtowc+0x6>
 8007092:	a901      	add	r1, sp, #4
 8007094:	b142      	cbz	r2, 80070a8 <__ascii_mbtowc+0x1a>
 8007096:	b14b      	cbz	r3, 80070ac <__ascii_mbtowc+0x1e>
 8007098:	7813      	ldrb	r3, [r2, #0]
 800709a:	600b      	str	r3, [r1, #0]
 800709c:	7812      	ldrb	r2, [r2, #0]
 800709e:	1c10      	adds	r0, r2, #0
 80070a0:	bf18      	it	ne
 80070a2:	2001      	movne	r0, #1
 80070a4:	b002      	add	sp, #8
 80070a6:	4770      	bx	lr
 80070a8:	4610      	mov	r0, r2
 80070aa:	e7fb      	b.n	80070a4 <__ascii_mbtowc+0x16>
 80070ac:	f06f 0001 	mvn.w	r0, #1
 80070b0:	e7f8      	b.n	80070a4 <__ascii_mbtowc+0x16>

080070b2 <__malloc_lock>:
 80070b2:	4770      	bx	lr

080070b4 <__malloc_unlock>:
 80070b4:	4770      	bx	lr

080070b6 <__ssputs_r>:
 80070b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ba:	688e      	ldr	r6, [r1, #8]
 80070bc:	429e      	cmp	r6, r3
 80070be:	4682      	mov	sl, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	4690      	mov	r8, r2
 80070c4:	4699      	mov	r9, r3
 80070c6:	d837      	bhi.n	8007138 <__ssputs_r+0x82>
 80070c8:	898a      	ldrh	r2, [r1, #12]
 80070ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070ce:	d031      	beq.n	8007134 <__ssputs_r+0x7e>
 80070d0:	6825      	ldr	r5, [r4, #0]
 80070d2:	6909      	ldr	r1, [r1, #16]
 80070d4:	1a6f      	subs	r7, r5, r1
 80070d6:	6965      	ldr	r5, [r4, #20]
 80070d8:	2302      	movs	r3, #2
 80070da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070de:	fb95 f5f3 	sdiv	r5, r5, r3
 80070e2:	f109 0301 	add.w	r3, r9, #1
 80070e6:	443b      	add	r3, r7
 80070e8:	429d      	cmp	r5, r3
 80070ea:	bf38      	it	cc
 80070ec:	461d      	movcc	r5, r3
 80070ee:	0553      	lsls	r3, r2, #21
 80070f0:	d530      	bpl.n	8007154 <__ssputs_r+0x9e>
 80070f2:	4629      	mov	r1, r5
 80070f4:	f7ff feae 	bl	8006e54 <_malloc_r>
 80070f8:	4606      	mov	r6, r0
 80070fa:	b950      	cbnz	r0, 8007112 <__ssputs_r+0x5c>
 80070fc:	230c      	movs	r3, #12
 80070fe:	f8ca 3000 	str.w	r3, [sl]
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	463a      	mov	r2, r7
 8007114:	6921      	ldr	r1, [r4, #16]
 8007116:	f000 fab6 	bl	8007686 <memcpy>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	6126      	str	r6, [r4, #16]
 8007128:	6165      	str	r5, [r4, #20]
 800712a:	443e      	add	r6, r7
 800712c:	1bed      	subs	r5, r5, r7
 800712e:	6026      	str	r6, [r4, #0]
 8007130:	60a5      	str	r5, [r4, #8]
 8007132:	464e      	mov	r6, r9
 8007134:	454e      	cmp	r6, r9
 8007136:	d900      	bls.n	800713a <__ssputs_r+0x84>
 8007138:	464e      	mov	r6, r9
 800713a:	4632      	mov	r2, r6
 800713c:	4641      	mov	r1, r8
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	f000 faac 	bl	800769c <memmove>
 8007144:	68a3      	ldr	r3, [r4, #8]
 8007146:	1b9b      	subs	r3, r3, r6
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	441e      	add	r6, r3
 800714e:	6026      	str	r6, [r4, #0]
 8007150:	2000      	movs	r0, #0
 8007152:	e7dc      	b.n	800710e <__ssputs_r+0x58>
 8007154:	462a      	mov	r2, r5
 8007156:	f000 faba 	bl	80076ce <_realloc_r>
 800715a:	4606      	mov	r6, r0
 800715c:	2800      	cmp	r0, #0
 800715e:	d1e2      	bne.n	8007126 <__ssputs_r+0x70>
 8007160:	6921      	ldr	r1, [r4, #16]
 8007162:	4650      	mov	r0, sl
 8007164:	f7ff fe28 	bl	8006db8 <_free_r>
 8007168:	e7c8      	b.n	80070fc <__ssputs_r+0x46>
	...

0800716c <_svfiprintf_r>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	461d      	mov	r5, r3
 8007172:	898b      	ldrh	r3, [r1, #12]
 8007174:	061f      	lsls	r7, r3, #24
 8007176:	b09d      	sub	sp, #116	; 0x74
 8007178:	4680      	mov	r8, r0
 800717a:	460c      	mov	r4, r1
 800717c:	4616      	mov	r6, r2
 800717e:	d50f      	bpl.n	80071a0 <_svfiprintf_r+0x34>
 8007180:	690b      	ldr	r3, [r1, #16]
 8007182:	b96b      	cbnz	r3, 80071a0 <_svfiprintf_r+0x34>
 8007184:	2140      	movs	r1, #64	; 0x40
 8007186:	f7ff fe65 	bl	8006e54 <_malloc_r>
 800718a:	6020      	str	r0, [r4, #0]
 800718c:	6120      	str	r0, [r4, #16]
 800718e:	b928      	cbnz	r0, 800719c <_svfiprintf_r+0x30>
 8007190:	230c      	movs	r3, #12
 8007192:	f8c8 3000 	str.w	r3, [r8]
 8007196:	f04f 30ff 	mov.w	r0, #4294967295
 800719a:	e0c8      	b.n	800732e <_svfiprintf_r+0x1c2>
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	6163      	str	r3, [r4, #20]
 80071a0:	2300      	movs	r3, #0
 80071a2:	9309      	str	r3, [sp, #36]	; 0x24
 80071a4:	2320      	movs	r3, #32
 80071a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071aa:	2330      	movs	r3, #48	; 0x30
 80071ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071b0:	9503      	str	r5, [sp, #12]
 80071b2:	f04f 0b01 	mov.w	fp, #1
 80071b6:	4637      	mov	r7, r6
 80071b8:	463d      	mov	r5, r7
 80071ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80071be:	b10b      	cbz	r3, 80071c4 <_svfiprintf_r+0x58>
 80071c0:	2b25      	cmp	r3, #37	; 0x25
 80071c2:	d13e      	bne.n	8007242 <_svfiprintf_r+0xd6>
 80071c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80071c8:	d00b      	beq.n	80071e2 <_svfiprintf_r+0x76>
 80071ca:	4653      	mov	r3, sl
 80071cc:	4632      	mov	r2, r6
 80071ce:	4621      	mov	r1, r4
 80071d0:	4640      	mov	r0, r8
 80071d2:	f7ff ff70 	bl	80070b6 <__ssputs_r>
 80071d6:	3001      	adds	r0, #1
 80071d8:	f000 80a4 	beq.w	8007324 <_svfiprintf_r+0x1b8>
 80071dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071de:	4453      	add	r3, sl
 80071e0:	9309      	str	r3, [sp, #36]	; 0x24
 80071e2:	783b      	ldrb	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 809d 	beq.w	8007324 <_svfiprintf_r+0x1b8>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f04f 32ff 	mov.w	r2, #4294967295
 80071f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071fc:	931a      	str	r3, [sp, #104]	; 0x68
 80071fe:	462f      	mov	r7, r5
 8007200:	2205      	movs	r2, #5
 8007202:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007206:	4850      	ldr	r0, [pc, #320]	; (8007348 <_svfiprintf_r+0x1dc>)
 8007208:	f7f8 fffa 	bl	8000200 <memchr>
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	b9d0      	cbnz	r0, 8007246 <_svfiprintf_r+0xda>
 8007210:	06d9      	lsls	r1, r3, #27
 8007212:	bf44      	itt	mi
 8007214:	2220      	movmi	r2, #32
 8007216:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800721a:	071a      	lsls	r2, r3, #28
 800721c:	bf44      	itt	mi
 800721e:	222b      	movmi	r2, #43	; 0x2b
 8007220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007224:	782a      	ldrb	r2, [r5, #0]
 8007226:	2a2a      	cmp	r2, #42	; 0x2a
 8007228:	d015      	beq.n	8007256 <_svfiprintf_r+0xea>
 800722a:	9a07      	ldr	r2, [sp, #28]
 800722c:	462f      	mov	r7, r5
 800722e:	2000      	movs	r0, #0
 8007230:	250a      	movs	r5, #10
 8007232:	4639      	mov	r1, r7
 8007234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007238:	3b30      	subs	r3, #48	; 0x30
 800723a:	2b09      	cmp	r3, #9
 800723c:	d94d      	bls.n	80072da <_svfiprintf_r+0x16e>
 800723e:	b1b8      	cbz	r0, 8007270 <_svfiprintf_r+0x104>
 8007240:	e00f      	b.n	8007262 <_svfiprintf_r+0xf6>
 8007242:	462f      	mov	r7, r5
 8007244:	e7b8      	b.n	80071b8 <_svfiprintf_r+0x4c>
 8007246:	4a40      	ldr	r2, [pc, #256]	; (8007348 <_svfiprintf_r+0x1dc>)
 8007248:	1a80      	subs	r0, r0, r2
 800724a:	fa0b f000 	lsl.w	r0, fp, r0
 800724e:	4318      	orrs	r0, r3
 8007250:	9004      	str	r0, [sp, #16]
 8007252:	463d      	mov	r5, r7
 8007254:	e7d3      	b.n	80071fe <_svfiprintf_r+0x92>
 8007256:	9a03      	ldr	r2, [sp, #12]
 8007258:	1d11      	adds	r1, r2, #4
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	9103      	str	r1, [sp, #12]
 800725e:	2a00      	cmp	r2, #0
 8007260:	db01      	blt.n	8007266 <_svfiprintf_r+0xfa>
 8007262:	9207      	str	r2, [sp, #28]
 8007264:	e004      	b.n	8007270 <_svfiprintf_r+0x104>
 8007266:	4252      	negs	r2, r2
 8007268:	f043 0302 	orr.w	r3, r3, #2
 800726c:	9207      	str	r2, [sp, #28]
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	783b      	ldrb	r3, [r7, #0]
 8007272:	2b2e      	cmp	r3, #46	; 0x2e
 8007274:	d10c      	bne.n	8007290 <_svfiprintf_r+0x124>
 8007276:	787b      	ldrb	r3, [r7, #1]
 8007278:	2b2a      	cmp	r3, #42	; 0x2a
 800727a:	d133      	bne.n	80072e4 <_svfiprintf_r+0x178>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	9203      	str	r2, [sp, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	bfb8      	it	lt
 8007288:	f04f 33ff 	movlt.w	r3, #4294967295
 800728c:	3702      	adds	r7, #2
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	4d2e      	ldr	r5, [pc, #184]	; (800734c <_svfiprintf_r+0x1e0>)
 8007292:	7839      	ldrb	r1, [r7, #0]
 8007294:	2203      	movs	r2, #3
 8007296:	4628      	mov	r0, r5
 8007298:	f7f8 ffb2 	bl	8000200 <memchr>
 800729c:	b138      	cbz	r0, 80072ae <_svfiprintf_r+0x142>
 800729e:	2340      	movs	r3, #64	; 0x40
 80072a0:	1b40      	subs	r0, r0, r5
 80072a2:	fa03 f000 	lsl.w	r0, r3, r0
 80072a6:	9b04      	ldr	r3, [sp, #16]
 80072a8:	4303      	orrs	r3, r0
 80072aa:	3701      	adds	r7, #1
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	7839      	ldrb	r1, [r7, #0]
 80072b0:	4827      	ldr	r0, [pc, #156]	; (8007350 <_svfiprintf_r+0x1e4>)
 80072b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072b6:	2206      	movs	r2, #6
 80072b8:	1c7e      	adds	r6, r7, #1
 80072ba:	f7f8 ffa1 	bl	8000200 <memchr>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d038      	beq.n	8007334 <_svfiprintf_r+0x1c8>
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <_svfiprintf_r+0x1e8>)
 80072c4:	bb13      	cbnz	r3, 800730c <_svfiprintf_r+0x1a0>
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	3307      	adds	r3, #7
 80072ca:	f023 0307 	bic.w	r3, r3, #7
 80072ce:	3308      	adds	r3, #8
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d4:	444b      	add	r3, r9
 80072d6:	9309      	str	r3, [sp, #36]	; 0x24
 80072d8:	e76d      	b.n	80071b6 <_svfiprintf_r+0x4a>
 80072da:	fb05 3202 	mla	r2, r5, r2, r3
 80072de:	2001      	movs	r0, #1
 80072e0:	460f      	mov	r7, r1
 80072e2:	e7a6      	b.n	8007232 <_svfiprintf_r+0xc6>
 80072e4:	2300      	movs	r3, #0
 80072e6:	3701      	adds	r7, #1
 80072e8:	9305      	str	r3, [sp, #20]
 80072ea:	4619      	mov	r1, r3
 80072ec:	250a      	movs	r5, #10
 80072ee:	4638      	mov	r0, r7
 80072f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f4:	3a30      	subs	r2, #48	; 0x30
 80072f6:	2a09      	cmp	r2, #9
 80072f8:	d903      	bls.n	8007302 <_svfiprintf_r+0x196>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0c8      	beq.n	8007290 <_svfiprintf_r+0x124>
 80072fe:	9105      	str	r1, [sp, #20]
 8007300:	e7c6      	b.n	8007290 <_svfiprintf_r+0x124>
 8007302:	fb05 2101 	mla	r1, r5, r1, r2
 8007306:	2301      	movs	r3, #1
 8007308:	4607      	mov	r7, r0
 800730a:	e7f0      	b.n	80072ee <_svfiprintf_r+0x182>
 800730c:	ab03      	add	r3, sp, #12
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	4622      	mov	r2, r4
 8007312:	4b11      	ldr	r3, [pc, #68]	; (8007358 <_svfiprintf_r+0x1ec>)
 8007314:	a904      	add	r1, sp, #16
 8007316:	4640      	mov	r0, r8
 8007318:	f3af 8000 	nop.w
 800731c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007320:	4681      	mov	r9, r0
 8007322:	d1d6      	bne.n	80072d2 <_svfiprintf_r+0x166>
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	065b      	lsls	r3, r3, #25
 8007328:	f53f af35 	bmi.w	8007196 <_svfiprintf_r+0x2a>
 800732c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800732e:	b01d      	add	sp, #116	; 0x74
 8007330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007334:	ab03      	add	r3, sp, #12
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4622      	mov	r2, r4
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <_svfiprintf_r+0x1ec>)
 800733c:	a904      	add	r1, sp, #16
 800733e:	4640      	mov	r0, r8
 8007340:	f000 f882 	bl	8007448 <_printf_i>
 8007344:	e7ea      	b.n	800731c <_svfiprintf_r+0x1b0>
 8007346:	bf00      	nop
 8007348:	08007a9a 	.word	0x08007a9a
 800734c:	08007aa0 	.word	0x08007aa0
 8007350:	08007aa4 	.word	0x08007aa4
 8007354:	00000000 	.word	0x00000000
 8007358:	080070b7 	.word	0x080070b7

0800735c <_printf_common>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	4691      	mov	r9, r2
 8007362:	461f      	mov	r7, r3
 8007364:	688a      	ldr	r2, [r1, #8]
 8007366:	690b      	ldr	r3, [r1, #16]
 8007368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800736c:	4293      	cmp	r3, r2
 800736e:	bfb8      	it	lt
 8007370:	4613      	movlt	r3, r2
 8007372:	f8c9 3000 	str.w	r3, [r9]
 8007376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	b112      	cbz	r2, 8007386 <_printf_common+0x2a>
 8007380:	3301      	adds	r3, #1
 8007382:	f8c9 3000 	str.w	r3, [r9]
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	0699      	lsls	r1, r3, #26
 800738a:	bf42      	ittt	mi
 800738c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007390:	3302      	addmi	r3, #2
 8007392:	f8c9 3000 	strmi.w	r3, [r9]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	f015 0506 	ands.w	r5, r5, #6
 800739c:	d107      	bne.n	80073ae <_printf_common+0x52>
 800739e:	f104 0a19 	add.w	sl, r4, #25
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	f8d9 2000 	ldr.w	r2, [r9]
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	42ab      	cmp	r3, r5
 80073ac:	dc28      	bgt.n	8007400 <_printf_common+0xa4>
 80073ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	3300      	adds	r3, #0
 80073b6:	bf18      	it	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	0692      	lsls	r2, r2, #26
 80073bc:	d42d      	bmi.n	800741a <_printf_common+0xbe>
 80073be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c2:	4639      	mov	r1, r7
 80073c4:	4630      	mov	r0, r6
 80073c6:	47c0      	blx	r8
 80073c8:	3001      	adds	r0, #1
 80073ca:	d020      	beq.n	800740e <_printf_common+0xb2>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	68e5      	ldr	r5, [r4, #12]
 80073d0:	f8d9 2000 	ldr.w	r2, [r9]
 80073d4:	f003 0306 	and.w	r3, r3, #6
 80073d8:	2b04      	cmp	r3, #4
 80073da:	bf08      	it	eq
 80073dc:	1aad      	subeq	r5, r5, r2
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	6922      	ldr	r2, [r4, #16]
 80073e2:	bf0c      	ite	eq
 80073e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e8:	2500      	movne	r5, #0
 80073ea:	4293      	cmp	r3, r2
 80073ec:	bfc4      	itt	gt
 80073ee:	1a9b      	subgt	r3, r3, r2
 80073f0:	18ed      	addgt	r5, r5, r3
 80073f2:	f04f 0900 	mov.w	r9, #0
 80073f6:	341a      	adds	r4, #26
 80073f8:	454d      	cmp	r5, r9
 80073fa:	d11a      	bne.n	8007432 <_printf_common+0xd6>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e008      	b.n	8007412 <_printf_common+0xb6>
 8007400:	2301      	movs	r3, #1
 8007402:	4652      	mov	r2, sl
 8007404:	4639      	mov	r1, r7
 8007406:	4630      	mov	r0, r6
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d103      	bne.n	8007416 <_printf_common+0xba>
 800740e:	f04f 30ff 	mov.w	r0, #4294967295
 8007412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007416:	3501      	adds	r5, #1
 8007418:	e7c3      	b.n	80073a2 <_printf_common+0x46>
 800741a:	18e1      	adds	r1, r4, r3
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	2030      	movs	r0, #48	; 0x30
 8007420:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007424:	4422      	add	r2, r4
 8007426:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800742a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800742e:	3302      	adds	r3, #2
 8007430:	e7c5      	b.n	80073be <_printf_common+0x62>
 8007432:	2301      	movs	r3, #1
 8007434:	4622      	mov	r2, r4
 8007436:	4639      	mov	r1, r7
 8007438:	4630      	mov	r0, r6
 800743a:	47c0      	blx	r8
 800743c:	3001      	adds	r0, #1
 800743e:	d0e6      	beq.n	800740e <_printf_common+0xb2>
 8007440:	f109 0901 	add.w	r9, r9, #1
 8007444:	e7d8      	b.n	80073f8 <_printf_common+0x9c>
	...

08007448 <_printf_i>:
 8007448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800744c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007450:	460c      	mov	r4, r1
 8007452:	7e09      	ldrb	r1, [r1, #24]
 8007454:	b085      	sub	sp, #20
 8007456:	296e      	cmp	r1, #110	; 0x6e
 8007458:	4617      	mov	r7, r2
 800745a:	4606      	mov	r6, r0
 800745c:	4698      	mov	r8, r3
 800745e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007460:	f000 80b3 	beq.w	80075ca <_printf_i+0x182>
 8007464:	d822      	bhi.n	80074ac <_printf_i+0x64>
 8007466:	2963      	cmp	r1, #99	; 0x63
 8007468:	d036      	beq.n	80074d8 <_printf_i+0x90>
 800746a:	d80a      	bhi.n	8007482 <_printf_i+0x3a>
 800746c:	2900      	cmp	r1, #0
 800746e:	f000 80b9 	beq.w	80075e4 <_printf_i+0x19c>
 8007472:	2958      	cmp	r1, #88	; 0x58
 8007474:	f000 8083 	beq.w	800757e <_printf_i+0x136>
 8007478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800747c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007480:	e032      	b.n	80074e8 <_printf_i+0xa0>
 8007482:	2964      	cmp	r1, #100	; 0x64
 8007484:	d001      	beq.n	800748a <_printf_i+0x42>
 8007486:	2969      	cmp	r1, #105	; 0x69
 8007488:	d1f6      	bne.n	8007478 <_printf_i+0x30>
 800748a:	6820      	ldr	r0, [r4, #0]
 800748c:	6813      	ldr	r3, [r2, #0]
 800748e:	0605      	lsls	r5, r0, #24
 8007490:	f103 0104 	add.w	r1, r3, #4
 8007494:	d52a      	bpl.n	80074ec <_printf_i+0xa4>
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6011      	str	r1, [r2, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da03      	bge.n	80074a6 <_printf_i+0x5e>
 800749e:	222d      	movs	r2, #45	; 0x2d
 80074a0:	425b      	negs	r3, r3
 80074a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80074a6:	486f      	ldr	r0, [pc, #444]	; (8007664 <_printf_i+0x21c>)
 80074a8:	220a      	movs	r2, #10
 80074aa:	e039      	b.n	8007520 <_printf_i+0xd8>
 80074ac:	2973      	cmp	r1, #115	; 0x73
 80074ae:	f000 809d 	beq.w	80075ec <_printf_i+0x1a4>
 80074b2:	d808      	bhi.n	80074c6 <_printf_i+0x7e>
 80074b4:	296f      	cmp	r1, #111	; 0x6f
 80074b6:	d020      	beq.n	80074fa <_printf_i+0xb2>
 80074b8:	2970      	cmp	r1, #112	; 0x70
 80074ba:	d1dd      	bne.n	8007478 <_printf_i+0x30>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	f043 0320 	orr.w	r3, r3, #32
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	e003      	b.n	80074ce <_printf_i+0x86>
 80074c6:	2975      	cmp	r1, #117	; 0x75
 80074c8:	d017      	beq.n	80074fa <_printf_i+0xb2>
 80074ca:	2978      	cmp	r1, #120	; 0x78
 80074cc:	d1d4      	bne.n	8007478 <_printf_i+0x30>
 80074ce:	2378      	movs	r3, #120	; 0x78
 80074d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d4:	4864      	ldr	r0, [pc, #400]	; (8007668 <_printf_i+0x220>)
 80074d6:	e055      	b.n	8007584 <_printf_i+0x13c>
 80074d8:	6813      	ldr	r3, [r2, #0]
 80074da:	1d19      	adds	r1, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6011      	str	r1, [r2, #0]
 80074e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074e8:	2301      	movs	r3, #1
 80074ea:	e08c      	b.n	8007606 <_printf_i+0x1be>
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6011      	str	r1, [r2, #0]
 80074f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074f4:	bf18      	it	ne
 80074f6:	b21b      	sxthne	r3, r3
 80074f8:	e7cf      	b.n	800749a <_printf_i+0x52>
 80074fa:	6813      	ldr	r3, [r2, #0]
 80074fc:	6825      	ldr	r5, [r4, #0]
 80074fe:	1d18      	adds	r0, r3, #4
 8007500:	6010      	str	r0, [r2, #0]
 8007502:	0628      	lsls	r0, r5, #24
 8007504:	d501      	bpl.n	800750a <_printf_i+0xc2>
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	e002      	b.n	8007510 <_printf_i+0xc8>
 800750a:	0668      	lsls	r0, r5, #25
 800750c:	d5fb      	bpl.n	8007506 <_printf_i+0xbe>
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	4854      	ldr	r0, [pc, #336]	; (8007664 <_printf_i+0x21c>)
 8007512:	296f      	cmp	r1, #111	; 0x6f
 8007514:	bf14      	ite	ne
 8007516:	220a      	movne	r2, #10
 8007518:	2208      	moveq	r2, #8
 800751a:	2100      	movs	r1, #0
 800751c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007520:	6865      	ldr	r5, [r4, #4]
 8007522:	60a5      	str	r5, [r4, #8]
 8007524:	2d00      	cmp	r5, #0
 8007526:	f2c0 8095 	blt.w	8007654 <_printf_i+0x20c>
 800752a:	6821      	ldr	r1, [r4, #0]
 800752c:	f021 0104 	bic.w	r1, r1, #4
 8007530:	6021      	str	r1, [r4, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d13d      	bne.n	80075b2 <_printf_i+0x16a>
 8007536:	2d00      	cmp	r5, #0
 8007538:	f040 808e 	bne.w	8007658 <_printf_i+0x210>
 800753c:	4665      	mov	r5, ip
 800753e:	2a08      	cmp	r2, #8
 8007540:	d10b      	bne.n	800755a <_printf_i+0x112>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	07db      	lsls	r3, r3, #31
 8007546:	d508      	bpl.n	800755a <_printf_i+0x112>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	bfde      	ittt	le
 8007550:	2330      	movle	r3, #48	; 0x30
 8007552:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007556:	f105 35ff 	addle.w	r5, r5, #4294967295
 800755a:	ebac 0305 	sub.w	r3, ip, r5
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	f8cd 8000 	str.w	r8, [sp]
 8007564:	463b      	mov	r3, r7
 8007566:	aa03      	add	r2, sp, #12
 8007568:	4621      	mov	r1, r4
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff fef6 	bl	800735c <_printf_common>
 8007570:	3001      	adds	r0, #1
 8007572:	d14d      	bne.n	8007610 <_printf_i+0x1c8>
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	b005      	add	sp, #20
 800757a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800757e:	4839      	ldr	r0, [pc, #228]	; (8007664 <_printf_i+0x21c>)
 8007580:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	6821      	ldr	r1, [r4, #0]
 8007588:	1d1d      	adds	r5, r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6015      	str	r5, [r2, #0]
 800758e:	060a      	lsls	r2, r1, #24
 8007590:	d50b      	bpl.n	80075aa <_printf_i+0x162>
 8007592:	07ca      	lsls	r2, r1, #31
 8007594:	bf44      	itt	mi
 8007596:	f041 0120 	orrmi.w	r1, r1, #32
 800759a:	6021      	strmi	r1, [r4, #0]
 800759c:	b91b      	cbnz	r3, 80075a6 <_printf_i+0x15e>
 800759e:	6822      	ldr	r2, [r4, #0]
 80075a0:	f022 0220 	bic.w	r2, r2, #32
 80075a4:	6022      	str	r2, [r4, #0]
 80075a6:	2210      	movs	r2, #16
 80075a8:	e7b7      	b.n	800751a <_printf_i+0xd2>
 80075aa:	064d      	lsls	r5, r1, #25
 80075ac:	bf48      	it	mi
 80075ae:	b29b      	uxthmi	r3, r3
 80075b0:	e7ef      	b.n	8007592 <_printf_i+0x14a>
 80075b2:	4665      	mov	r5, ip
 80075b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80075b8:	fb02 3311 	mls	r3, r2, r1, r3
 80075bc:	5cc3      	ldrb	r3, [r0, r3]
 80075be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075c2:	460b      	mov	r3, r1
 80075c4:	2900      	cmp	r1, #0
 80075c6:	d1f5      	bne.n	80075b4 <_printf_i+0x16c>
 80075c8:	e7b9      	b.n	800753e <_printf_i+0xf6>
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	6825      	ldr	r5, [r4, #0]
 80075ce:	6961      	ldr	r1, [r4, #20]
 80075d0:	1d18      	adds	r0, r3, #4
 80075d2:	6010      	str	r0, [r2, #0]
 80075d4:	0628      	lsls	r0, r5, #24
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	d501      	bpl.n	80075de <_printf_i+0x196>
 80075da:	6019      	str	r1, [r3, #0]
 80075dc:	e002      	b.n	80075e4 <_printf_i+0x19c>
 80075de:	066a      	lsls	r2, r5, #25
 80075e0:	d5fb      	bpl.n	80075da <_printf_i+0x192>
 80075e2:	8019      	strh	r1, [r3, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	4665      	mov	r5, ip
 80075ea:	e7b9      	b.n	8007560 <_printf_i+0x118>
 80075ec:	6813      	ldr	r3, [r2, #0]
 80075ee:	1d19      	adds	r1, r3, #4
 80075f0:	6011      	str	r1, [r2, #0]
 80075f2:	681d      	ldr	r5, [r3, #0]
 80075f4:	6862      	ldr	r2, [r4, #4]
 80075f6:	2100      	movs	r1, #0
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7f8 fe01 	bl	8000200 <memchr>
 80075fe:	b108      	cbz	r0, 8007604 <_printf_i+0x1bc>
 8007600:	1b40      	subs	r0, r0, r5
 8007602:	6060      	str	r0, [r4, #4]
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	6123      	str	r3, [r4, #16]
 8007608:	2300      	movs	r3, #0
 800760a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800760e:	e7a7      	b.n	8007560 <_printf_i+0x118>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	462a      	mov	r2, r5
 8007614:	4639      	mov	r1, r7
 8007616:	4630      	mov	r0, r6
 8007618:	47c0      	blx	r8
 800761a:	3001      	adds	r0, #1
 800761c:	d0aa      	beq.n	8007574 <_printf_i+0x12c>
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	079b      	lsls	r3, r3, #30
 8007622:	d413      	bmi.n	800764c <_printf_i+0x204>
 8007624:	68e0      	ldr	r0, [r4, #12]
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	4298      	cmp	r0, r3
 800762a:	bfb8      	it	lt
 800762c:	4618      	movlt	r0, r3
 800762e:	e7a3      	b.n	8007578 <_printf_i+0x130>
 8007630:	2301      	movs	r3, #1
 8007632:	464a      	mov	r2, r9
 8007634:	4639      	mov	r1, r7
 8007636:	4630      	mov	r0, r6
 8007638:	47c0      	blx	r8
 800763a:	3001      	adds	r0, #1
 800763c:	d09a      	beq.n	8007574 <_printf_i+0x12c>
 800763e:	3501      	adds	r5, #1
 8007640:	68e3      	ldr	r3, [r4, #12]
 8007642:	9a03      	ldr	r2, [sp, #12]
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	42ab      	cmp	r3, r5
 8007648:	dcf2      	bgt.n	8007630 <_printf_i+0x1e8>
 800764a:	e7eb      	b.n	8007624 <_printf_i+0x1dc>
 800764c:	2500      	movs	r5, #0
 800764e:	f104 0919 	add.w	r9, r4, #25
 8007652:	e7f5      	b.n	8007640 <_printf_i+0x1f8>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1ac      	bne.n	80075b2 <_printf_i+0x16a>
 8007658:	7803      	ldrb	r3, [r0, #0]
 800765a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800765e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007662:	e76c      	b.n	800753e <_printf_i+0xf6>
 8007664:	08007aab 	.word	0x08007aab
 8007668:	08007abc 	.word	0x08007abc

0800766c <__ascii_wctomb>:
 800766c:	b149      	cbz	r1, 8007682 <__ascii_wctomb+0x16>
 800766e:	2aff      	cmp	r2, #255	; 0xff
 8007670:	bf85      	ittet	hi
 8007672:	238a      	movhi	r3, #138	; 0x8a
 8007674:	6003      	strhi	r3, [r0, #0]
 8007676:	700a      	strbls	r2, [r1, #0]
 8007678:	f04f 30ff 	movhi.w	r0, #4294967295
 800767c:	bf98      	it	ls
 800767e:	2001      	movls	r0, #1
 8007680:	4770      	bx	lr
 8007682:	4608      	mov	r0, r1
 8007684:	4770      	bx	lr

08007686 <memcpy>:
 8007686:	b510      	push	{r4, lr}
 8007688:	1e43      	subs	r3, r0, #1
 800768a:	440a      	add	r2, r1
 800768c:	4291      	cmp	r1, r2
 800768e:	d100      	bne.n	8007692 <memcpy+0xc>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769a:	e7f7      	b.n	800768c <memcpy+0x6>

0800769c <memmove>:
 800769c:	4288      	cmp	r0, r1
 800769e:	b510      	push	{r4, lr}
 80076a0:	eb01 0302 	add.w	r3, r1, r2
 80076a4:	d807      	bhi.n	80076b6 <memmove+0x1a>
 80076a6:	1e42      	subs	r2, r0, #1
 80076a8:	4299      	cmp	r1, r3
 80076aa:	d00a      	beq.n	80076c2 <memmove+0x26>
 80076ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076b4:	e7f8      	b.n	80076a8 <memmove+0xc>
 80076b6:	4283      	cmp	r3, r0
 80076b8:	d9f5      	bls.n	80076a6 <memmove+0xa>
 80076ba:	1881      	adds	r1, r0, r2
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	42d3      	cmn	r3, r2
 80076c0:	d100      	bne.n	80076c4 <memmove+0x28>
 80076c2:	bd10      	pop	{r4, pc}
 80076c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076cc:	e7f7      	b.n	80076be <memmove+0x22>

080076ce <_realloc_r>:
 80076ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d0:	4607      	mov	r7, r0
 80076d2:	4614      	mov	r4, r2
 80076d4:	460e      	mov	r6, r1
 80076d6:	b921      	cbnz	r1, 80076e2 <_realloc_r+0x14>
 80076d8:	4611      	mov	r1, r2
 80076da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076de:	f7ff bbb9 	b.w	8006e54 <_malloc_r>
 80076e2:	b922      	cbnz	r2, 80076ee <_realloc_r+0x20>
 80076e4:	f7ff fb68 	bl	8006db8 <_free_r>
 80076e8:	4625      	mov	r5, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ee:	f000 f814 	bl	800771a <_malloc_usable_size_r>
 80076f2:	42a0      	cmp	r0, r4
 80076f4:	d20f      	bcs.n	8007716 <_realloc_r+0x48>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff fbab 	bl	8006e54 <_malloc_r>
 80076fe:	4605      	mov	r5, r0
 8007700:	2800      	cmp	r0, #0
 8007702:	d0f2      	beq.n	80076ea <_realloc_r+0x1c>
 8007704:	4631      	mov	r1, r6
 8007706:	4622      	mov	r2, r4
 8007708:	f7ff ffbd 	bl	8007686 <memcpy>
 800770c:	4631      	mov	r1, r6
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff fb52 	bl	8006db8 <_free_r>
 8007714:	e7e9      	b.n	80076ea <_realloc_r+0x1c>
 8007716:	4635      	mov	r5, r6
 8007718:	e7e7      	b.n	80076ea <_realloc_r+0x1c>

0800771a <_malloc_usable_size_r>:
 800771a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771e:	1f18      	subs	r0, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbc      	itt	lt
 8007724:	580b      	ldrlt	r3, [r1, r0]
 8007726:	18c0      	addlt	r0, r0, r3
 8007728:	4770      	bx	lr
	...

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr
