
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f4  080066f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066fc  080066fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000119c  200001e0  080068e0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000137c  080068e0  0002137c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125b7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002427  00000000  00000000  000327c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  00034bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000231bc  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c92c  00000000  00000000  00059b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3fae  00000000  00000000  00066470  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a41e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  0013a49c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006320 	.word	0x08006320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006320 	.word	0x08006320

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <read_from_eeprom_single_byte>:
		HAL_Delay(500);
	}
}

ERRORS read_from_eeprom_single_byte(uint16_t addr, uint8_t* read_buffer)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	80fb      	strh	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr, 1, read_buffer, sizeof(*read_buffer), HAL_MAX_DELAY)!= HAL_OK)
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	21a0      	movs	r1, #160	; 0xa0
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <read_from_eeprom_single_byte+0x3c>)
 800097a:	f002 fe7b 	bl	8003674 <HAL_I2C_Mem_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <read_from_eeprom_single_byte+0x30>
	{
		/*char msg[] = "EEPROM_READ_ERROR";
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);*/
		return EEPROM_READ_ERROR;
 8000984:	2305      	movs	r3, #5
 8000986:	e000      	b.n	800098a <read_from_eeprom_single_byte+0x32>
	}
	return OK;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000224 	.word	0x20000224

08000998 <read_from_eeprom_byte_by_byte>:

ERRORS read_from_eeprom_byte_by_byte(uint16_t addr, uint8_t num_of_bytes, uint8_t* read_buffer)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af04      	add	r7, sp, #16
 800099e:	4603      	mov	r3, r0
 80009a0:	603a      	str	r2, [r7, #0]
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	460b      	mov	r3, r1
 80009a6:	717b      	strb	r3, [r7, #5]
	for(uint8_t i=0;i<num_of_bytes;++i)
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e01f      	b.n	80009ee <read_from_eeprom_byte_by_byte+0x56>
	{
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, addr+i, 1, (uint8_t*)(read_buffer+i), sizeof(read_buffer[i]), HAL_MAX_DELAY)!= HAL_OK)
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	b299      	uxth	r1, r3
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	f04f 32ff 	mov.w	r2, #4294967295
 80009c2:	9202      	str	r2, [sp, #8]
 80009c4:	2201      	movs	r2, #1
 80009c6:	9201      	str	r2, [sp, #4]
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	460a      	mov	r2, r1
 80009ce:	21a0      	movs	r1, #160	; 0xa0
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <read_from_eeprom_byte_by_byte+0x68>)
 80009d2:	f002 fe4f 	bl	8003674 <HAL_I2C_Mem_Read>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <read_from_eeprom_byte_by_byte+0x48>
		{
			/*char msg[] = "EEPROM_READ_ERROR";
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);*/
			return EEPROM_READ_ERROR;
 80009dc:	2305      	movs	r3, #5
 80009de:	e00b      	b.n	80009f8 <read_from_eeprom_byte_by_byte+0x60>
		}
		HAL_Delay(500);
 80009e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e4:	f001 f85a 	bl	8001a9c <HAL_Delay>
	for(uint8_t i=0;i<num_of_bytes;++i)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3db      	bcc.n	80009ae <read_from_eeprom_byte_by_byte+0x16>
	}
	return OK;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000224 	.word	0x20000224

08000a04 <check_eeprom_data>:
		}
	HAL_Delay(5000);
}

ERRORS check_eeprom_data()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	char data_start_check = 0, data_end_check = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]
	if((read_from_eeprom_single_byte(EEPROM_DATA_START_ADDR, (uint8_t*)&data_start_check) != OK)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	4619      	mov	r1, r3
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff9e 	bl	8000958 <read_from_eeprom_single_byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d107      	bne.n	8000a32 <check_eeprom_data+0x2e>
			|| 	(read_from_eeprom_single_byte(EEPROM_DATA_END_ADDR, (uint8_t*)&data_end_check) != OK))
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	4619      	mov	r1, r3
 8000a26:	2019      	movs	r0, #25
 8000a28:	f7ff ff96 	bl	8000958 <read_from_eeprom_single_byte>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d001      	beq.n	8000a36 <check_eeprom_data+0x32>
	{
		return EEPROM_READ_ERROR;
 8000a32:	2305      	movs	r3, #5
 8000a34:	e008      	b.n	8000a48 <check_eeprom_data+0x44>
	}
	if(data_start_check != '<' || data_end_check != '>')
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b3c      	cmp	r3, #60	; 0x3c
 8000a3a:	d102      	bne.n	8000a42 <check_eeprom_data+0x3e>
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8000a40:	d001      	beq.n	8000a46 <check_eeprom_data+0x42>
	{
		return EEPROM_DATA_INVALID;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e000      	b.n	8000a48 <check_eeprom_data+0x44>
	}
	return OK;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <add_end_chars_to_sensor_info>:

void add_end_chars_to_sensor_info(struct sensor_info* si)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	si->version_num[VERSION_NUM_SIZE] 													= '\0';
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	709a      	strb	r2, [r3, #2]
	si->sensor_id[SENSOR_ID_SIZE] 														= '\0';
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	715a      	strb	r2, [r3, #5]
	si->sensor_type[SENSOR_TYPE_SIZE]													= '\0';
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	721a      	strb	r2, [r3, #8]
	si->current_per_ppm_coefficient_dec[CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE] 			= '\0';
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	72da      	strb	r2, [r3, #11]
	si->current_per_ppm_coefficient_frac[CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE] 		= '\0';
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	73da      	strb	r2, [r3, #15]
	si->threshold[THRESHOLD_SIZE]														= '\0';
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	74da      	strb	r2, [r3, #19]
	si->device_turned_on_with_sensor_counter[DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE] = '\0';
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
	si->sensor_fired_counter[SENSOR_FIRED_COUNTER_SIZE]									= '\0';
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	77da      	strb	r2, [r3, #31]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <read_sensor_data_from_eeprom>:



ERRORS read_sensor_data_from_eeprom(struct sensor_info* si)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(check_eeprom_data() != OK)
 8000a9c:	f7ff ffb2 	bl	8000a04 <check_eeprom_data>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d001      	beq.n	8000aaa <read_sensor_data_from_eeprom+0x16>
		return EEPROM_DATA_INVALID;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e077      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>


	if(read_from_eeprom_byte_by_byte(VERSION_NUM_ADDR, VERSION_NUM_SIZE, (uint8_t*)(si->version_num)) != OK)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	461a      	mov	r2, r3
 8000aae:	2102      	movs	r1, #2
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff ff71 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d001      	beq.n	8000ac0 <read_sensor_data_from_eeprom+0x2c>
	{
		return CRITICAL_ERROR;
 8000abc:	2302      	movs	r3, #2
 8000abe:	e06c      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	char forbidden_version[] = "00";
 8000ac0:	4a38      	ldr	r2, [pc, #224]	; (8000ba4 <read_sensor_data_from_eeprom+0x110>)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	8019      	strh	r1, [r3, #0]
 8000acc:	3302      	adds	r3, #2
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	701a      	strb	r2, [r3, #0]
	if(strcmp(si->version_num,forbidden_version) == 0) //if they are identical
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb78 	bl	80001d0 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <read_sensor_data_from_eeprom+0x56>
	{
		return EEPROM_SENSOR_VERSION_INVALID;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	e057      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}

	if(read_from_eeprom_byte_by_byte(SENSOR_ID_ADDR, SENSOR_ID_SIZE, (uint8_t*)(si->sensor_id)) != OK)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3303      	adds	r3, #3
 8000aee:	461a      	mov	r2, r3
 8000af0:	2102      	movs	r1, #2
 8000af2:	2003      	movs	r0, #3
 8000af4:	f7ff ff50 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d001      	beq.n	8000b02 <read_sensor_data_from_eeprom+0x6e>
	{
		return CRITICAL_ERROR;
 8000afe:	2302      	movs	r3, #2
 8000b00:	e04b      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(SENSOR_TYPE_ADDR, SENSOR_TYPE_SIZE, (uint8_t*)(si->sensor_type)) != OK)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3306      	adds	r3, #6
 8000b06:	461a      	mov	r2, r3
 8000b08:	2102      	movs	r1, #2
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f7ff ff44 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d001      	beq.n	8000b1a <read_sensor_data_from_eeprom+0x86>
	{
		return CRITICAL_ERROR;
 8000b16:	2302      	movs	r3, #2
 8000b18:	e03f      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE,
			(uint8_t*)(si->current_per_ppm_coefficient_dec)) != OK)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3309      	adds	r3, #9
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE,
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2102      	movs	r1, #2
 8000b22:	2007      	movs	r0, #7
 8000b24:	f7ff ff38 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d001      	beq.n	8000b32 <read_sensor_data_from_eeprom+0x9e>
	{
		return CRITICAL_ERROR;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e033      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE,
			(uint8_t*)(si->current_per_ppm_coefficient_frac)) != OK)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	330c      	adds	r3, #12
	if(read_from_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE,
 8000b36:	461a      	mov	r2, r3
 8000b38:	2103      	movs	r1, #3
 8000b3a:	2009      	movs	r0, #9
 8000b3c:	f7ff ff2c 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d001      	beq.n	8000b4a <read_sensor_data_from_eeprom+0xb6>
	{
		return CRITICAL_ERROR;
 8000b46:	2302      	movs	r3, #2
 8000b48:	e027      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(THRESHOLD_ADDR, THRESHOLD_SIZE, (uint8_t*)(si->threshold)) != OK)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3310      	adds	r3, #16
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2103      	movs	r1, #3
 8000b52:	200c      	movs	r0, #12
 8000b54:	f7ff ff20 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d001      	beq.n	8000b62 <read_sensor_data_from_eeprom+0xce>
	{
		return CRITICAL_ERROR;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	e01b      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE,
			(uint8_t*)(si->device_turned_on_with_sensor_counter)) != OK)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3314      	adds	r3, #20
	if(read_from_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE,
 8000b66:	461a      	mov	r2, r3
 8000b68:	2104      	movs	r1, #4
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f7ff ff14 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d001      	beq.n	8000b7a <read_sensor_data_from_eeprom+0xe6>
	{
		return CRITICAL_ERROR;
 8000b76:	2302      	movs	r3, #2
 8000b78:	e00f      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}
	if(read_from_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, SENSOR_FIRED_COUNTER_SIZE,
			(uint8_t*)(si->sensor_fired_counter)) != OK)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3319      	adds	r3, #25
	if(read_from_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, SENSOR_FIRED_COUNTER_SIZE,
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2106      	movs	r1, #6
 8000b82:	2013      	movs	r0, #19
 8000b84:	f7ff ff08 	bl	8000998 <read_from_eeprom_byte_by_byte>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d001      	beq.n	8000b92 <read_sensor_data_from_eeprom+0xfe>
	{
		return CRITICAL_ERROR;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e003      	b.n	8000b9a <read_sensor_data_from_eeprom+0x106>
	}

	add_end_chars_to_sensor_info(si);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff5c 	bl	8000a50 <add_end_chars_to_sensor_info>

	return OK;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	0800642c 	.word	0x0800642c

08000ba8 <sensor_info_init>:

void sensor_info_init(struct sensor_info* si)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	memset(si->version_num, '0', VERSION_NUM_SIZE);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	2130      	movs	r1, #48	; 0x30
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 feee 	bl	8005998 <memset>
	memset(si->sensor_id, '0', SENSOR_ID_SIZE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3303      	adds	r3, #3
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	2130      	movs	r1, #48	; 0x30
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fee7 	bl	8005998 <memset>
	memset(si->sensor_type, '0', SENSOR_TYPE_SIZE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3306      	adds	r3, #6
 8000bce:	2202      	movs	r2, #2
 8000bd0:	2130      	movs	r1, #48	; 0x30
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 fee0 	bl	8005998 <memset>
	memset(si->current_per_ppm_coefficient_dec, '0', CURRENT_PER_PPM_COEFFICIENT_DEC_SIZE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3309      	adds	r3, #9
 8000bdc:	2202      	movs	r2, #2
 8000bde:	2130      	movs	r1, #48	; 0x30
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fed9 	bl	8005998 <memset>
	memset(si->current_per_ppm_coefficient_frac, '0', CURRENT_PER_PPM_COEFFICIENT_FRAC_SIZE);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	330c      	adds	r3, #12
 8000bea:	2203      	movs	r2, #3
 8000bec:	2130      	movs	r1, #48	; 0x30
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fed2 	bl	8005998 <memset>
	memset(si->threshold, '0', THRESHOLD_SIZE);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3310      	adds	r3, #16
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	2130      	movs	r1, #48	; 0x30
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fecb 	bl	8005998 <memset>
	memset(si->device_turned_on_with_sensor_counter, '0', DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_SIZE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3314      	adds	r3, #20
 8000c06:	2204      	movs	r2, #4
 8000c08:	2130      	movs	r1, #48	; 0x30
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 fec4 	bl	8005998 <memset>
	memset(si->sensor_fired_counter, '0', SENSOR_FIRED_COUNTER_SIZE);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3319      	adds	r3, #25
 8000c14:	2206      	movs	r2, #6
 8000c16:	2130      	movs	r1, #48	; 0x30
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 febd 	bl	8005998 <memset>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <show_read_sensor_data>:

void show_read_sensor_data(struct sensor_info* si)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b0c2      	sub	sp, #264	; 0x108
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	6018      	str	r0, [r3, #0]
	char msg_buffer[256];
	sprintf(msg_buffer,"+=========EEPROM=========+\n\r");
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4a7d      	ldr	r2, [pc, #500]	; (8000e2c <show_read_sensor_data+0x204>)
 8000c38:	461c      	mov	r4, r3
 8000c3a:	4615      	mov	r5, r2
 8000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c44:	c407      	stmia	r4!, {r0, r1, r2}
 8000c46:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fac9 	bl	80001e4 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	3301      	adds	r3, #1
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	f107 0108 	add.w	r1, r7, #8
 8000c5e:	230a      	movs	r3, #10
 8000c60:	4873      	ldr	r0, [pc, #460]	; (8000e30 <show_read_sensor_data+0x208>)
 8000c62:	f004 fa59 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"VERSION NUMBER: %s\n\r", si->version_num);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4971      	ldr	r1, [pc, #452]	; (8000e34 <show_read_sensor_data+0x20c>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 ff51 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fab2 	bl	80001e4 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3301      	adds	r3, #1
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	4868      	ldr	r0, [pc, #416]	; (8000e30 <show_read_sensor_data+0x208>)
 8000c90:	f004 fa42 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR ID: %s\n\r", si->sensor_id);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	1cda      	adds	r2, r3, #3
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4966      	ldr	r1, [pc, #408]	; (8000e38 <show_read_sensor_data+0x210>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 ff39 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fa9a 	bl	80001e4 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	f107 0108 	add.w	r1, r7, #8
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	485c      	ldr	r0, [pc, #368]	; (8000e30 <show_read_sensor_data+0x208>)
 8000cc0:	f004 fa2a 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR TYPE: %s\n\r", si->sensor_type);
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	1d9a      	adds	r2, r3, #6
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	495b      	ldr	r1, [pc, #364]	; (8000e3c <show_read_sensor_data+0x214>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 ff21 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fa82 	bl	80001e4 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	f107 0108 	add.w	r1, r7, #8
 8000cec:	230a      	movs	r3, #10
 8000cee:	4850      	ldr	r0, [pc, #320]	; (8000e30 <show_read_sensor_data+0x208>)
 8000cf0:	f004 fa12 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"CURRENT_DEC: %s\n\r", si->current_per_ppm_coefficient_dec);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f103 0209 	add.w	r2, r3, #9
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	494f      	ldr	r1, [pc, #316]	; (8000e40 <show_read_sensor_data+0x218>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 ff08 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fa69 	bl	80001e4 <strlen>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	f107 0108 	add.w	r1, r7, #8
 8000d1e:	230a      	movs	r3, #10
 8000d20:	4843      	ldr	r0, [pc, #268]	; (8000e30 <show_read_sensor_data+0x208>)
 8000d22:	f004 f9f9 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"CURRENT FRAC: %s\n\r", si->current_per_ppm_coefficient_frac);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f103 020c 	add.w	r2, r3, #12
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4944      	ldr	r1, [pc, #272]	; (8000e44 <show_read_sensor_data+0x21c>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 feef 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa50 	bl	80001e4 <strlen>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	f107 0108 	add.w	r1, r7, #8
 8000d50:	230a      	movs	r3, #10
 8000d52:	4837      	ldr	r0, [pc, #220]	; (8000e30 <show_read_sensor_data+0x208>)
 8000d54:	f004 f9e0 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"THRESHOLD: %s\n\r", si->threshold);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f103 0210 	add.w	r2, r3, #16
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4938      	ldr	r1, [pc, #224]	; (8000e48 <show_read_sensor_data+0x220>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fed6 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fa37 	bl	80001e4 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	230a      	movs	r3, #10
 8000d84:	482a      	ldr	r0, [pc, #168]	; (8000e30 <show_read_sensor_data+0x208>)
 8000d86:	f004 f9c7 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"DEVICE ON COUNTER: %s\n\r", si->device_turned_on_with_sensor_counter);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f103 0214 	add.w	r2, r3, #20
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	492d      	ldr	r1, [pc, #180]	; (8000e4c <show_read_sensor_data+0x224>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 febd 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa1e 	bl	80001e4 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f107 0108 	add.w	r1, r7, #8
 8000db4:	230a      	movs	r3, #10
 8000db6:	481e      	ldr	r0, [pc, #120]	; (8000e30 <show_read_sensor_data+0x208>)
 8000db8:	f004 f9ae 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"SENSOR FIRED COUNTER: %s\n\r", si->sensor_fired_counter);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f103 0219 	add.w	r2, r3, #25
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4921      	ldr	r1, [pc, #132]	; (8000e50 <show_read_sensor_data+0x228>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f004 fea4 	bl	8005b18 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa05 	bl	80001e4 <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f107 0108 	add.w	r1, r7, #8
 8000de6:	230a      	movs	r3, #10
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <show_read_sensor_data+0x208>)
 8000dea:	f004 f995 	bl	8005118 <HAL_UART_Transmit>
	sprintf(msg_buffer,"+========================+\n\r");
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <show_read_sensor_data+0x22c>)
 8000df4:	461c      	mov	r4, r3
 8000df6:	4615      	mov	r5, r2
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e00:	c407      	stmia	r4!, {r0, r1, r2}
 8000e02:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer)+1, 10);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff f9eb 	bl	80001e4 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f107 0108 	add.w	r1, r7, #8
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <show_read_sensor_data+0x208>)
 8000e1e:	f004 f97b 	bl	8005118 <HAL_UART_Transmit>
}
 8000e22:	bf00      	nop
 8000e24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2c:	08006430 	.word	0x08006430
 8000e30:	20000270 	.word	0x20000270
 8000e34:	08006450 	.word	0x08006450
 8000e38:	08006468 	.word	0x08006468
 8000e3c:	08006478 	.word	0x08006478
 8000e40:	0800648c 	.word	0x0800648c
 8000e44:	080064a0 	.word	0x080064a0
 8000e48:	080064b4 	.word	0x080064b4
 8000e4c:	080064c4 	.word	0x080064c4
 8000e50:	080064dc 	.word	0x080064dc
 8000e54:	080064f8 	.word	0x080064f8

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f000 fda8 	bl	80019b2 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2108      	movs	r1, #8
 8000e66:	4846      	ldr	r0, [pc, #280]	; (8000f80 <main+0x128>)
 8000e68:	f002 fb20 	bl	80034ac <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f89a 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 fa30 	bl	80012d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e74:	f000 fa10 	bl	8001298 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e78:	f000 f9de 	bl	8001238 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e7c:	f000 f928 	bl	80010d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e80:	f000 f99a 	bl	80011b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  sensor_info_init(&si);
 8000e84:	483f      	ldr	r0, [pc, #252]	; (8000f84 <main+0x12c>)
 8000e86:	f7ff fe8f 	bl	8000ba8 <sensor_info_init>
  last_error=read_sensor_data_from_eeprom(&si);
 8000e8a:	483e      	ldr	r0, [pc, #248]	; (8000f84 <main+0x12c>)
 8000e8c:	f7ff fe02 	bl	8000a94 <read_sensor_data_from_eeprom>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <main+0x130>)
 8000e96:	701a      	strb	r2, [r3, #0]

  #ifdef DEBUG_MODE
  show_read_sensor_data(&si);
 8000e98:	483a      	ldr	r0, [pc, #232]	; (8000f84 <main+0x12c>)
 8000e9a:	f7ff fec5 	bl	8000c28 <show_read_sensor_data>
  #endif

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_vals, 2);
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	493a      	ldr	r1, [pc, #232]	; (8000f8c <main+0x134>)
 8000ea2:	483b      	ldr	r0, [pc, #236]	; (8000f90 <main+0x138>)
 8000ea4:	f001 f92a 	bl	80020fc <HAL_ADC_Start_DMA>
  char* buffer = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2108      	movs	r1, #8
 8000eb0:	4833      	ldr	r0, [pc, #204]	; (8000f80 <main+0x128>)
 8000eb2:	f002 fafb 	bl	80034ac <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(last_error == OK)
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <main+0x130>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d155      	bne.n	8000f6a <main+0x112>
	  {
		  buffer = (char*)malloc(100*sizeof(char));
 8000ebe:	2064      	movs	r0, #100	; 0x64
 8000ec0:	f004 fd5a 	bl	8005978 <malloc>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	607b      	str	r3, [r7, #4]
		  while(!filter_done){}
 8000ec8:	bf00      	nop
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <main+0x13c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0fb      	beq.n	8000eca <main+0x72>
		  //sprintf(buffer,"Measured: ADC11(green) = %u[mV]  /// ADC9(yellow) = %u[mV]\r",measured_values[0],measured_values[1]);
		  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
		  if((last_error = check_if_threshold_level_exceeded()) != OK)
 8000ed2:	f000 fb4d 	bl	8001570 <check_if_threshold_level_exceeded>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <main+0x130>)
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <main+0x130>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d010      	beq.n	8000f08 <main+0xb0>
		  {
			  sprintf(buffer,"\bThreshold level EXCEEDED!\r");
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <main+0x140>)
 8000eea:	461d      	mov	r5, r3
 8000eec:	4614      	mov	r4, r2
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	6028      	str	r0, [r5, #0]
 8000ef2:	6069      	str	r1, [r5, #4]
 8000ef4:	60aa      	str	r2, [r5, #8]
 8000ef6:	60eb      	str	r3, [r5, #12]
 8000ef8:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000efa:	6128      	str	r0, [r5, #16]
 8000efc:	6169      	str	r1, [r5, #20]
 8000efe:	61aa      	str	r2, [r5, #24]
		  	  last_error = OK; //erasing the error, after it was caught
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <main+0x130>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e017      	b.n	8000f38 <main+0xe0>
		  }
		  else
			  sprintf(buffer,"\bMeasurement result is normal (sub-threshold level).\r");
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <main+0x144>)
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	469c      	mov	ip, r3
 8000f10:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f14:	4665      	mov	r5, ip
 8000f16:	4626      	mov	r6, r4
 8000f18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f1a:	6028      	str	r0, [r5, #0]
 8000f1c:	6069      	str	r1, [r5, #4]
 8000f1e:	60aa      	str	r2, [r5, #8]
 8000f20:	60eb      	str	r3, [r5, #12]
 8000f22:	3410      	adds	r4, #16
 8000f24:	f10c 0c10 	add.w	ip, ip, #16
 8000f28:	4574      	cmp	r4, lr
 8000f2a:	d1f3      	bne.n	8000f14 <main+0xbc>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	4622      	mov	r2, r4
 8000f30:	6810      	ldr	r0, [r2, #0]
 8000f32:	6018      	str	r0, [r3, #0]
 8000f34:	8892      	ldrh	r2, [r2, #4]
 8000f36:	809a      	strh	r2, [r3, #4]
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f953 	bl	80001e4 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	230a      	movs	r3, #10
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <main+0x148>)
 8000f48:	f004 f8e6 	bl	8005118 <HAL_UART_Transmit>
		  /*#ifdef DEBUG_MODE
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), 10);
		  sprintf(buffer,"Control group (bare 12b ADC readings, averaged): holder_debug[0] = %lu /// holder_debug[1] = %lu\r\n",holder_debug[0],holder_debug[1]);
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10);
		  #endif*/
		  free(buffer);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f004 fd1b 	bl	8005988 <free>
		  filter_done = 0;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <main+0x13c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
		  //For monitoring the state only.
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <main+0x128>)
 8000f5c:	f002 fabe 	bl	80034dc <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f000 fd9a 	bl	8001a9c <HAL_Delay>
 8000f68:	e7a5      	b.n	8000eb6 <main+0x5e>
	  }
	  else
	  {
		  signal_error(last_error);
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <main+0x130>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 faee 	bl	8001550 <signal_error>
		  while(1)
		  {
			  HAL_Delay(1000);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f000 fd90 	bl	8001a9c <HAL_Delay>
 8000f7c:	e7fa      	b.n	8000f74 <main+0x11c>
 8000f7e:	bf00      	nop
 8000f80:	48000400 	.word	0x48000400
 8000f84:	200002f0 	.word	0x200002f0
 8000f88:	2000020c 	.word	0x2000020c
 8000f8c:	200001fc 	.word	0x200001fc
 8000f90:	20000310 	.word	0x20000310
 8000f94:	20000202 	.word	0x20000202
 8000f98:	08006518 	.word	0x08006518
 8000f9c:	08006534 	.word	0x08006534
 8000fa0:	20000270 	.word	0x20000270

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	; 0xb0
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fae:	2244      	movs	r2, #68	; 0x44
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fcf0 	bl	8005998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2254      	movs	r2, #84	; 0x54
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fce2 	bl	8005998 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fd4:	f002 fec8 	bl	8003d68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <SystemClock_Config+0x128>)
 8000fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fde:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <SystemClock_Config+0x128>)
 8000fe0:	f023 0318 	bic.w	r3, r3, #24
 8000fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fe8:	2314      	movs	r3, #20
 8000fea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ffc:	2360      	movs	r3, #96	; 0x60
 8000ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001008:	2301      	movs	r3, #1
 800100a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800101a:	2307      	movs	r3, #7
 800101c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001030:	4618      	mov	r0, r3
 8001032:	f002 ff0d 	bl	8003e50 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800103c:	f000 fab2 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2303      	movs	r3, #3
 8001046:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fb18 	bl	8004690 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001066:	f000 fa9d 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800106a:	f244 0342 	movw	r3, #16450	; 0x4042
 800106e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800107c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800107e:	2301      	movs	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001086:	2310      	movs	r3, #16
 8001088:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800108a:	2307      	movs	r3, #7
 800108c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fcfa 	bl	8004a98 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80010aa:	f000 fa7b 	bl	80015a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b2:	f002 fe77 	bl	8003da4 <HAL_PWREx_ControlVoltageScaling>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80010bc:	f000 fa72 	bl	80015a4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010c0:	f003 fedc 	bl	8004e7c <HAL_RCCEx_EnableMSIPLLMode>
}
 80010c4:	bf00      	nop
 80010c6:	37b0      	adds	r7, #176	; 0xb0
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000

080010d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <MX_ADC1_Init+0xd8>)
 80010e8:	4a30      	ldr	r2, [pc, #192]	; (80011ac <MX_ADC1_Init+0xdc>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <MX_ADC1_Init+0xd8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_ADC1_Init+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <MX_ADC1_Init+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001100:	2201      	movs	r2, #1
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001106:	2204      	movs	r2, #4
 8001108:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_ADC1_Init+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001112:	2201      	movs	r2, #1
 8001114:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001118:	2202      	movs	r2, #2
 800111a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_ADC1_Init+0xd8>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ADC1_Init+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_ADC1_Init+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001146:	4818      	ldr	r0, [pc, #96]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001148:	f000 fe92 	bl	8001e70 <HAL_ADC_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001152:	f000 fa27 	bl	80015a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115a:	2306      	movs	r3, #6
 800115c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800115e:	2306      	movs	r3, #6
 8001160:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001162:	237f      	movs	r3, #127	; 0x7f
 8001164:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001166:	2304      	movs	r3, #4
 8001168:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001174:	f001 f85a 	bl	800222c <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800117e:	f000 fa11 	bl	80015a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001184:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001186:	230c      	movs	r3, #12
 8001188:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_ADC1_Init+0xd8>)
 8001190:	f001 f84c 	bl	800222c <HAL_ADC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800119a:	f000 fa03 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000310 	.word	0x20000310
 80011ac:	50040000 	.word	0x50040000
 80011b0:	2e300800 	.word	0x2e300800
 80011b4:	25b00200 	.word	0x25b00200

080011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_I2C1_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_I2C1_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_I2C1_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_I2C1_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_I2C1_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <MX_I2C1_Init+0x74>)
 80011f4:	f002 f9af 	bl	8003556 <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 f9d1 	bl	80015a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <MX_I2C1_Init+0x74>)
 8001206:	f002 fd17 	bl	8003c38 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 f9c8 	bl	80015a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_I2C1_Init+0x74>)
 8001218:	f002 fd59 	bl	8003cce <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f9bf 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000224 	.word	0x20000224
 8001230:	40005400 	.word	0x40005400
 8001234:	00707cbb 	.word	0x00707cbb

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <MX_USART2_UART_Init+0x5c>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800127c:	f003 fefe 	bl	800507c <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001286:	f000 f98d 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000270 	.word	0x20000270
 8001294:	40004400 	.word	0x40004400

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_DMA_Init+0x38>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <MX_DMA_Init+0x38>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6493      	str	r3, [r2, #72]	; 0x48
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_DMA_Init+0x38>)
 80012ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200b      	movs	r0, #11
 80012bc:	f001 fd5d 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c0:	200b      	movs	r0, #11
 80012c2:	f001 fd76 	bl	8002db2 <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_GPIO_Init+0xcc>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a2c      	ldr	r2, [pc, #176]	; (80013a0 <MX_GPIO_Init+0xcc>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_GPIO_Init+0xcc>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_GPIO_Init+0xcc>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_GPIO_Init+0xcc>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2108      	movs	r1, #8
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <MX_GPIO_Init+0xd0>)
 8001350:	f002 f8ac 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001354:	2308      	movs	r3, #8
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <MX_GPIO_Init+0xd0>)
 800136c:	f001 ff34 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001370:	2308      	movs	r3, #8
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_GPIO_Init+0xd4>)
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <MX_GPIO_Init+0xd8>)
 8001384:	f001 ff28 	bl	80031d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2009      	movs	r0, #9
 800138e:	f001 fcf4 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001392:	2009      	movs	r0, #9
 8001394:	f001 fd0d 	bl	8002db2 <HAL_NVIC_EnableIRQ>

}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	10110000 	.word	0x10110000
 80013ac:	48001c00 	.word	0x48001c00

080013b0 <HAL_ADC_ConvCpltCallback>:
  }

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
//		measured_values[i] = (adc_vals[i]*3300)/4095;
		if(!filter_done)
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x128>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 8087 	bne.w	80014d0 <HAL_ADC_ConvCpltCallback+0x120>
		{
			filter_buffer_sensor[filter_counter] = adc_vals[0];
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b45      	ldr	r3, [pc, #276]	; (80014e0 <HAL_ADC_ConvCpltCallback+0x130>)
 80013ca:	8819      	ldrh	r1, [r3, #0]
 80013cc:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <HAL_ADC_ConvCpltCallback+0x134>)
 80013ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			filter_buffer_battery[filter_counter] = adc_vals[1];
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_ADC_ConvCpltCallback+0x130>)
 80013da:	8859      	ldrh	r1, [r3, #2]
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <HAL_ADC_ConvCpltCallback+0x138>)
 80013de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if(filter_counter == FILTER_BUFFER_SIZE-1)
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d16a      	bne.n	80014c4 <HAL_ADC_ConvCpltCallback+0x114>
			{
				for(int i=0;i<FILTER_BUFFER_SIZE;++i)
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e014      	b.n	800141e <HAL_ADC_ConvCpltCallback+0x6e>
				{
					holder[0] += filter_buffer_sensor[i];
 80013f4:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	493a      	ldr	r1, [pc, #232]	; (80014e4 <HAL_ADC_ConvCpltCallback+0x134>)
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001400:	4413      	add	r3, r2
 8001402:	4a3a      	ldr	r2, [pc, #232]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 8001404:	6013      	str	r3, [r2, #0]
					holder[1] += filter_buffer_battery[i];
 8001406:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_ADC_ConvCpltCallback+0x138>)
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001412:	4413      	add	r3, r2
 8001414:	4a35      	ldr	r2, [pc, #212]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 8001416:	6053      	str	r3, [r2, #4]
				for(int i=0;i<FILTER_BUFFER_SIZE;++i)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3301      	adds	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001424:	dbe6      	blt.n	80013f4 <HAL_ADC_ConvCpltCallback+0x44>
				}
				for(int i=0;i<NUM_OF_MEASUREMENTS;++i)
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	e041      	b.n	80014b0 <HAL_ADC_ConvCpltCallback+0x100>
				{
					measured_values_double[i] = ((holder[i]/FILTER_BUFFER_SIZE)*3300)/MAX_ADC_VALUE;
 800142c:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x140>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	099b      	lsrs	r3, r3, #6
 800143c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001440:	fb02 f203 	mul.w	r2, r2, r3
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_ADC_ConvCpltCallback+0x144>)
 8001446:	fba3 1302 	umull	r1, r3, r3, r2
 800144a:	1ad2      	subs	r2, r2, r3
 800144c:	0852      	lsrs	r2, r2, #1
 800144e:	4413      	add	r3, r2
 8001450:	0adb      	lsrs	r3, r3, #11
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f866 	bl	8000524 <__aeabi_ui2d>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4926      	ldr	r1, [pc, #152]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x148>)
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	440a      	add	r2, r1
 8001464:	e9c2 3400 	strd	r3, r4, [r2]
					measured_values[i] = (uint16_t)measured_values_double[i];
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x148>)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001474:	4618      	mov	r0, r3
 8001476:	4621      	mov	r1, r4
 8001478:	f7ff f8ce 	bl	8000618 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	b299      	uxth	r1, r3
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_ADC_ConvCpltCallback+0x14c>)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					#ifdef DEBUG_MODE
					holder_debug[i] = holder[i]/FILTER_BUFFER_SIZE;
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x140>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	099a      	lsrs	r2, r3, #6
 8001498:	4919      	ldr	r1, [pc, #100]	; (8001500 <HAL_ADC_ConvCpltCallback+0x150>)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					#endif
					holder[i] = 0;
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <HAL_ADC_ConvCpltCallback+0x13c>)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2100      	movs	r1, #0
 80014a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<NUM_OF_MEASUREMENTS;++i)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	ddba      	ble.n	800142c <HAL_ADC_ConvCpltCallback+0x7c>
				}
				filter_done = 1;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x128>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
				filter_counter = 0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	801a      	strh	r2, [r3, #0]
		}
		else
		{
			//do nothing
		}
}
 80014c2:	e005      	b.n	80014d0 <HAL_ADC_ConvCpltCallback+0x120>
				filter_counter++;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_ADC_ConvCpltCallback+0x12c>)
 80014ce:	801a      	strh	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	20000202 	.word	0x20000202
 80014dc:	20000200 	.word	0x20000200
 80014e0:	200001fc 	.word	0x200001fc
 80014e4:	20000b44 	.word	0x20000b44
 80014e8:	20000374 	.word	0x20000374
 80014ec:	20000204 	.word	0x20000204
 80014f0:	10624dd3 	.word	0x10624dd3
 80014f4:	00100101 	.word	0x00100101
 80014f8:	20001360 	.word	0x20001360
 80014fc:	20001370 	.word	0x20001370
 8001500:	20000210 	.word	0x20000210

08001504 <signal_with_diodes_ms>:

void signal_with_diodes_ms(int num_of_loops, uint32_t ms)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	for(int i=0;i<num_of_loops;++i)
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e012      	b.n	800153a <signal_with_diodes_ms+0x36>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2108      	movs	r1, #8
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <signal_with_diodes_ms+0x48>)
 800151a:	f001 ffc7 	bl	80034ac <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f000 fabc 	bl	8001a9c <HAL_Delay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2108      	movs	r1, #8
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <signal_with_diodes_ms+0x48>)
 800152a:	f001 ffbf 	bl	80034ac <HAL_GPIO_WritePin>
		HAL_Delay(ms);
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f000 fab4 	bl	8001a9c <HAL_Delay>
	for(int i=0;i<num_of_loops;++i)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbe8      	blt.n	8001514 <signal_with_diodes_ms+0x10>
	}
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	48000400 	.word	0x48000400

08001550 <signal_error>:

void signal_error(ERRORS err)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	signal_with_diodes_ms(err, 1000);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffcf 	bl	8001504 <signal_with_diodes_ms>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <check_if_threshold_level_exceeded>:

ERRORS check_if_threshold_level_exceeded()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	long int threshold_from_eeprom = strtol(si.threshold,NULL,16);
 8001576:	2210      	movs	r2, #16
 8001578:	2100      	movs	r1, #0
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <check_if_threshold_level_exceeded+0x2c>)
 800157c:	f004 fb68 	bl	8005c50 <strtol>
 8001580:	6078      	str	r0, [r7, #4]
	if(measured_values[0] > threshold_from_eeprom) return OK;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <check_if_threshold_level_exceeded+0x30>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4293      	cmp	r3, r2
 800158c:	da01      	bge.n	8001592 <check_if_threshold_level_exceeded+0x22>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <check_if_threshold_level_exceeded+0x24>
	else return THRESHOLD_LEVEL_EXCEEDED;
 8001592:	2306      	movs	r3, #6
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000300 	.word	0x20000300
 80015a0:	20001370 	.word	0x20001370

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	signal_with_diodes_ms(10,200);
 80015a8:	21c8      	movs	r1, #200	; 0xc8
 80015aa:	200a      	movs	r0, #10
 80015ac:	f7ff ffaa 	bl	8001504 <signal_with_diodes_ms>
  /* USER CODE END Error_Handler_Debug */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x44>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6613      	str	r3, [r2, #96]	; 0x60
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x44>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x44>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x44>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2b      	ldr	r2, [pc, #172]	; (80016c8 <HAL_ADC_MspInit+0xcc>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d14f      	bne.n	80016be <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_ADC_MspInit+0xd0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_ADC_MspInit+0xd0>)
 8001624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_ADC_MspInit+0xd0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_ADC_MspInit+0xd0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a24      	ldr	r2, [pc, #144]	; (80016cc <HAL_ADC_MspInit+0xd0>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_ADC_MspInit+0xd0>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800164e:	2350      	movs	r3, #80	; 0x50
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001652:	230b      	movs	r3, #11
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f001 fdb8 	bl	80031d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 800166a:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_ADC_MspInit+0xd8>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 8001688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 8001690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001694:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 8001698:	2220      	movs	r2, #32
 800169a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 80016a4:	f001 fba0 	bl	8002de8 <HAL_DMA_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80016ae:	f7ff ff79 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 80016b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_ADC_MspInit+0xd4>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	50040000 	.word	0x50040000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20001314 	.word	0x20001314
 80016d4:	40020008 	.word	0x40020008

080016d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_I2C_MspInit+0x80>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d129      	bne.n	800174e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_I2C_MspInit+0x84>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_I2C_MspInit+0x84>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_I2C_MspInit+0x84>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001712:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001718:	2312      	movs	r3, #18
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	2301      	movs	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001724:	2304      	movs	r3, #4
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f001 fd51 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_I2C_MspInit+0x84>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_I2C_MspInit+0x84>)
 800173c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_I2C_MspInit+0x84>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40005400 	.word	0x40005400
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <HAL_UART_MspInit+0xa0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d13a      	bne.n	80017f8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_UART_MspInit+0xa4>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <HAL_UART_MspInit+0xa4>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_UART_MspInit+0xa4>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_UART_MspInit+0xa4>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_UART_MspInit+0xa4>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0xa4>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017b2:	2304      	movs	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f001 fd02 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80017e6:	2303      	movs	r3, #3
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f001 fcf0 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f8fe 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001868:	2008      	movs	r0, #8
 800186a:	f001 fe51 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA1_Channel1_IRQHandler+0x10>)
 800187a:	f001 fbcd 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20001314 	.word	0x20001314

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f004 f834 	bl	8005924 <__errno>
 80018bc:	4602      	mov	r2, r0
 80018be:	230c      	movs	r3, #12
 80018c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20010000 	.word	0x20010000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000218 	.word	0x20000218
 80018f0:	20001380 	.word	0x20001380

080018f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <SystemInit+0x64>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <SystemInit+0x64>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <SystemInit+0x68>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <SystemInit+0x68>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <SystemInit+0x68>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <SystemInit+0x68>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <SystemInit+0x68>)
 8001920:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001924:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001928:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <SystemInit+0x68>)
 800192c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001930:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <SystemInit+0x68>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <SystemInit+0x68>)
 8001938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <SystemInit+0x68>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SystemInit+0x64>)
 8001946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800194a:	609a      	str	r2, [r3, #8]
#endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00
 800195c:	40021000 	.word	0x40021000

08001960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001964:	f7ff ffc6 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001968:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800196a:	e003      	b.n	8001974 <LoopCopyDataInit>

0800196c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800196e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001970:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001972:	3104      	adds	r1, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001974:	480a      	ldr	r0, [pc, #40]	; (80019a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001978:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800197a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800197c:	d3f6      	bcc.n	800196c <CopyDataInit>
	ldr	r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001980:	e002      	b.n	8001988 <LoopFillZerobss>

08001982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001982:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001984:	f842 3b04 	str.w	r3, [r2], #4

08001988 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <LoopForever+0x16>)
	cmp	r2, r3
 800198a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800198c:	d3f9      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f003 ffcf 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001992:	f7ff fa61 	bl	8000e58 <main>

08001996 <LoopForever>:

LoopForever:
    b LoopForever
 8001996:	e7fe      	b.n	8001996 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001998:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800199c:	08006704 	.word	0x08006704
	ldr	r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019a4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80019a8:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80019ac:	2000137c 	.word	0x2000137c

080019b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_IRQHandler>

080019b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f001 f9d1 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f80e 	bl	80019e4 <HAL_InitTick>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	e001      	b.n	80019d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d4:	f7ff fdee 	bl	80015b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_InitTick+0x6c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_InitTick+0x70>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_InitTick+0x6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 f9dd 	bl	8002dce <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d809      	bhi.n	8001a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f001 f9a7 	bl	8002d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_InitTick+0x74>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e004      	b.n	8001a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e001      	b.n	8001a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20001374 	.word	0x20001374

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20001374 	.word	0x20001374

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_Delay+0x40>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000008 	.word	0x20000008

08001ae0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3360      	adds	r3, #96	; 0x60
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <LL_ADC_SetOffset+0x44>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b80:	bf00      	nop
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	03fff000 	.word	0x03fff000

08001b90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3360      	adds	r3, #96	; 0x60
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3360      	adds	r3, #96	; 0x60
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3330      	adds	r3, #48	; 0x30
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	4413      	add	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	211f      	movs	r1, #31
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 011f 	and.w	r1, r3, #31
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3314      	adds	r3, #20
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	0d1b      	lsrs	r3, r3, #20
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2107      	movs	r1, #7
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0d1b      	lsrs	r3, r3, #20
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0318 	and.w	r3, r3, #24
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	0007ffff 	.word	0x0007ffff

08001d10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6093      	str	r3, [r2, #8]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d48:	d101      	bne.n	8001d4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <LL_ADC_IsEnabled+0x18>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <LL_ADC_IsEnabled+0x1a>
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d101      	bne.n	8001e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e12a      	b.n	80020e0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fbaf 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff3f 	bl	8001d34 <LL_ADC_IsDeepPowerDownEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff25 	bl	8001d10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff5a 	bl	8001d84 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d113      	bne.n	8001efe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff3e 	bl	8001d5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ee0:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_ADC_Init+0x278>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	4a81      	ldr	r2, [pc, #516]	; (80020ec <HAL_ADC_Init+0x27c>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff3e 	bl	8001d84 <LL_ADC_IsInternalRegulatorEnabled>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0210 	orr.w	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff77 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8001f34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 80c5 	bne.w	80020ce <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80c1 	bne.w	80020ce <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff37 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f6c:	4860      	ldr	r0, [pc, #384]	; (80020f0 <HAL_ADC_Init+0x280>)
 8001f6e:	f7ff ff31 	bl	8001dd4 <LL_ADC_IsEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	485d      	ldr	r0, [pc, #372]	; (80020f4 <HAL_ADC_Init+0x284>)
 8001f80:	f7ff fdae 	bl	8001ae0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e5b      	ldrb	r3, [r3, #25]
 8001f88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	045b      	lsls	r3, r3, #17
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b45      	ldr	r3, [pc, #276]	; (80020f8 <HAL_ADC_Init+0x288>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff14 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8001ffa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff21 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 8002006:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d13d      	bne.n	800208a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d13a      	bne.n	800208a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002018:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002020:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002030:	f023 0302 	bic.w	r3, r3, #2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	69b9      	ldr	r1, [r7, #24]
 800203a:	430b      	orrs	r3, r1
 800203c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002044:	2b01      	cmp	r3, #1
 8002046:	d118      	bne.n	800207a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002052:	f023 0304 	bic.w	r3, r3, #4
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002064:	4311      	orrs	r1, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800206a:	430a      	orrs	r2, r1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	e007      	b.n	800208a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10c      	bne.n	80020ac <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f023 010f 	bic.w	r1, r3, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
 80020aa:	e007      	b.n	80020bc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 020f 	bic.w	r2, r2, #15
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f023 0303 	bic.w	r3, r3, #3
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
 80020cc:	e007      	b.n	80020de <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020de:	7ffb      	ldrb	r3, [r7, #31]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000000 	.word	0x20000000
 80020ec:	053e2d63 	.word	0x053e2d63
 80020f0:	50040000 	.word	0x50040000
 80020f4:	50040300 	.word	0x50040300
 80020f8:	fff0c007 	.word	0xfff0c007

080020fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fe88 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d167      	bne.n	80021e8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Start_DMA+0x2a>
 8002122:	2302      	movs	r3, #2
 8002124:	e063      	b.n	80021ee <HAL_ADC_Start_DMA+0xf2>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fc5a 	bl	80029e8 <ADC_Enable>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d14f      	bne.n	80021de <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f023 0206 	bic.w	r2, r3, #6
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	659a      	str	r2, [r3, #88]	; 0x58
 800216a:	e002      	b.n	8002172 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_ADC_Start_DMA+0xfc>)
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_ADC_Start_DMA+0x100>)
 8002180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_ADC_Start_DMA+0x104>)
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	221c      	movs	r2, #28
 8002190:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0210 	orr.w	r2, r2, #16
 80021a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3340      	adds	r3, #64	; 0x40
 80021c4:	4619      	mov	r1, r3
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f000 fec5 	bl	8002f58 <HAL_DMA_Start_IT>
 80021ce:	4603      	mov	r3, r0
 80021d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe0f 	bl	8001dfa <LL_ADC_REG_StartConversion>
 80021dc:	e006      	b.n	80021ec <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021e6:	e001      	b.n	80021ec <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
 80021ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	08002a9d 	.word	0x08002a9d
 80021fc:	08002b75 	.word	0x08002b75
 8002200:	08002b91 	.word	0x08002b91

08002204 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b0b6      	sub	sp, #216	; 0xd8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x22>
 800224a:	2302      	movs	r3, #2
 800224c:	e3b8      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x794>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fde1 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 839d 	bne.w	80029a2 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d824      	bhi.n	80022ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	3b02      	subs	r3, #2
 8002276:	2b03      	cmp	r3, #3
 8002278:	d81b      	bhi.n	80022b2 <HAL_ADC_ConfigChannel+0x86>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <HAL_ADC_ConfigChannel+0x54>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	08002291 	.word	0x08002291
 8002284:	08002299 	.word	0x08002299
 8002288:	080022a1 	.word	0x080022a1
 800228c:	080022a9 	.word	0x080022a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	220c      	movs	r2, #12
 8002294:	605a      	str	r2, [r3, #4]
          break;
 8002296:	e011      	b.n	80022bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2212      	movs	r2, #18
 800229c:	605a      	str	r2, [r3, #4]
          break;
 800229e:	e00d      	b.n	80022bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2218      	movs	r2, #24
 80022a4:	605a      	str	r2, [r3, #4]
          break;
 80022a6:	e009      	b.n	80022bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ae:	605a      	str	r2, [r3, #4]
          break;
 80022b0:	e004      	b.n	80022bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2206      	movs	r2, #6
 80022b6:	605a      	str	r2, [r3, #4]
          break;
 80022b8:	e000      	b.n	80022bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff fca5 	bl	8001c18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fda5 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 80022d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fdb1 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 80022e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 81a6 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 81a1 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	461a      	mov	r2, r3
 800230c:	f7ff fcb0 	bl	8001c70 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	08db      	lsrs	r3, r3, #3
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d00a      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002342:	f7ff fc01 	bl	8001b48 <LL_ADC_SetOffset>
 8002346:	e17b      	b.n	8002640 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc1e 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x148>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fc13 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	e01e      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x186>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fc08 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800239a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80023a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x19e>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	e018      	b.n	80023fc <HAL_ADC_ConfigChannel+0x1d0>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80023ee:	2320      	movs	r3, #32
 80023f0:	e004      	b.n	80023fc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80023f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d106      	bne.n	800240e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fbd7 	bl	8001bbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2101      	movs	r1, #1
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbbb 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <HAL_ADC_ConfigChannel+0x20e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fbb0 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	e01e      	b.n	8002478 <HAL_ADC_ConfigChannel+0x24c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fba5 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800245c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e004      	b.n	8002476 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800246c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x264>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	e018      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x296>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e004      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80024b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d106      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2200      	movs	r2, #0
 80024cc:	2101      	movs	r1, #1
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fb74 	bl	8001bbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fb58 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x2d4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2102      	movs	r1, #2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fb4d 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	f003 021f 	and.w	r2, r3, #31
 80024fe:	e01e      	b.n	800253e <HAL_ADC_ConfigChannel+0x312>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2102      	movs	r1, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fb42 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800251e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e004      	b.n	800253c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x32a>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	e016      	b.n	8002584 <HAL_ADC_ConfigChannel+0x358>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800256e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800257a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fb13 	bl	8001bbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2103      	movs	r1, #3
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff faf7 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x396>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2103      	movs	r1, #3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff faec 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	e017      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x3c6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2103      	movs	r1, #3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fae1 	bl	8001b90 <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e003      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80025e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_ADC_ConfigChannel+0x3de>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	e011      	b.n	800262e <HAL_ADC_ConfigChannel+0x402>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800261a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e003      	b.n	800262e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800262e:	429a      	cmp	r2, r3
 8002630:	d106      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	2103      	movs	r1, #3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fabe 	bl	8001bbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fbc5 	bl	8001dd4 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 813f 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	f7ff fb32 	bl	8001cc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a8e      	ldr	r2, [pc, #568]	; (80028a4 <HAL_ADC_ConfigChannel+0x678>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f040 8130 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x46c>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b09      	cmp	r3, #9
 800268e:	bf94      	ite	ls
 8002690:	2301      	movls	r3, #1
 8002692:	2300      	movhi	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e019      	b.n	80026cc <HAL_ADC_ConfigChannel+0x4a0>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80026b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	bf94      	ite	ls
 80026c6:	2301      	movls	r3, #1
 80026c8:	2300      	movhi	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d079      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x4c0>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	069b      	lsls	r3, r3, #26
 80026e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ea:	e015      	b.n	8002718 <HAL_ADC_ConfigChannel+0x4ec>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e003      	b.n	8002710 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	069b      	lsls	r3, r3, #26
 8002714:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x50c>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	3301      	adds	r3, #1
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	e017      	b.n	8002768 <HAL_ADC_ConfigChannel+0x53c>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	ea42 0103 	orr.w	r1, r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_ADC_ConfigChannel+0x562>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	3301      	adds	r3, #1
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	051b      	lsls	r3, r3, #20
 800278c:	e018      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x594>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80027aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c0:	430b      	orrs	r3, r1
 80027c2:	e080      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x5b4>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	3301      	adds	r3, #1
 80027d8:	069b      	lsls	r3, r3, #26
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027de:	e015      	b.n	800280c <HAL_ADC_ConfigChannel+0x5e0>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_ADC_ConfigChannel+0x600>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	3301      	adds	r3, #1
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	e017      	b.n	800285c <HAL_ADC_ConfigChannel+0x630>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	61fb      	str	r3, [r7, #28]
  return result;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	ea42 0103 	orr.w	r1, r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x65c>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	3b1e      	subs	r3, #30
 8002880:	051b      	lsls	r3, r3, #20
 8002882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002886:	e01d      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x698>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	613b      	str	r3, [r7, #16]
  return result;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e005      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x684>
 80028a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	3b1e      	subs	r3, #30
 80028be:	051b      	lsls	r3, r3, #20
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c4:	430b      	orrs	r3, r1
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6892      	ldr	r2, [r2, #8]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7ff f9d0 	bl	8001c70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <HAL_ADC_ConfigChannel+0x79c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d06b      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028dc:	483b      	ldr	r0, [pc, #236]	; (80029cc <HAL_ADC_ConfigChannel+0x7a0>)
 80028de:	f7ff f925 	bl	8001b2c <LL_ADC_GetCommonPathInternalCh>
 80028e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <HAL_ADC_ConfigChannel+0x7a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d126      	bne.n	800293e <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d120      	bne.n	800293e <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d156      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800290a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800290e:	4619      	mov	r1, r3
 8002910:	482e      	ldr	r0, [pc, #184]	; (80029cc <HAL_ADC_ConfigChannel+0x7a0>)
 8002912:	f7ff f8f8 	bl	8001b06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	4a2f      	ldr	r2, [pc, #188]	; (80029dc <HAL_ADC_ConfigChannel+0x7b0>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	099a      	lsrs	r2, r3, #6
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800292e:	e002      	b.n	8002936 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3b01      	subs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f9      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800293c:	e03a      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d113      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x744>
 8002948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_ADC_ConfigChannel+0x7a8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	4619      	mov	r1, r3
 8002968:	4818      	ldr	r0, [pc, #96]	; (80029cc <HAL_ADC_ConfigChannel+0x7a0>)
 800296a:	f7ff f8cc 	bl	8001b06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800296e:	e021      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11c      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800297a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_ADC_ConfigChannel+0x7a8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002998:	4619      	mov	r1, r3
 800299a:	480c      	ldr	r0, [pc, #48]	; (80029cc <HAL_ADC_ConfigChannel+0x7a0>)
 800299c:	f7ff f8b3 	bl	8001b06 <LL_ADC_SetCommonPathInternalCh>
 80029a0:	e008      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	37d8      	adds	r7, #216	; 0xd8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	80080000 	.word	0x80080000
 80029cc:	50040300 	.word	0x50040300
 80029d0:	c7520000 	.word	0xc7520000
 80029d4:	50040000 	.word	0x50040000
 80029d8:	20000000 	.word	0x20000000
 80029dc:	053e2d63 	.word	0x053e2d63
 80029e0:	cb840000 	.word	0xcb840000
 80029e4:	80000001 	.word	0x80000001

080029e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff f9ed 	bl	8001dd4 <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d146      	bne.n	8002a8e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <ADC_Enable+0xb0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e032      	b.n	8002a90 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f9bc 	bl	8001dac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a34:	f7ff f826 	bl	8001a84 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a3a:	e021      	b.n	8002a80 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f9c7 	bl	8001dd4 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff f9ab 	bl	8001dac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a56:	f7ff f815 	bl	8001a84 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d90d      	bls.n	8002a80 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0210 	orr.w	r2, r3, #16
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d1d6      	bne.n	8002a3c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	8000003f 	.word	0x8000003f

08002a9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d14b      	bne.n	8002b4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d021      	beq.n	8002b14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff f88c 	bl	8001bf2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d032      	beq.n	8002b46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d12b      	bne.n	8002b46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11f      	bne.n	8002b46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
 8002b12:	e018      	b.n	8002b46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d111      	bne.n	8002b46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7fe fc32 	bl	80013b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b4c:	e00e      	b.n	8002b6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff fb5c 	bl	8002218 <HAL_ADC_ErrorCallback>
}
 8002b60:	e004      	b.n	8002b6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff fb3e 	bl	8002204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7ff fb2e 	bl	8002218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	; (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff8e 	bl	8002c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff29 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff3e 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff8e 	bl	8002cb8 <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff5d 	bl	8002c64 <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff31 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffa2 	bl	8002d20 <SysTick_Config>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e098      	b.n	8002f2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_DMA_Init+0x150>)
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d80f      	bhi.n	8002e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_DMA_Init+0x154>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_DMA_Init+0x158>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a48      	ldr	r2, [pc, #288]	; (8002f44 <HAL_DMA_Init+0x15c>)
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
 8002e24:	e00e      	b.n	8002e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_DMA_Init+0x160>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a43      	ldr	r2, [pc, #268]	; (8002f40 <HAL_DMA_Init+0x158>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	009a      	lsls	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a42      	ldr	r2, [pc, #264]	; (8002f4c <HAL_DMA_Init+0x164>)
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e9e:	d039      	beq.n	8002f14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_DMA_Init+0x15c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_DMA_Init+0x168>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f003 031c 	and.w	r3, r3, #28
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4924      	ldr	r1, [pc, #144]	; (8002f50 <HAL_DMA_Init+0x168>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_DMA_Init+0x168>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f003 031c 	and.w	r3, r3, #28
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	491d      	ldr	r1, [pc, #116]	; (8002f50 <HAL_DMA_Init+0x168>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
 8002ede:	e019      	b.n	8002f14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <HAL_DMA_Init+0x16c>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 031c 	and.w	r3, r3, #28
 8002eec:	210f      	movs	r1, #15
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	4917      	ldr	r1, [pc, #92]	; (8002f54 <HAL_DMA_Init+0x16c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <HAL_DMA_Init+0x16c>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f003 031c 	and.w	r3, r3, #28
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	4911      	ldr	r1, [pc, #68]	; (8002f54 <HAL_DMA_Init+0x16c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40020407 	.word	0x40020407
 8002f3c:	bffdfff8 	.word	0xbffdfff8
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	40020000 	.word	0x40020000
 8002f48:	bffdfbf8 	.word	0xbffdfbf8
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	400200a8 	.word	0x400200a8
 8002f54:	400204a8 	.word	0x400204a8

08002f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_DMA_Start_IT+0x20>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e04b      	b.n	8003010 <HAL_DMA_Start_IT+0xb8>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d13a      	bne.n	8003002 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f8e0 	bl	8003176 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 020e 	orr.w	r2, r2, #14
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e00f      	b.n	8002ff0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 020a 	orr.w	r2, r2, #10
 8002fee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e005      	b.n	800300e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800300e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f003 031c 	and.w	r3, r3, #28
 8003038:	2204      	movs	r2, #4
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d026      	beq.n	8003092 <HAL_DMA_IRQHandler+0x7a>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d021      	beq.n	8003092 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f003 021c 	and.w	r2, r3, #28
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2104      	movs	r1, #4
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b00      	cmp	r3, #0
 8003086:	d071      	beq.n	800316c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003090:	e06c      	b.n	800316c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f003 031c 	and.w	r3, r3, #28
 800309a:	2202      	movs	r2, #2
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02e      	beq.n	8003104 <HAL_DMA_IRQHandler+0xec>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d029      	beq.n	8003104 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 020a 	bic.w	r2, r2, #10
 80030cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f003 021c 	and.w	r2, r3, #28
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2102      	movs	r1, #2
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d038      	beq.n	800316c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003102:	e033      	b.n	800316c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f003 031c 	and.w	r3, r3, #28
 800310c:	2208      	movs	r2, #8
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02a      	beq.n	800316e <HAL_DMA_IRQHandler+0x156>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d025      	beq.n	800316e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 020e 	bic.w	r2, r2, #14
 8003130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f003 021c 	and.w	r2, r3, #28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2101      	movs	r1, #1
 8003140:	fa01 f202 	lsl.w	r2, r1, r2
 8003144:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800316c:	bf00      	nop
 800316e:	bf00      	nop
}
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f003 021c 	and.w	r2, r3, #28
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d108      	bne.n	80031ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b8:	e007      	b.n	80031ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e6:	e148      	b.n	800347a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 813a 	beq.w	8003474 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d00b      	beq.n	8003220 <HAL_GPIO_Init+0x48>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d007      	beq.n	8003220 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003214:	2b11      	cmp	r3, #17
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b12      	cmp	r3, #18
 800321e:	d130      	bne.n	8003282 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003256:	2201      	movs	r2, #1
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 0201 	and.w	r2, r3, #1
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0xea>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b12      	cmp	r3, #18
 80032c0:	d123      	bne.n	800330a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	220f      	movs	r2, #15
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	6939      	ldr	r1, [r7, #16]
 8003306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8094 	beq.w	8003474 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334c:	4b52      	ldr	r3, [pc, #328]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6613      	str	r3, [r2, #96]	; 0x60
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003364:	4a4d      	ldr	r2, [pc, #308]	; (800349c <HAL_GPIO_Init+0x2c4>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3302      	adds	r3, #2
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	220f      	movs	r2, #15
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800338e:	d00d      	beq.n	80033ac <HAL_GPIO_Init+0x1d4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a43      	ldr	r2, [pc, #268]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <HAL_GPIO_Init+0x1d0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a42      	ldr	r2, [pc, #264]	; (80034a4 <HAL_GPIO_Init+0x2cc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_GPIO_Init+0x1cc>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_Init+0x1d6>
 80033a4:	2307      	movs	r3, #7
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_Init+0x1d6>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_Init+0x1d6>
 80033ac:	2300      	movs	r3, #0
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033be:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_GPIO_Init+0x2c4>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f0:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341a:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003420:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800346e:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f aeaf 	bne.w	80031e8 <HAL_GPIO_Init+0x10>
  }
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	48000400 	.word	0x48000400
 80034a4:	48000800 	.word	0x48000800
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c8:	e002      	b.n	80034d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	041a      	lsls	r2, r3, #16
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43d9      	mvns	r1, r3
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	400b      	ands	r3, r1
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	619a      	str	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f806 	bl	8003540 <HAL_GPIO_EXTI_Callback>
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40010400 	.word	0x40010400

08003540 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e081      	b.n	800366c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fe f8ab 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	e006      	b.n	80035de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d104      	bne.n	80035f0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003602:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003612:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69d9      	ldr	r1, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	460b      	mov	r3, r1
 8003688:	813b      	strh	r3, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 80fd 	bne.w	8003896 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x34>
 80036a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0f1      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_Mem_Read+0x4e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0ea      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ca:	f7fe f9db 	bl	8001a84 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f95b 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0d5      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2222      	movs	r2, #34	; 0x22
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003714:	88f8      	ldrh	r0, [r7, #6]
 8003716:	893a      	ldrh	r2, [r7, #8]
 8003718:	8979      	ldrh	r1, [r7, #10]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4603      	mov	r3, r0
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f8bf 	bl	80038a8 <I2C_RequestMemoryRead>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0ad      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2bff      	cmp	r3, #255	; 0xff
 8003744:	d90e      	bls.n	8003764 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	22ff      	movs	r2, #255	; 0xff
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	b2da      	uxtb	r2, r3
 8003752:	8979      	ldrh	r1, [r7, #10]
 8003754:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_I2C_Mem_Read+0x22c>)
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fa3d 	bl	8003bdc <I2C_TransferConfig>
 8003762:	e00f      	b.n	8003784 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	b2da      	uxtb	r2, r3
 8003774:	8979      	ldrh	r1, [r7, #10]
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_I2C_Mem_Read+0x22c>)
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa2c 	bl	8003bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	2200      	movs	r2, #0
 800378c:	2104      	movs	r1, #4
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f902 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07c      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d034      	beq.n	8003844 <HAL_I2C_Mem_Read+0x1d0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d130      	bne.n	8003844 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f8d3 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04d      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2bff      	cmp	r3, #255	; 0xff
 8003804:	d90e      	bls.n	8003824 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	22ff      	movs	r2, #255	; 0xff
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	8979      	ldrh	r1, [r7, #10]
 8003814:	2300      	movs	r3, #0
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f9dd 	bl	8003bdc <I2C_TransferConfig>
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	b2da      	uxtb	r2, r3
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	2300      	movs	r3, #0
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f9cc 	bl	8003bdc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d19a      	bne.n	8003784 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f920 	bl	8003a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01a      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2220      	movs	r2, #32
 8003868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_I2C_Mem_Read+0x230>)
 8003876:	400b      	ands	r3, r1
 8003878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	80002400 	.word	0x80002400
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	460b      	mov	r3, r1
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	8979      	ldrh	r1, [r7, #10]
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <I2C_RequestMemoryRead+0xa4>)
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f984 	bl	8003bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f89d 	bl	8003a18 <I2C_WaitOnTXISFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e02c      	b.n	8003942 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ee:	893b      	ldrh	r3, [r7, #8]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
 80038f8:	e015      	b.n	8003926 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038fa:	893b      	ldrh	r3, [r7, #8]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	b29b      	uxth	r3, r3
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f883 	bl	8003a18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e012      	b.n	8003942 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2200      	movs	r2, #0
 800392e:	2140      	movs	r1, #64	; 0x40
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f831 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	80002000 	.word	0x80002000

08003950 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d103      	bne.n	800396e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d007      	beq.n	800398c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	619a      	str	r2, [r3, #24]
  }
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a8:	e022      	b.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d01e      	beq.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fe f867 	bl	8001a84 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d113      	bne.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e00f      	b.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d0cd      	beq.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a24:	e02c      	b.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f870 	bl	8003b10 <I2C_IsAcknowledgeFailed>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e02a      	b.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d01e      	beq.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fe f81f 	bl	8001a84 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d113      	bne.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d1cb      	bne.n	8003a26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa4:	e028      	b.n	8003af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f830 	bl	8003b10 <I2C_IsAcknowledgeFailed>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e026      	b.n	8003b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd ffe3 	bl	8001a84 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d113      	bne.n	8003af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e007      	b.n	8003b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d1cf      	bne.n	8003aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d151      	bne.n	8003bce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b2a:	e022      	b.n	8003b72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d01e      	beq.n	8003b72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b34:	f7fd ffa6 	bl	8001a84 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d302      	bcc.n	8003b4a <I2C_IsAcknowledgeFailed+0x3a>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e02e      	b.n	8003bd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d1d5      	bne.n	8003b2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2210      	movs	r2, #16
 8003b86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fedd 	bl	8003950 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	fe00e800 	.word	0xfe00e800

08003bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	4613      	mov	r3, r2
 8003bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	0d5b      	lsrs	r3, r3, #21
 8003bf8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <I2C_TransferConfig+0x58>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	43db      	mvns	r3, r3
 8003c02:	ea02 0103 	and.w	r1, r2, r3
 8003c06:	897b      	ldrh	r3, [r7, #10]
 8003c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c0c:	7a7b      	ldrb	r3, [r7, #9]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	03ff63ff 	.word	0x03ff63ff

08003c38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d138      	bne.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e032      	b.n	8003cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d139      	bne.n	8003d58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e033      	b.n	8003d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40007000 	.word	0x40007000

08003d88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40007000 	.word	0x40007000

08003da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db2:	d130      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d038      	beq.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2232      	movs	r2, #50	; 0x32
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de8:	e002      	b.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df0:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfc:	d102      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f2      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d110      	bne.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e00f      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d007      	beq.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e24:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e2c:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40007000 	.word	0x40007000
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	431bde83 	.word	0x431bde83

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f000 bc11 	b.w	8004686 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e64:	4ba0      	ldr	r3, [pc, #640]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e6e:	4b9e      	ldr	r3, [pc, #632]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80e4 	beq.w	800404e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <HAL_RCC_OscConfig+0x4c>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	f040 808b 	bne.w	8003faa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	f040 8087 	bne.w	8003faa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e9c:	4b92      	ldr	r3, [pc, #584]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x64>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e3e8      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <HAL_RCC_OscConfig+0x7e>
 8003ec4:	4b88      	ldr	r3, [pc, #544]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_OscConfig+0x8a>
 8003ece:	4b86      	ldr	r3, [pc, #536]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d223      	bcs.n	8003f26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fd78 	bl	80049d8 <RCC_SetFlashLatencyFromMSIRange>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e3c9      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef2:	4b7d      	ldr	r3, [pc, #500]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7c      	ldr	r2, [pc, #496]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003ef8:	f043 0308 	orr.w	r3, r3, #8
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b7a      	ldr	r3, [pc, #488]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4977      	ldr	r1, [pc, #476]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f10:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	4972      	ldr	r1, [pc, #456]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	e025      	b.n	8003f72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6f      	ldr	r2, [pc, #444]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	f043 0308 	orr.w	r3, r3, #8
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b6d      	ldr	r3, [pc, #436]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	496a      	ldr	r1, [pc, #424]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f44:	4b68      	ldr	r3, [pc, #416]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	4965      	ldr	r1, [pc, #404]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fd38 	bl	80049d8 <RCC_SetFlashLatencyFromMSIRange>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e389      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f72:	f000 fc6f 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8003f76:	4601      	mov	r1, r0
 8003f78:	4b5b      	ldr	r3, [pc, #364]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_RCC_OscConfig+0x29c>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f8e:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_RCC_OscConfig+0x2a0>)
 8003f90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f92:	4b58      	ldr	r3, [pc, #352]	; (80040f4 <HAL_RCC_OscConfig+0x2a4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fd24 	bl	80019e4 <HAL_InitTick>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d052      	beq.n	800404c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	e36d      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d032      	beq.n	8004018 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fd61 	bl	8001a84 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fc6:	f7fd fd5d 	bl	8001a84 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e356      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fd8:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3f      	ldr	r2, [pc, #252]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003fea:	f043 0308 	orr.w	r3, r3, #8
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b3d      	ldr	r3, [pc, #244]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	493a      	ldr	r1, [pc, #232]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004002:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	4935      	ldr	r1, [pc, #212]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
 8004016:	e01a      	b.n	800404e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004018:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a32      	ldr	r2, [pc, #200]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004024:	f7fd fd2e 	bl	8001a84 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800402c:	f7fd fd2a 	bl	8001a84 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e323      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800403e:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x1dc>
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800404c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d073      	beq.n	8004142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d005      	beq.n	800406c <HAL_RCC_OscConfig+0x21c>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d10e      	bne.n	8004084 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d10b      	bne.n	8004084 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d063      	beq.n	8004140 <HAL_RCC_OscConfig+0x2f0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d15f      	bne.n	8004140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e300      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408c:	d106      	bne.n	800409c <HAL_RCC_OscConfig+0x24c>
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e01d      	b.n	80040d8 <HAL_RCC_OscConfig+0x288>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x270>
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x288>
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <HAL_RCC_OscConfig+0x298>)
 80040d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01b      	beq.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fd fcd0 	bl	8001a84 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040e6:	e010      	b.n	800410a <HAL_RCC_OscConfig+0x2ba>
 80040e8:	40021000 	.word	0x40021000
 80040ec:	0800656c 	.word	0x0800656c
 80040f0:	20000000 	.word	0x20000000
 80040f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fd fcc4 	bl	8001a84 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e2bd      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	4baf      	ldr	r3, [pc, #700]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x2a8>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd fcb4 	bl	8001a84 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7fd fcb0 	bl	8001a84 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e2a9      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004132:	4ba5      	ldr	r3, [pc, #660]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x2d0>
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d060      	beq.n	8004210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b04      	cmp	r3, #4
 8004152:	d005      	beq.n	8004160 <HAL_RCC_OscConfig+0x310>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d119      	bne.n	800418e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d116      	bne.n	800418e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004160:	4b99      	ldr	r3, [pc, #612]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x328>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e286      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b93      	ldr	r3, [pc, #588]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	4990      	ldr	r1, [pc, #576]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800418c:	e040      	b.n	8004210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d023      	beq.n	80041de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004196:	4b8c      	ldr	r3, [pc, #560]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a8b      	ldr	r2, [pc, #556]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd fc6f 	bl	8001a84 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd fc6b 	bl	8001a84 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e264      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041bc:	4b82      	ldr	r3, [pc, #520]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b7f      	ldr	r3, [pc, #508]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	497c      	ldr	r1, [pc, #496]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
 80041dc:	e018      	b.n	8004210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b7a      	ldr	r3, [pc, #488]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a79      	ldr	r2, [pc, #484]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80041e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd fc4b 	bl	8001a84 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7fd fc47 	bl	8001a84 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e240      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004204:	4b70      	ldr	r3, [pc, #448]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d03c      	beq.n	8004296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01c      	beq.n	800425e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004224:	4b68      	ldr	r3, [pc, #416]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422a:	4a67      	ldr	r2, [pc, #412]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fd fc26 	bl	8001a84 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423c:	f7fd fc22 	bl	8001a84 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e21b      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800424e:	4b5e      	ldr	r3, [pc, #376]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ef      	beq.n	800423c <HAL_RCC_OscConfig+0x3ec>
 800425c:	e01b      	b.n	8004296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425e:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426e:	f7fd fc09 	bl	8001a84 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004276:	f7fd fc05 	bl	8001a84 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e1fe      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ef      	bne.n	8004276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80a6 	beq.w	80043f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042a8:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	4a43      	ldr	r2, [pc, #268]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	; 0x58
 80042c0:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d0:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <HAL_RCC_OscConfig+0x57c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d118      	bne.n	800430e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_RCC_OscConfig+0x57c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <HAL_RCC_OscConfig+0x57c>)
 80042e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e8:	f7fd fbcc 	bl	8001a84 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fd fbc8 	bl	8001a84 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1c1      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004302:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_RCC_OscConfig+0x57c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <HAL_RCC_OscConfig+0x4d8>
 8004316:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004326:	e024      	b.n	8004372 <HAL_RCC_OscConfig+0x522>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b05      	cmp	r3, #5
 800432e:	d110      	bne.n	8004352 <HAL_RCC_OscConfig+0x502>
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004338:	f043 0304 	orr.w	r3, r3, #4
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004340:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004350:	e00f      	b.n	8004372 <HAL_RCC_OscConfig+0x522>
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800436a:	f023 0304 	bic.w	r3, r3, #4
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fb83 	bl	8001a84 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd fb7f 	bl	8001a84 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e176      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_OscConfig+0x578>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ed      	beq.n	8004382 <HAL_RCC_OscConfig+0x532>
 80043a6:	e01a      	b.n	80043de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd fb6c 	bl	8001a84 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ae:	e00f      	b.n	80043d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fd fb68 	bl	8001a84 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d906      	bls.n	80043d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e15f      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d0:	4baa      	ldr	r3, [pc, #680]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e8      	bne.n	80043b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043de:	7ffb      	ldrb	r3, [r7, #31]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e4:	4ba5      	ldr	r3, [pc, #660]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	4aa4      	ldr	r2, [pc, #656]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80043ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d03c      	beq.n	8004476 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004404:	4b9d      	ldr	r3, [pc, #628]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800440a:	4a9c      	ldr	r2, [pc, #624]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fd fb36 	bl	8001a84 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441c:	f7fd fb32 	bl	8001a84 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e12b      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800442e:	4b93      	ldr	r3, [pc, #588]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <HAL_RCC_OscConfig+0x5cc>
 800443c:	e01b      	b.n	8004476 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800443e:	4b8f      	ldr	r3, [pc, #572]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004444:	4a8d      	ldr	r2, [pc, #564]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fb19 	bl	8001a84 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004456:	f7fd fb15 	bl	8001a84 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e10e      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004468:	4b84      	ldr	r3, [pc, #528]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 800446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ef      	bne.n	8004456 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8102 	beq.w	8004684 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	2b02      	cmp	r3, #2
 8004486:	f040 80c5 	bne.w	8004614 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800448a:	4b7c      	ldr	r3, [pc, #496]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0203 	and.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	429a      	cmp	r2, r3
 800449c:	d12c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	3b01      	subs	r3, #1
 80044aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d123      	bne.n	80044f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d11b      	bne.n	80044f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d113      	bne.n	80044f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	3b01      	subs	r3, #1
 80044de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d109      	bne.n	80044f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	3b01      	subs	r3, #1
 80044f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d067      	beq.n	80045c8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b0c      	cmp	r3, #12
 80044fc:	d062      	beq.n	80045c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044fe:	4b5f      	ldr	r3, [pc, #380]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e0bb      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800450e:	4b5b      	ldr	r3, [pc, #364]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a5a      	ldr	r2, [pc, #360]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004514:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004518:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800451a:	f7fd fab3 	bl	8001a84 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004522:	f7fd faaf 	bl	8001a84 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0a8      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	4b51      	ldr	r3, [pc, #324]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004540:	4b4e      	ldr	r3, [pc, #312]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <HAL_RCC_OscConfig+0x830>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004550:	3a01      	subs	r2, #1
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800455a:	0212      	lsls	r2, r2, #8
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004562:	0852      	lsrs	r2, r2, #1
 8004564:	3a01      	subs	r2, #1
 8004566:	0552      	lsls	r2, r2, #21
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800456e:	0852      	lsrs	r2, r2, #1
 8004570:	3a01      	subs	r2, #1
 8004572:	0652      	lsls	r2, r2, #25
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800457a:	06d2      	lsls	r2, r2, #27
 800457c:	430a      	orrs	r2, r1
 800457e:	493f      	ldr	r1, [pc, #252]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004584:	4b3d      	ldr	r3, [pc, #244]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3c      	ldr	r2, [pc, #240]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a39      	ldr	r2, [pc, #228]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800459c:	f7fd fa72 	bl	8001a84 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fa6e 	bl	8001a84 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e067      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	4b31      	ldr	r3, [pc, #196]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045c2:	e05f      	b.n	8004684 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e05e      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d157      	bne.n	8004684 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045d4:	4b29      	ldr	r3, [pc, #164]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a25      	ldr	r2, [pc, #148]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 80045e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ec:	f7fd fa4a 	bl	8001a84 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fd fa46 	bl	8001a84 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e03f      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x7a4>
 8004612:	e037      	b.n	8004684 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d02d      	beq.n	8004676 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004624:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4a11      	ldr	r2, [pc, #68]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004638:	f023 0303 	bic.w	r3, r3, #3
 800463c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a0e      	ldr	r2, [pc, #56]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 8004644:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd fa19 	bl	8001a84 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7fd fa15 	bl	8001a84 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e00e      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_RCC_OscConfig+0x82c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x806>
 8004674:	e006      	b.n	8004684 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e005      	b.n	8004686 <HAL_RCC_OscConfig+0x836>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0c8      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b66      	ldr	r3, [pc, #408]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 0207 	bic.w	r2, r3, #7
 80046ba:	4961      	ldr	r1, [pc, #388]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b5f      	ldr	r3, [pc, #380]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b0      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d04c      	beq.n	800477a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e8:	4b56      	ldr	r3, [pc, #344]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d121      	bne.n	8004738 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e09e      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e092      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004718:	4b4a      	ldr	r3, [pc, #296]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e086      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004728:	4b46      	ldr	r3, [pc, #280]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e07e      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004738:	4b42      	ldr	r3, [pc, #264]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 0203 	bic.w	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	493f      	ldr	r1, [pc, #252]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474a:	f7fd f99b 	bl	8001a84 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004750:	e00a      	b.n	8004768 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fd f997 	bl	8001a84 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e066      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004768:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 020c 	and.w	r2, r3, #12
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	429a      	cmp	r2, r3
 8004778:	d1eb      	bne.n	8004752 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	492c      	ldr	r1, [pc, #176]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d210      	bcs.n	80047c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 0207 	bic.w	r2, r3, #7
 80047ae:	4924      	ldr	r1, [pc, #144]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCC_ClockConfig+0x1b0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e036      	b.n	8004836 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4918      	ldr	r1, [pc, #96]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4910      	ldr	r1, [pc, #64]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004806:	f000 f825 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 800480a:	4601      	mov	r1, r0
 800480c:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_RCC_ClockConfig+0x1b4>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	5cd3      	ldrb	r3, [r2, r3]
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	fa21 f303 	lsr.w	r3, r1, r3
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd f8da 	bl	80019e4 <HAL_InitTick>
 8004830:	4603      	mov	r3, r0
 8004832:	72fb      	strb	r3, [r7, #11]

  return status;
 8004834:	7afb      	ldrb	r3, [r7, #11]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40022000 	.word	0x40022000
 8004844:	40021000 	.word	0x40021000
 8004848:	0800656c 	.word	0x0800656c
 800484c:	20000000 	.word	0x20000000
 8004850:	20000004 	.word	0x20000004

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	; 0x24
 8004858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800486c:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x34>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d121      	bne.n	80048c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d11e      	bne.n	80048c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004894:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e005      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048a4:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <HAL_RCC_GetSysClockFreq+0x108>)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e004      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048d8:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_GetSysClockFreq+0x110>)
 80048da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d133      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0xa4>
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0xaa>
 80048f6:	e005      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048fa:	617b      	str	r3, [r7, #20]
      break;
 80048fc:	e005      	b.n	800490a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_GetSysClockFreq+0x110>)
 8004900:	617b      	str	r3, [r7, #20]
      break;
 8004902:	e002      	b.n	800490a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	617b      	str	r3, [r7, #20]
      break;
 8004908:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	3301      	adds	r3, #1
 8004916:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	fb02 f203 	mul.w	r2, r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCC_GetSysClockFreq+0x104>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0e5b      	lsrs	r3, r3, #25
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800494a:	69bb      	ldr	r3, [r7, #24]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3724      	adds	r7, #36	; 0x24
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40021000 	.word	0x40021000
 800495c:	08006584 	.word	0x08006584
 8004960:	00f42400 	.word	0x00f42400
 8004964:	007a1200 	.word	0x007a1200

08004968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_RCC_GetHCLKFreq+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000000 	.word	0x20000000

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004984:	f7ff fff0 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 8004988:	4601      	mov	r1, r0
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	0800657c 	.word	0x0800657c

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049b0:	f7ff ffda 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80049b4:	4601      	mov	r1, r0
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0adb      	lsrs	r3, r3, #11
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	0800657c 	.word	0x0800657c

080049d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049e4:	4b2a      	ldr	r3, [pc, #168]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049f0:	f7ff f9ca 	bl	8003d88 <HAL_PWREx_GetVoltageRange>
 80049f4:	6178      	str	r0, [r7, #20]
 80049f6:	e014      	b.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6593      	str	r3, [r2, #88]	; 0x58
 8004a04:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a10:	f7ff f9ba 	bl	8003d88 <HAL_PWREx_GetVoltageRange>
 8004a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a28:	d10b      	bne.n	8004a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d919      	bls.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2ba0      	cmp	r3, #160	; 0xa0
 8004a34:	d902      	bls.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a36:	2302      	movs	r3, #2
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e013      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e010      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d902      	bls.n	8004a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a48:	2303      	movs	r3, #3
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e00a      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d102      	bne.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a54:	2302      	movs	r3, #2
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e004      	b.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d101      	bne.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a60:	2301      	movs	r3, #1
 8004a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 0207 	bic.w	r2, r3, #7
 8004a6c:	4909      	ldr	r1, [pc, #36]	; (8004a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40022000 	.word	0x40022000

08004a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004abc:	d005      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004abe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ac2:	d015      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ac8:	e00f      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004aca:	4bac      	ldr	r3, [pc, #688]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4aab      	ldr	r2, [pc, #684]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ad6:	e00c      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f9dc 	bl	8004e9c <RCCEx_PLLSAI1_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	74fb      	strb	r3, [r7, #19]
      break;
 8004aee:	e000      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af8:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	499d      	ldr	r1, [pc, #628]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b0e:	e001      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8099 	beq.w	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b26:	4b95      	ldr	r3, [pc, #596]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	4a8e      	ldr	r2, [pc, #568]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6593      	str	r3, [r2, #88]	; 0x58
 8004b48:	4b8c      	ldr	r3, [pc, #560]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b54:	2301      	movs	r3, #1
 8004b56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b58:	4b89      	ldr	r3, [pc, #548]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a88      	ldr	r2, [pc, #544]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b64:	f7fc ff8e 	bl	8001a84 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b6a:	e009      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6c:	f7fc ff8a 	bl	8001a84 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d902      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b7e:	e005      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b80:	4b7f      	ldr	r3, [pc, #508]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ef      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d155      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01e      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d019      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bae:	4b73      	ldr	r3, [pc, #460]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bba:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bca:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	4a6a      	ldr	r2, [pc, #424]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bda:	4a68      	ldr	r2, [pc, #416]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d016      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fc ff4a 	bl	8001a84 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fc ff46 	bl	8001a84 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d902      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	74fb      	strb	r3, [r7, #19]
            break;
 8004c0a:	e006      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ec      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c20:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	4953      	ldr	r1, [pc, #332]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c36:	e004      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	74bb      	strb	r3, [r7, #18]
 8004c3c:	e001      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c42:	7c7b      	ldrb	r3, [r7, #17]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c48:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	4a4b      	ldr	r2, [pc, #300]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4943      	ldr	r1, [pc, #268]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c82:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f023 020c 	bic.w	r2, r3, #12
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	493a      	ldr	r1, [pc, #232]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ca4:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	4932      	ldr	r1, [pc, #200]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	4929      	ldr	r1, [pc, #164]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	4921      	ldr	r1, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4918      	ldr	r1, [pc, #96]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	4910      	ldr	r1, [pc, #64]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02c      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	4907      	ldr	r1, [pc, #28]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6c:	d10a      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d6e:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a02      	ldr	r2, [pc, #8]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d78:	60d3      	str	r3, [r2, #12]
 8004d7a:	e015      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f881 	bl	8004e9c <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d028      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db4:	4b30      	ldr	r3, [pc, #192]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	492d      	ldr	r1, [pc, #180]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
 8004de0:	e011      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dea:	d10c      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f852 	bl	8004e9c <RCCEx_PLLSAI1_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01c      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	4915      	ldr	r1, [pc, #84]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f82f 	bl	8004e9c <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	4904      	ldr	r1, [pc, #16]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000

08004e7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6013      	str	r3, [r2, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000

08004e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d018      	beq.n	8004ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eb6:	4b70      	ldr	r3, [pc, #448]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0203 	and.w	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d10d      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ece:	4b6a      	ldr	r3, [pc, #424]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d044      	beq.n	8004f6c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	e041      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d00c      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x6e>
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d013      	beq.n	8004f1c <RCCEx_PLLSAI1_Config+0x80>
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d120      	bne.n	8004f3a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ef8:	4b5f      	ldr	r3, [pc, #380]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11d      	bne.n	8004f40 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e01a      	b.n	8004f40 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f0a:	4b5b      	ldr	r3, [pc, #364]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d116      	bne.n	8004f44 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1a:	e013      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f1c:	4b56      	ldr	r3, [pc, #344]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10f      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f28:	4b53      	ldr	r3, [pc, #332]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f38:	e006      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3e:	e004      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f48:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f50:	4b49      	ldr	r3, [pc, #292]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	430b      	orrs	r3, r1
 8004f66:	4944      	ldr	r1, [pc, #272]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d17c      	bne.n	800506c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f72:	4b41      	ldr	r3, [pc, #260]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a40      	ldr	r2, [pc, #256]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fc fd81 	bl	8001a84 <HAL_GetTick>
 8004f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f84:	e009      	b.n	8004f9a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f86:	f7fc fd7d 	bl	8001a84 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d902      	bls.n	8004f9a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	73fb      	strb	r3, [r7, #15]
        break;
 8004f98:	e005      	b.n	8004fa6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f9a:	4b37      	ldr	r3, [pc, #220]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ef      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d15f      	bne.n	800506c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d110      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6892      	ldr	r2, [r2, #8]
 8004fc2:	0211      	lsls	r1, r2, #8
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68d2      	ldr	r2, [r2, #12]
 8004fc8:	06d2      	lsls	r2, r2, #27
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	492a      	ldr	r1, [pc, #168]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
 8004fd2:	e027      	b.n	8005024 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d112      	bne.n	8005000 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fda:	4b27      	ldr	r3, [pc, #156]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fe2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6892      	ldr	r2, [r2, #8]
 8004fea:	0211      	lsls	r1, r2, #8
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6912      	ldr	r2, [r2, #16]
 8004ff0:	0852      	lsrs	r2, r2, #1
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	0552      	lsls	r2, r2, #21
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	491f      	ldr	r1, [pc, #124]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
 8004ffe:	e011      	b.n	8005024 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005000:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005008:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6892      	ldr	r2, [r2, #8]
 8005010:	0211      	lsls	r1, r2, #8
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6952      	ldr	r2, [r2, #20]
 8005016:	0852      	lsrs	r2, r2, #1
 8005018:	3a01      	subs	r2, #1
 800501a:	0652      	lsls	r2, r2, #25
 800501c:	430a      	orrs	r2, r1
 800501e:	4916      	ldr	r1, [pc, #88]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005024:	4b14      	ldr	r3, [pc, #80]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 800502a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800502e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fc fd28 	bl	8001a84 <HAL_GetTick>
 8005034:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005036:	e009      	b.n	800504c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005038:	f7fc fd24 	bl	8001a84 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	73fb      	strb	r3, [r7, #15]
          break;
 800504a:	e005      	b.n	8005058 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ef      	beq.n	8005038 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	4904      	ldr	r1, [pc, #16]	; (8005078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000

0800507c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e040      	b.n	8005110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fb5e 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8c0 	bl	8005240 <UART_SetConfig>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e022      	b.n	8005110 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fac4 	bl	8005660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fb4b 	bl	80057a4 <UART_CheckIdleState>
 800510e:	4603      	mov	r3, r0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512c:	2b20      	cmp	r3, #32
 800512e:	f040 8081 	bne.w	8005234 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Transmit+0x26>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e079      	b.n	8005236 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Transmit+0x38>
 800514c:	2302      	movs	r3, #2
 800514e:	e072      	b.n	8005236 <HAL_UART_Transmit+0x11e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	; 0x21
 8005162:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005164:	f7fc fc8e 	bl	8001a84 <HAL_GetTick>
 8005168:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	d108      	bne.n	8005196 <HAL_UART_Transmit+0x7e>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e003      	b.n	800519e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80051a6:	e02d      	b.n	8005204 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fb3b 	bl	800582e <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e039      	b.n	8005236 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	b292      	uxth	r2, r2
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	3302      	adds	r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e008      	b.n	80051f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b292      	uxth	r2, r2
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1cb      	bne.n	80051a8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fb07 	bl	800582e <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e005      	b.n	8005236 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005240:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005244:	b088      	sub	sp, #32
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4313      	orrs	r3, r2
 8005264:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4bb0      	ldr	r3, [pc, #704]	; (8005530 <UART_SetConfig+0x2f0>)
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	69f9      	ldr	r1, [r7, #28]
 8005276:	430b      	orrs	r3, r1
 8005278:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4aa6      	ldr	r2, [pc, #664]	; (8005534 <UART_SetConfig+0x2f4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a9d      	ldr	r2, [pc, #628]	; (8005538 <UART_SetConfig+0x2f8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d121      	bne.n	800530c <UART_SetConfig+0xcc>
 80052c8:	4b9c      	ldr	r3, [pc, #624]	; (800553c <UART_SetConfig+0x2fc>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d816      	bhi.n	8005304 <UART_SetConfig+0xc4>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <UART_SetConfig+0x9c>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	080052ed 	.word	0x080052ed
 80052e0:	080052f9 	.word	0x080052f9
 80052e4:	080052f3 	.word	0x080052f3
 80052e8:	080052ff 	.word	0x080052ff
 80052ec:	2301      	movs	r3, #1
 80052ee:	76fb      	strb	r3, [r7, #27]
 80052f0:	e072      	b.n	80053d8 <UART_SetConfig+0x198>
 80052f2:	2302      	movs	r3, #2
 80052f4:	76fb      	strb	r3, [r7, #27]
 80052f6:	e06f      	b.n	80053d8 <UART_SetConfig+0x198>
 80052f8:	2304      	movs	r3, #4
 80052fa:	76fb      	strb	r3, [r7, #27]
 80052fc:	e06c      	b.n	80053d8 <UART_SetConfig+0x198>
 80052fe:	2308      	movs	r3, #8
 8005300:	76fb      	strb	r3, [r7, #27]
 8005302:	e069      	b.n	80053d8 <UART_SetConfig+0x198>
 8005304:	2310      	movs	r3, #16
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	bf00      	nop
 800530a:	e065      	b.n	80053d8 <UART_SetConfig+0x198>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a8b      	ldr	r2, [pc, #556]	; (8005540 <UART_SetConfig+0x300>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d134      	bne.n	8005380 <UART_SetConfig+0x140>
 8005316:	4b89      	ldr	r3, [pc, #548]	; (800553c <UART_SetConfig+0x2fc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b0c      	cmp	r3, #12
 8005322:	d829      	bhi.n	8005378 <UART_SetConfig+0x138>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0xec>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005361 	.word	0x08005361
 8005330:	08005379 	.word	0x08005379
 8005334:	08005379 	.word	0x08005379
 8005338:	08005379 	.word	0x08005379
 800533c:	0800536d 	.word	0x0800536d
 8005340:	08005379 	.word	0x08005379
 8005344:	08005379 	.word	0x08005379
 8005348:	08005379 	.word	0x08005379
 800534c:	08005367 	.word	0x08005367
 8005350:	08005379 	.word	0x08005379
 8005354:	08005379 	.word	0x08005379
 8005358:	08005379 	.word	0x08005379
 800535c:	08005373 	.word	0x08005373
 8005360:	2300      	movs	r3, #0
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e038      	b.n	80053d8 <UART_SetConfig+0x198>
 8005366:	2302      	movs	r3, #2
 8005368:	76fb      	strb	r3, [r7, #27]
 800536a:	e035      	b.n	80053d8 <UART_SetConfig+0x198>
 800536c:	2304      	movs	r3, #4
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	e032      	b.n	80053d8 <UART_SetConfig+0x198>
 8005372:	2308      	movs	r3, #8
 8005374:	76fb      	strb	r3, [r7, #27]
 8005376:	e02f      	b.n	80053d8 <UART_SetConfig+0x198>
 8005378:	2310      	movs	r3, #16
 800537a:	76fb      	strb	r3, [r7, #27]
 800537c:	bf00      	nop
 800537e:	e02b      	b.n	80053d8 <UART_SetConfig+0x198>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6b      	ldr	r2, [pc, #428]	; (8005534 <UART_SetConfig+0x2f4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d124      	bne.n	80053d4 <UART_SetConfig+0x194>
 800538a:	4b6c      	ldr	r3, [pc, #432]	; (800553c <UART_SetConfig+0x2fc>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005398:	d012      	beq.n	80053c0 <UART_SetConfig+0x180>
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539e:	d802      	bhi.n	80053a6 <UART_SetConfig+0x166>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <UART_SetConfig+0x174>
 80053a4:	e012      	b.n	80053cc <UART_SetConfig+0x18c>
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053aa:	d006      	beq.n	80053ba <UART_SetConfig+0x17a>
 80053ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b0:	d009      	beq.n	80053c6 <UART_SetConfig+0x186>
 80053b2:	e00b      	b.n	80053cc <UART_SetConfig+0x18c>
 80053b4:	2300      	movs	r3, #0
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	e00e      	b.n	80053d8 <UART_SetConfig+0x198>
 80053ba:	2302      	movs	r3, #2
 80053bc:	76fb      	strb	r3, [r7, #27]
 80053be:	e00b      	b.n	80053d8 <UART_SetConfig+0x198>
 80053c0:	2304      	movs	r3, #4
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	e008      	b.n	80053d8 <UART_SetConfig+0x198>
 80053c6:	2308      	movs	r3, #8
 80053c8:	76fb      	strb	r3, [r7, #27]
 80053ca:	e005      	b.n	80053d8 <UART_SetConfig+0x198>
 80053cc:	2310      	movs	r3, #16
 80053ce:	76fb      	strb	r3, [r7, #27]
 80053d0:	bf00      	nop
 80053d2:	e001      	b.n	80053d8 <UART_SetConfig+0x198>
 80053d4:	2310      	movs	r3, #16
 80053d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a55      	ldr	r2, [pc, #340]	; (8005534 <UART_SetConfig+0x2f4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d174      	bne.n	80054cc <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053e2:	7efb      	ldrb	r3, [r7, #27]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d824      	bhi.n	8005432 <UART_SetConfig+0x1f2>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x1b0>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005415 	.word	0x08005415
 80053f4:	08005433 	.word	0x08005433
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005433 	.word	0x08005433
 8005400:	08005423 	.word	0x08005423
 8005404:	08005433 	.word	0x08005433
 8005408:	08005433 	.word	0x08005433
 800540c:	08005433 	.word	0x08005433
 8005410:	0800542b 	.word	0x0800542b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7ff fab4 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8005418:	6178      	str	r0, [r7, #20]
        break;
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541c:	4b49      	ldr	r3, [pc, #292]	; (8005544 <UART_SetConfig+0x304>)
 800541e:	617b      	str	r3, [r7, #20]
        break;
 8005420:	e00c      	b.n	800543c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005422:	f7ff fa17 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8005426:	6178      	str	r0, [r7, #20]
        break;
 8005428:	e008      	b.n	800543c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542e:	617b      	str	r3, [r7, #20]
        break;
 8005430:	e004      	b.n	800543c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	76bb      	strb	r3, [r7, #26]
        break;
 800543a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8100 	beq.w	8005644 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d305      	bcc.n	8005460 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	429a      	cmp	r2, r3
 800545e:	d902      	bls.n	8005466 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	76bb      	strb	r3, [r7, #26]
 8005464:	e0ee      	b.n	8005644 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4619      	mov	r1, r3
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	0214      	lsls	r4, r2, #8
 8005478:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800547c:	020b      	lsls	r3, r1, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	4611      	mov	r1, r2
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	eb13 0b01 	adds.w	fp, r3, r1
 800548e:	eb44 0c02 	adc.w	ip, r4, r2
 8005492:	4658      	mov	r0, fp
 8005494:	4661      	mov	r1, ip
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	461a      	mov	r2, r3
 80054a0:	4623      	mov	r3, r4
 80054a2:	f7fb f8d9 	bl	8000658 <__aeabi_uldivmod>
 80054a6:	4603      	mov	r3, r0
 80054a8:	460c      	mov	r4, r1
 80054aa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b2:	d308      	bcc.n	80054c6 <UART_SetConfig+0x286>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ba:	d204      	bcs.n	80054c6 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	e0be      	b.n	8005644 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	76bb      	strb	r3, [r7, #26]
 80054ca:	e0bb      	b.n	8005644 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d4:	d169      	bne.n	80055aa <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80054d6:	7efb      	ldrb	r3, [r7, #27]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d835      	bhi.n	8005548 <UART_SetConfig+0x308>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x2a4>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	08005549 	.word	0x08005549
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	08005549 	.word	0x08005549
 80054fc:	08005549 	.word	0x08005549
 8005500:	08005549 	.word	0x08005549
 8005504:	08005527 	.word	0x08005527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005508:	f7ff fa3a 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 800550c:	6178      	str	r0, [r7, #20]
        break;
 800550e:	e020      	b.n	8005552 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005510:	f7ff fa4c 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8005514:	6178      	str	r0, [r7, #20]
        break;
 8005516:	e01c      	b.n	8005552 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <UART_SetConfig+0x304>)
 800551a:	617b      	str	r3, [r7, #20]
        break;
 800551c:	e019      	b.n	8005552 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7ff f999 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8005522:	6178      	str	r0, [r7, #20]
        break;
 8005524:	e015      	b.n	8005552 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552a:	617b      	str	r3, [r7, #20]
        break;
 800552c:	e011      	b.n	8005552 <UART_SetConfig+0x312>
 800552e:	bf00      	nop
 8005530:	efff69f3 	.word	0xefff69f3
 8005534:	40008000 	.word	0x40008000
 8005538:	40013800 	.word	0x40013800
 800553c:	40021000 	.word	0x40021000
 8005540:	40004400 	.word	0x40004400
 8005544:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	76bb      	strb	r3, [r7, #26]
        break;
 8005550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d075      	beq.n	8005644 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	005a      	lsls	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	441a      	add	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	b29b      	uxth	r3, r3
 800556e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b0f      	cmp	r3, #15
 8005574:	d916      	bls.n	80055a4 <UART_SetConfig+0x364>
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d212      	bcs.n	80055a4 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f023 030f 	bic.w	r3, r3, #15
 8005586:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	b29b      	uxth	r3, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	b29a      	uxth	r2, r3
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	4313      	orrs	r3, r2
 8005598:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	89fa      	ldrh	r2, [r7, #14]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e04f      	b.n	8005644 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	76bb      	strb	r3, [r7, #26]
 80055a8:	e04c      	b.n	8005644 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055aa:	7efb      	ldrb	r3, [r7, #27]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d828      	bhi.n	8005602 <UART_SetConfig+0x3c2>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x378>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005603 	.word	0x08005603
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	08005603 	.word	0x08005603
 80055d0:	08005603 	.word	0x08005603
 80055d4:	08005603 	.word	0x08005603
 80055d8:	080055fb 	.word	0x080055fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7ff f9d0 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 80055e0:	6178      	str	r0, [r7, #20]
        break;
 80055e2:	e013      	b.n	800560c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7ff f9e2 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 80055e8:	6178      	str	r0, [r7, #20]
        break;
 80055ea:	e00f      	b.n	800560c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <UART_SetConfig+0x41c>)
 80055ee:	617b      	str	r3, [r7, #20]
        break;
 80055f0:	e00c      	b.n	800560c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f2:	f7ff f92f 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 80055f6:	6178      	str	r0, [r7, #20]
        break;
 80055f8:	e008      	b.n	800560c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	617b      	str	r3, [r7, #20]
        break;
 8005600:	e004      	b.n	800560c <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	76bb      	strb	r3, [r7, #26]
        break;
 800560a:	bf00      	nop
    }

    if (pclk != 0U)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d018      	beq.n	8005644 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	085a      	lsrs	r2, r3, #1
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	441a      	add	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	b29b      	uxth	r3, r3
 8005626:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d908      	bls.n	8005640 <UART_SetConfig+0x400>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d204      	bcs.n	8005640 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e001      	b.n	8005644 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005650:	7ebb      	ldrb	r3, [r7, #26]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800565c:	00f42400 	.word	0x00f42400

08005660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01a      	beq.n	8005776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575e:	d10a      	bne.n	8005776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057b2:	f7fc f967 	bl	8001a84 <HAL_GetTick>
 80057b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d10e      	bne.n	80057e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f82a 	bl	800582e <UART_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e020      	b.n	8005826 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d10e      	bne.n	8005810 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f814 	bl	800582e <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e00a      	b.n	8005826 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583e:	e05d      	b.n	80058fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d059      	beq.n	80058fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005848:	f7fc f91c 	bl	8001a84 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	429a      	cmp	r2, r3
 8005856:	d302      	bcc.n	800585e <UART_WaitOnFlagUntilTimeout+0x30>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11b      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800586c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e042      	b.n	800591c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02b      	beq.n	80058fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b2:	d123      	bne.n	80058fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e00f      	b.n	800591c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4013      	ands	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	429a      	cmp	r2, r3
 8005918:	d092      	beq.n	8005840 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <__errno>:
 8005924:	4b01      	ldr	r3, [pc, #4]	; (800592c <__errno+0x8>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	2000000c 	.word	0x2000000c

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	4e0d      	ldr	r6, [pc, #52]	; (8005968 <__libc_init_array+0x38>)
 8005934:	4c0d      	ldr	r4, [pc, #52]	; (800596c <__libc_init_array+0x3c>)
 8005936:	1ba4      	subs	r4, r4, r6
 8005938:	10a4      	asrs	r4, r4, #2
 800593a:	2500      	movs	r5, #0
 800593c:	42a5      	cmp	r5, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	4e0b      	ldr	r6, [pc, #44]	; (8005970 <__libc_init_array+0x40>)
 8005942:	4c0c      	ldr	r4, [pc, #48]	; (8005974 <__libc_init_array+0x44>)
 8005944:	f000 fcec 	bl	8006320 <_init>
 8005948:	1ba4      	subs	r4, r4, r6
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	2500      	movs	r5, #0
 800594e:	42a5      	cmp	r5, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005958:	4798      	blx	r3
 800595a:	3501      	adds	r5, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005962:	4798      	blx	r3
 8005964:	3501      	adds	r5, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	080066fc 	.word	0x080066fc
 800596c:	080066fc 	.word	0x080066fc
 8005970:	080066fc 	.word	0x080066fc
 8005974:	08006700 	.word	0x08006700

08005978 <malloc>:
 8005978:	4b02      	ldr	r3, [pc, #8]	; (8005984 <malloc+0xc>)
 800597a:	4601      	mov	r1, r0
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	f000 b861 	b.w	8005a44 <_malloc_r>
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c

08005988 <free>:
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <free+0xc>)
 800598a:	4601      	mov	r1, r0
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	f000 b80b 	b.w	80059a8 <_free_r>
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c

08005998 <memset>:
 8005998:	4402      	add	r2, r0
 800599a:	4603      	mov	r3, r0
 800599c:	4293      	cmp	r3, r2
 800599e:	d100      	bne.n	80059a2 <memset+0xa>
 80059a0:	4770      	bx	lr
 80059a2:	f803 1b01 	strb.w	r1, [r3], #1
 80059a6:	e7f9      	b.n	800599c <memset+0x4>

080059a8 <_free_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4605      	mov	r5, r0
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d045      	beq.n	8005a3c <_free_r+0x94>
 80059b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b4:	1f0c      	subs	r4, r1, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bfb8      	it	lt
 80059ba:	18e4      	addlt	r4, r4, r3
 80059bc:	f000 f973 	bl	8005ca6 <__malloc_lock>
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <_free_r+0x98>)
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	4610      	mov	r0, r2
 80059c6:	b933      	cbnz	r3, 80059d6 <_free_r+0x2e>
 80059c8:	6063      	str	r3, [r4, #4]
 80059ca:	6014      	str	r4, [r2, #0]
 80059cc:	4628      	mov	r0, r5
 80059ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d2:	f000 b969 	b.w	8005ca8 <__malloc_unlock>
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	d90c      	bls.n	80059f4 <_free_r+0x4c>
 80059da:	6821      	ldr	r1, [r4, #0]
 80059dc:	1862      	adds	r2, r4, r1
 80059de:	4293      	cmp	r3, r2
 80059e0:	bf04      	itt	eq
 80059e2:	681a      	ldreq	r2, [r3, #0]
 80059e4:	685b      	ldreq	r3, [r3, #4]
 80059e6:	6063      	str	r3, [r4, #4]
 80059e8:	bf04      	itt	eq
 80059ea:	1852      	addeq	r2, r2, r1
 80059ec:	6022      	streq	r2, [r4, #0]
 80059ee:	6004      	str	r4, [r0, #0]
 80059f0:	e7ec      	b.n	80059cc <_free_r+0x24>
 80059f2:	4613      	mov	r3, r2
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	b10a      	cbz	r2, 80059fc <_free_r+0x54>
 80059f8:	42a2      	cmp	r2, r4
 80059fa:	d9fa      	bls.n	80059f2 <_free_r+0x4a>
 80059fc:	6819      	ldr	r1, [r3, #0]
 80059fe:	1858      	adds	r0, r3, r1
 8005a00:	42a0      	cmp	r0, r4
 8005a02:	d10b      	bne.n	8005a1c <_free_r+0x74>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	4401      	add	r1, r0
 8005a08:	1858      	adds	r0, r3, r1
 8005a0a:	4282      	cmp	r2, r0
 8005a0c:	6019      	str	r1, [r3, #0]
 8005a0e:	d1dd      	bne.n	80059cc <_free_r+0x24>
 8005a10:	6810      	ldr	r0, [r2, #0]
 8005a12:	6852      	ldr	r2, [r2, #4]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	4401      	add	r1, r0
 8005a18:	6019      	str	r1, [r3, #0]
 8005a1a:	e7d7      	b.n	80059cc <_free_r+0x24>
 8005a1c:	d902      	bls.n	8005a24 <_free_r+0x7c>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	e7d3      	b.n	80059cc <_free_r+0x24>
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	1821      	adds	r1, r4, r0
 8005a28:	428a      	cmp	r2, r1
 8005a2a:	bf04      	itt	eq
 8005a2c:	6811      	ldreq	r1, [r2, #0]
 8005a2e:	6852      	ldreq	r2, [r2, #4]
 8005a30:	6062      	str	r2, [r4, #4]
 8005a32:	bf04      	itt	eq
 8005a34:	1809      	addeq	r1, r1, r0
 8005a36:	6021      	streq	r1, [r4, #0]
 8005a38:	605c      	str	r4, [r3, #4]
 8005a3a:	e7c7      	b.n	80059cc <_free_r+0x24>
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000021c 	.word	0x2000021c

08005a44 <_malloc_r>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	1ccd      	adds	r5, r1, #3
 8005a48:	f025 0503 	bic.w	r5, r5, #3
 8005a4c:	3508      	adds	r5, #8
 8005a4e:	2d0c      	cmp	r5, #12
 8005a50:	bf38      	it	cc
 8005a52:	250c      	movcc	r5, #12
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	4606      	mov	r6, r0
 8005a58:	db01      	blt.n	8005a5e <_malloc_r+0x1a>
 8005a5a:	42a9      	cmp	r1, r5
 8005a5c:	d903      	bls.n	8005a66 <_malloc_r+0x22>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	2000      	movs	r0, #0
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	f000 f91e 	bl	8005ca6 <__malloc_lock>
 8005a6a:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <_malloc_r+0xac>)
 8005a6c:	6814      	ldr	r4, [r2, #0]
 8005a6e:	4621      	mov	r1, r4
 8005a70:	b991      	cbnz	r1, 8005a98 <_malloc_r+0x54>
 8005a72:	4c20      	ldr	r4, [pc, #128]	; (8005af4 <_malloc_r+0xb0>)
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	b91b      	cbnz	r3, 8005a80 <_malloc_r+0x3c>
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f000 f83d 	bl	8005af8 <_sbrk_r>
 8005a7e:	6020      	str	r0, [r4, #0]
 8005a80:	4629      	mov	r1, r5
 8005a82:	4630      	mov	r0, r6
 8005a84:	f000 f838 	bl	8005af8 <_sbrk_r>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d124      	bne.n	8005ad6 <_malloc_r+0x92>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 f909 	bl	8005ca8 <__malloc_unlock>
 8005a96:	e7e4      	b.n	8005a62 <_malloc_r+0x1e>
 8005a98:	680b      	ldr	r3, [r1, #0]
 8005a9a:	1b5b      	subs	r3, r3, r5
 8005a9c:	d418      	bmi.n	8005ad0 <_malloc_r+0x8c>
 8005a9e:	2b0b      	cmp	r3, #11
 8005aa0:	d90f      	bls.n	8005ac2 <_malloc_r+0x7e>
 8005aa2:	600b      	str	r3, [r1, #0]
 8005aa4:	50cd      	str	r5, [r1, r3]
 8005aa6:	18cc      	adds	r4, r1, r3
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f000 f8fd 	bl	8005ca8 <__malloc_unlock>
 8005aae:	f104 000b 	add.w	r0, r4, #11
 8005ab2:	1d23      	adds	r3, r4, #4
 8005ab4:	f020 0007 	bic.w	r0, r0, #7
 8005ab8:	1ac3      	subs	r3, r0, r3
 8005aba:	d0d3      	beq.n	8005a64 <_malloc_r+0x20>
 8005abc:	425a      	negs	r2, r3
 8005abe:	50e2      	str	r2, [r4, r3]
 8005ac0:	e7d0      	b.n	8005a64 <_malloc_r+0x20>
 8005ac2:	428c      	cmp	r4, r1
 8005ac4:	684b      	ldr	r3, [r1, #4]
 8005ac6:	bf16      	itet	ne
 8005ac8:	6063      	strne	r3, [r4, #4]
 8005aca:	6013      	streq	r3, [r2, #0]
 8005acc:	460c      	movne	r4, r1
 8005ace:	e7eb      	b.n	8005aa8 <_malloc_r+0x64>
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	6849      	ldr	r1, [r1, #4]
 8005ad4:	e7cc      	b.n	8005a70 <_malloc_r+0x2c>
 8005ad6:	1cc4      	adds	r4, r0, #3
 8005ad8:	f024 0403 	bic.w	r4, r4, #3
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d005      	beq.n	8005aec <_malloc_r+0xa8>
 8005ae0:	1a21      	subs	r1, r4, r0
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f000 f808 	bl	8005af8 <_sbrk_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d0cf      	beq.n	8005a8c <_malloc_r+0x48>
 8005aec:	6025      	str	r5, [r4, #0]
 8005aee:	e7db      	b.n	8005aa8 <_malloc_r+0x64>
 8005af0:	2000021c 	.word	0x2000021c
 8005af4:	20000220 	.word	0x20000220

08005af8 <_sbrk_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4c06      	ldr	r4, [pc, #24]	; (8005b14 <_sbrk_r+0x1c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4605      	mov	r5, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	f7fb fec0 	bl	8001888 <_sbrk>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_sbrk_r+0x1a>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_sbrk_r+0x1a>
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20001378 	.word	0x20001378

08005b18 <siprintf>:
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	b500      	push	{lr}
 8005b1c:	b09c      	sub	sp, #112	; 0x70
 8005b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b20:	9002      	str	r0, [sp, #8]
 8005b22:	9006      	str	r0, [sp, #24]
 8005b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b28:	4809      	ldr	r0, [pc, #36]	; (8005b50 <siprintf+0x38>)
 8005b2a:	9107      	str	r1, [sp, #28]
 8005b2c:	9104      	str	r1, [sp, #16]
 8005b2e:	4909      	ldr	r1, [pc, #36]	; (8005b54 <siprintf+0x3c>)
 8005b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b34:	9105      	str	r1, [sp, #20]
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	a902      	add	r1, sp, #8
 8005b3c:	f000 f910 	bl	8005d60 <_svfiprintf_r>
 8005b40:	9b02      	ldr	r3, [sp, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	b01c      	add	sp, #112	; 0x70
 8005b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b4c:	b003      	add	sp, #12
 8005b4e:	4770      	bx	lr
 8005b50:	2000000c 	.word	0x2000000c
 8005b54:	ffff0208 	.word	0xffff0208

08005b58 <_strtol_l.isra.0>:
 8005b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4689      	mov	r9, r1
 8005b60:	4692      	mov	sl, r2
 8005b62:	461e      	mov	r6, r3
 8005b64:	460f      	mov	r7, r1
 8005b66:	463d      	mov	r5, r7
 8005b68:	9808      	ldr	r0, [sp, #32]
 8005b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b6e:	f000 f885 	bl	8005c7c <__locale_ctype_ptr_l>
 8005b72:	4420      	add	r0, r4
 8005b74:	7843      	ldrb	r3, [r0, #1]
 8005b76:	f013 0308 	ands.w	r3, r3, #8
 8005b7a:	d132      	bne.n	8005be2 <_strtol_l.isra.0+0x8a>
 8005b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005b7e:	d132      	bne.n	8005be6 <_strtol_l.isra.0+0x8e>
 8005b80:	787c      	ldrb	r4, [r7, #1]
 8005b82:	1cbd      	adds	r5, r7, #2
 8005b84:	2201      	movs	r2, #1
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d05d      	beq.n	8005c46 <_strtol_l.isra.0+0xee>
 8005b8a:	2e10      	cmp	r6, #16
 8005b8c:	d109      	bne.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005b8e:	2c30      	cmp	r4, #48	; 0x30
 8005b90:	d107      	bne.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005b92:	782b      	ldrb	r3, [r5, #0]
 8005b94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b98:	2b58      	cmp	r3, #88	; 0x58
 8005b9a:	d14f      	bne.n	8005c3c <_strtol_l.isra.0+0xe4>
 8005b9c:	786c      	ldrb	r4, [r5, #1]
 8005b9e:	2610      	movs	r6, #16
 8005ba0:	3502      	adds	r5, #2
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	bf14      	ite	ne
 8005ba6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005baa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005bae:	2700      	movs	r7, #0
 8005bb0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005bba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005bbe:	2b09      	cmp	r3, #9
 8005bc0:	d817      	bhi.n	8005bf2 <_strtol_l.isra.0+0x9a>
 8005bc2:	461c      	mov	r4, r3
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	dd23      	ble.n	8005c10 <_strtol_l.isra.0+0xb8>
 8005bc8:	1c7b      	adds	r3, r7, #1
 8005bca:	d007      	beq.n	8005bdc <_strtol_l.isra.0+0x84>
 8005bcc:	4584      	cmp	ip, r0
 8005bce:	d31c      	bcc.n	8005c0a <_strtol_l.isra.0+0xb2>
 8005bd0:	d101      	bne.n	8005bd6 <_strtol_l.isra.0+0x7e>
 8005bd2:	45a6      	cmp	lr, r4
 8005bd4:	db19      	blt.n	8005c0a <_strtol_l.isra.0+0xb2>
 8005bd6:	fb00 4006 	mla	r0, r0, r6, r4
 8005bda:	2701      	movs	r7, #1
 8005bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005be0:	e7eb      	b.n	8005bba <_strtol_l.isra.0+0x62>
 8005be2:	462f      	mov	r7, r5
 8005be4:	e7bf      	b.n	8005b66 <_strtol_l.isra.0+0xe>
 8005be6:	2c2b      	cmp	r4, #43	; 0x2b
 8005be8:	bf04      	itt	eq
 8005bea:	1cbd      	addeq	r5, r7, #2
 8005bec:	787c      	ldrbeq	r4, [r7, #1]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	e7c9      	b.n	8005b86 <_strtol_l.isra.0+0x2e>
 8005bf2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005bf6:	2b19      	cmp	r3, #25
 8005bf8:	d801      	bhi.n	8005bfe <_strtol_l.isra.0+0xa6>
 8005bfa:	3c37      	subs	r4, #55	; 0x37
 8005bfc:	e7e2      	b.n	8005bc4 <_strtol_l.isra.0+0x6c>
 8005bfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005c02:	2b19      	cmp	r3, #25
 8005c04:	d804      	bhi.n	8005c10 <_strtol_l.isra.0+0xb8>
 8005c06:	3c57      	subs	r4, #87	; 0x57
 8005c08:	e7dc      	b.n	8005bc4 <_strtol_l.isra.0+0x6c>
 8005c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005c0e:	e7e5      	b.n	8005bdc <_strtol_l.isra.0+0x84>
 8005c10:	1c7b      	adds	r3, r7, #1
 8005c12:	d108      	bne.n	8005c26 <_strtol_l.isra.0+0xce>
 8005c14:	2322      	movs	r3, #34	; 0x22
 8005c16:	f8c8 3000 	str.w	r3, [r8]
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	f1ba 0f00 	cmp.w	sl, #0
 8005c20:	d107      	bne.n	8005c32 <_strtol_l.isra.0+0xda>
 8005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c26:	b102      	cbz	r2, 8005c2a <_strtol_l.isra.0+0xd2>
 8005c28:	4240      	negs	r0, r0
 8005c2a:	f1ba 0f00 	cmp.w	sl, #0
 8005c2e:	d0f8      	beq.n	8005c22 <_strtol_l.isra.0+0xca>
 8005c30:	b10f      	cbz	r7, 8005c36 <_strtol_l.isra.0+0xde>
 8005c32:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c36:	f8ca 9000 	str.w	r9, [sl]
 8005c3a:	e7f2      	b.n	8005c22 <_strtol_l.isra.0+0xca>
 8005c3c:	2430      	movs	r4, #48	; 0x30
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d1af      	bne.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005c42:	2608      	movs	r6, #8
 8005c44:	e7ad      	b.n	8005ba2 <_strtol_l.isra.0+0x4a>
 8005c46:	2c30      	cmp	r4, #48	; 0x30
 8005c48:	d0a3      	beq.n	8005b92 <_strtol_l.isra.0+0x3a>
 8005c4a:	260a      	movs	r6, #10
 8005c4c:	e7a9      	b.n	8005ba2 <_strtol_l.isra.0+0x4a>
	...

08005c50 <strtol>:
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <strtol+0x24>)
 8005c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c54:	681c      	ldr	r4, [r3, #0]
 8005c56:	4d08      	ldr	r5, [pc, #32]	; (8005c78 <strtol+0x28>)
 8005c58:	6a23      	ldr	r3, [r4, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf08      	it	eq
 8005c5e:	462b      	moveq	r3, r5
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	460a      	mov	r2, r1
 8005c66:	4601      	mov	r1, r0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff ff75 	bl	8005b58 <_strtol_l.isra.0>
 8005c6e:	b003      	add	sp, #12
 8005c70:	bd30      	pop	{r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	20000070 	.word	0x20000070

08005c7c <__locale_ctype_ptr_l>:
 8005c7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005c80:	4770      	bx	lr

08005c82 <__ascii_mbtowc>:
 8005c82:	b082      	sub	sp, #8
 8005c84:	b901      	cbnz	r1, 8005c88 <__ascii_mbtowc+0x6>
 8005c86:	a901      	add	r1, sp, #4
 8005c88:	b142      	cbz	r2, 8005c9c <__ascii_mbtowc+0x1a>
 8005c8a:	b14b      	cbz	r3, 8005ca0 <__ascii_mbtowc+0x1e>
 8005c8c:	7813      	ldrb	r3, [r2, #0]
 8005c8e:	600b      	str	r3, [r1, #0]
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	1c10      	adds	r0, r2, #0
 8005c94:	bf18      	it	ne
 8005c96:	2001      	movne	r0, #1
 8005c98:	b002      	add	sp, #8
 8005c9a:	4770      	bx	lr
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	e7fb      	b.n	8005c98 <__ascii_mbtowc+0x16>
 8005ca0:	f06f 0001 	mvn.w	r0, #1
 8005ca4:	e7f8      	b.n	8005c98 <__ascii_mbtowc+0x16>

08005ca6 <__malloc_lock>:
 8005ca6:	4770      	bx	lr

08005ca8 <__malloc_unlock>:
 8005ca8:	4770      	bx	lr

08005caa <__ssputs_r>:
 8005caa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cae:	688e      	ldr	r6, [r1, #8]
 8005cb0:	429e      	cmp	r6, r3
 8005cb2:	4682      	mov	sl, r0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	4690      	mov	r8, r2
 8005cb8:	4699      	mov	r9, r3
 8005cba:	d837      	bhi.n	8005d2c <__ssputs_r+0x82>
 8005cbc:	898a      	ldrh	r2, [r1, #12]
 8005cbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cc2:	d031      	beq.n	8005d28 <__ssputs_r+0x7e>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	6909      	ldr	r1, [r1, #16]
 8005cc8:	1a6f      	subs	r7, r5, r1
 8005cca:	6965      	ldr	r5, [r4, #20]
 8005ccc:	2302      	movs	r3, #2
 8005cce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cd2:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cd6:	f109 0301 	add.w	r3, r9, #1
 8005cda:	443b      	add	r3, r7
 8005cdc:	429d      	cmp	r5, r3
 8005cde:	bf38      	it	cc
 8005ce0:	461d      	movcc	r5, r3
 8005ce2:	0553      	lsls	r3, r2, #21
 8005ce4:	d530      	bpl.n	8005d48 <__ssputs_r+0x9e>
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7ff feac 	bl	8005a44 <_malloc_r>
 8005cec:	4606      	mov	r6, r0
 8005cee:	b950      	cbnz	r0, 8005d06 <__ssputs_r+0x5c>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	f8ca 3000 	str.w	r3, [sl]
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d06:	463a      	mov	r2, r7
 8005d08:	6921      	ldr	r1, [r4, #16]
 8005d0a:	f000 fab6 	bl	800627a <memcpy>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	6126      	str	r6, [r4, #16]
 8005d1c:	6165      	str	r5, [r4, #20]
 8005d1e:	443e      	add	r6, r7
 8005d20:	1bed      	subs	r5, r5, r7
 8005d22:	6026      	str	r6, [r4, #0]
 8005d24:	60a5      	str	r5, [r4, #8]
 8005d26:	464e      	mov	r6, r9
 8005d28:	454e      	cmp	r6, r9
 8005d2a:	d900      	bls.n	8005d2e <__ssputs_r+0x84>
 8005d2c:	464e      	mov	r6, r9
 8005d2e:	4632      	mov	r2, r6
 8005d30:	4641      	mov	r1, r8
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	f000 faac 	bl	8006290 <memmove>
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	1b9b      	subs	r3, r3, r6
 8005d3c:	60a3      	str	r3, [r4, #8]
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	441e      	add	r6, r3
 8005d42:	6026      	str	r6, [r4, #0]
 8005d44:	2000      	movs	r0, #0
 8005d46:	e7dc      	b.n	8005d02 <__ssputs_r+0x58>
 8005d48:	462a      	mov	r2, r5
 8005d4a:	f000 faba 	bl	80062c2 <_realloc_r>
 8005d4e:	4606      	mov	r6, r0
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d1e2      	bne.n	8005d1a <__ssputs_r+0x70>
 8005d54:	6921      	ldr	r1, [r4, #16]
 8005d56:	4650      	mov	r0, sl
 8005d58:	f7ff fe26 	bl	80059a8 <_free_r>
 8005d5c:	e7c8      	b.n	8005cf0 <__ssputs_r+0x46>
	...

08005d60 <_svfiprintf_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	461d      	mov	r5, r3
 8005d66:	898b      	ldrh	r3, [r1, #12]
 8005d68:	061f      	lsls	r7, r3, #24
 8005d6a:	b09d      	sub	sp, #116	; 0x74
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4616      	mov	r6, r2
 8005d72:	d50f      	bpl.n	8005d94 <_svfiprintf_r+0x34>
 8005d74:	690b      	ldr	r3, [r1, #16]
 8005d76:	b96b      	cbnz	r3, 8005d94 <_svfiprintf_r+0x34>
 8005d78:	2140      	movs	r1, #64	; 0x40
 8005d7a:	f7ff fe63 	bl	8005a44 <_malloc_r>
 8005d7e:	6020      	str	r0, [r4, #0]
 8005d80:	6120      	str	r0, [r4, #16]
 8005d82:	b928      	cbnz	r0, 8005d90 <_svfiprintf_r+0x30>
 8005d84:	230c      	movs	r3, #12
 8005d86:	f8c8 3000 	str.w	r3, [r8]
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8e:	e0c8      	b.n	8005f22 <_svfiprintf_r+0x1c2>
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	6163      	str	r3, [r4, #20]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	2320      	movs	r3, #32
 8005d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d9e:	2330      	movs	r3, #48	; 0x30
 8005da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005da4:	9503      	str	r5, [sp, #12]
 8005da6:	f04f 0b01 	mov.w	fp, #1
 8005daa:	4637      	mov	r7, r6
 8005dac:	463d      	mov	r5, r7
 8005dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005db2:	b10b      	cbz	r3, 8005db8 <_svfiprintf_r+0x58>
 8005db4:	2b25      	cmp	r3, #37	; 0x25
 8005db6:	d13e      	bne.n	8005e36 <_svfiprintf_r+0xd6>
 8005db8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005dbc:	d00b      	beq.n	8005dd6 <_svfiprintf_r+0x76>
 8005dbe:	4653      	mov	r3, sl
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	f7ff ff70 	bl	8005caa <__ssputs_r>
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f000 80a4 	beq.w	8005f18 <_svfiprintf_r+0x1b8>
 8005dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd2:	4453      	add	r3, sl
 8005dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd6:	783b      	ldrb	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 809d 	beq.w	8005f18 <_svfiprintf_r+0x1b8>
 8005dde:	2300      	movs	r3, #0
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	9307      	str	r3, [sp, #28]
 8005dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005df0:	931a      	str	r3, [sp, #104]	; 0x68
 8005df2:	462f      	mov	r7, r5
 8005df4:	2205      	movs	r2, #5
 8005df6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dfa:	4850      	ldr	r0, [pc, #320]	; (8005f3c <_svfiprintf_r+0x1dc>)
 8005dfc:	f7fa fa00 	bl	8000200 <memchr>
 8005e00:	9b04      	ldr	r3, [sp, #16]
 8005e02:	b9d0      	cbnz	r0, 8005e3a <_svfiprintf_r+0xda>
 8005e04:	06d9      	lsls	r1, r3, #27
 8005e06:	bf44      	itt	mi
 8005e08:	2220      	movmi	r2, #32
 8005e0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e0e:	071a      	lsls	r2, r3, #28
 8005e10:	bf44      	itt	mi
 8005e12:	222b      	movmi	r2, #43	; 0x2b
 8005e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e18:	782a      	ldrb	r2, [r5, #0]
 8005e1a:	2a2a      	cmp	r2, #42	; 0x2a
 8005e1c:	d015      	beq.n	8005e4a <_svfiprintf_r+0xea>
 8005e1e:	9a07      	ldr	r2, [sp, #28]
 8005e20:	462f      	mov	r7, r5
 8005e22:	2000      	movs	r0, #0
 8005e24:	250a      	movs	r5, #10
 8005e26:	4639      	mov	r1, r7
 8005e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e2c:	3b30      	subs	r3, #48	; 0x30
 8005e2e:	2b09      	cmp	r3, #9
 8005e30:	d94d      	bls.n	8005ece <_svfiprintf_r+0x16e>
 8005e32:	b1b8      	cbz	r0, 8005e64 <_svfiprintf_r+0x104>
 8005e34:	e00f      	b.n	8005e56 <_svfiprintf_r+0xf6>
 8005e36:	462f      	mov	r7, r5
 8005e38:	e7b8      	b.n	8005dac <_svfiprintf_r+0x4c>
 8005e3a:	4a40      	ldr	r2, [pc, #256]	; (8005f3c <_svfiprintf_r+0x1dc>)
 8005e3c:	1a80      	subs	r0, r0, r2
 8005e3e:	fa0b f000 	lsl.w	r0, fp, r0
 8005e42:	4318      	orrs	r0, r3
 8005e44:	9004      	str	r0, [sp, #16]
 8005e46:	463d      	mov	r5, r7
 8005e48:	e7d3      	b.n	8005df2 <_svfiprintf_r+0x92>
 8005e4a:	9a03      	ldr	r2, [sp, #12]
 8005e4c:	1d11      	adds	r1, r2, #4
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	9103      	str	r1, [sp, #12]
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	db01      	blt.n	8005e5a <_svfiprintf_r+0xfa>
 8005e56:	9207      	str	r2, [sp, #28]
 8005e58:	e004      	b.n	8005e64 <_svfiprintf_r+0x104>
 8005e5a:	4252      	negs	r2, r2
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	9207      	str	r2, [sp, #28]
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	783b      	ldrb	r3, [r7, #0]
 8005e66:	2b2e      	cmp	r3, #46	; 0x2e
 8005e68:	d10c      	bne.n	8005e84 <_svfiprintf_r+0x124>
 8005e6a:	787b      	ldrb	r3, [r7, #1]
 8005e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6e:	d133      	bne.n	8005ed8 <_svfiprintf_r+0x178>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9203      	str	r2, [sp, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfb8      	it	lt
 8005e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e80:	3702      	adds	r7, #2
 8005e82:	9305      	str	r3, [sp, #20]
 8005e84:	4d2e      	ldr	r5, [pc, #184]	; (8005f40 <_svfiprintf_r+0x1e0>)
 8005e86:	7839      	ldrb	r1, [r7, #0]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f7fa f9b8 	bl	8000200 <memchr>
 8005e90:	b138      	cbz	r0, 8005ea2 <_svfiprintf_r+0x142>
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	1b40      	subs	r0, r0, r5
 8005e96:	fa03 f000 	lsl.w	r0, r3, r0
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	4303      	orrs	r3, r0
 8005e9e:	3701      	adds	r7, #1
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	7839      	ldrb	r1, [r7, #0]
 8005ea4:	4827      	ldr	r0, [pc, #156]	; (8005f44 <_svfiprintf_r+0x1e4>)
 8005ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eaa:	2206      	movs	r2, #6
 8005eac:	1c7e      	adds	r6, r7, #1
 8005eae:	f7fa f9a7 	bl	8000200 <memchr>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d038      	beq.n	8005f28 <_svfiprintf_r+0x1c8>
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <_svfiprintf_r+0x1e8>)
 8005eb8:	bb13      	cbnz	r3, 8005f00 <_svfiprintf_r+0x1a0>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	f023 0307 	bic.w	r3, r3, #7
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	9303      	str	r3, [sp, #12]
 8005ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec8:	444b      	add	r3, r9
 8005eca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ecc:	e76d      	b.n	8005daa <_svfiprintf_r+0x4a>
 8005ece:	fb05 3202 	mla	r2, r5, r2, r3
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	460f      	mov	r7, r1
 8005ed6:	e7a6      	b.n	8005e26 <_svfiprintf_r+0xc6>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	3701      	adds	r7, #1
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	250a      	movs	r5, #10
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee8:	3a30      	subs	r2, #48	; 0x30
 8005eea:	2a09      	cmp	r2, #9
 8005eec:	d903      	bls.n	8005ef6 <_svfiprintf_r+0x196>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0c8      	beq.n	8005e84 <_svfiprintf_r+0x124>
 8005ef2:	9105      	str	r1, [sp, #20]
 8005ef4:	e7c6      	b.n	8005e84 <_svfiprintf_r+0x124>
 8005ef6:	fb05 2101 	mla	r1, r5, r1, r2
 8005efa:	2301      	movs	r3, #1
 8005efc:	4607      	mov	r7, r0
 8005efe:	e7f0      	b.n	8005ee2 <_svfiprintf_r+0x182>
 8005f00:	ab03      	add	r3, sp, #12
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	4622      	mov	r2, r4
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <_svfiprintf_r+0x1ec>)
 8005f08:	a904      	add	r1, sp, #16
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f3af 8000 	nop.w
 8005f10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f14:	4681      	mov	r9, r0
 8005f16:	d1d6      	bne.n	8005ec6 <_svfiprintf_r+0x166>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	065b      	lsls	r3, r3, #25
 8005f1c:	f53f af35 	bmi.w	8005d8a <_svfiprintf_r+0x2a>
 8005f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f22:	b01d      	add	sp, #116	; 0x74
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f28:	ab03      	add	r3, sp, #12
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <_svfiprintf_r+0x1ec>)
 8005f30:	a904      	add	r1, sp, #16
 8005f32:	4640      	mov	r0, r8
 8005f34:	f000 f882 	bl	800603c <_printf_i>
 8005f38:	e7ea      	b.n	8005f10 <_svfiprintf_r+0x1b0>
 8005f3a:	bf00      	nop
 8005f3c:	080065be 	.word	0x080065be
 8005f40:	080065c4 	.word	0x080065c4
 8005f44:	080065c8 	.word	0x080065c8
 8005f48:	00000000 	.word	0x00000000
 8005f4c:	08005cab 	.word	0x08005cab

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4691      	mov	r9, r2
 8005f56:	461f      	mov	r7, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfb8      	it	lt
 8005f64:	4613      	movlt	r3, r2
 8005f66:	f8c9 3000 	str.w	r3, [r9]
 8005f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460c      	mov	r4, r1
 8005f72:	b112      	cbz	r2, 8005f7a <_printf_common+0x2a>
 8005f74:	3301      	adds	r3, #1
 8005f76:	f8c9 3000 	str.w	r3, [r9]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	0699      	lsls	r1, r3, #26
 8005f7e:	bf42      	ittt	mi
 8005f80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f84:	3302      	addmi	r3, #2
 8005f86:	f8c9 3000 	strmi.w	r3, [r9]
 8005f8a:	6825      	ldr	r5, [r4, #0]
 8005f8c:	f015 0506 	ands.w	r5, r5, #6
 8005f90:	d107      	bne.n	8005fa2 <_printf_common+0x52>
 8005f92:	f104 0a19 	add.w	sl, r4, #25
 8005f96:	68e3      	ldr	r3, [r4, #12]
 8005f98:	f8d9 2000 	ldr.w	r2, [r9]
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	42ab      	cmp	r3, r5
 8005fa0:	dc28      	bgt.n	8005ff4 <_printf_common+0xa4>
 8005fa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	3300      	adds	r3, #0
 8005faa:	bf18      	it	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	0692      	lsls	r2, r2, #26
 8005fb0:	d42d      	bmi.n	800600e <_printf_common+0xbe>
 8005fb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	4630      	mov	r0, r6
 8005fba:	47c0      	blx	r8
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d020      	beq.n	8006002 <_printf_common+0xb2>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	68e5      	ldr	r5, [r4, #12]
 8005fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fc8:	f003 0306 	and.w	r3, r3, #6
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	bf08      	it	eq
 8005fd0:	1aad      	subeq	r5, r5, r2
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	bf0c      	ite	eq
 8005fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fdc:	2500      	movne	r5, #0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bfc4      	itt	gt
 8005fe2:	1a9b      	subgt	r3, r3, r2
 8005fe4:	18ed      	addgt	r5, r5, r3
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	341a      	adds	r4, #26
 8005fec:	454d      	cmp	r5, r9
 8005fee:	d11a      	bne.n	8006026 <_printf_common+0xd6>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e008      	b.n	8006006 <_printf_common+0xb6>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	47c0      	blx	r8
 8005ffe:	3001      	adds	r0, #1
 8006000:	d103      	bne.n	800600a <_printf_common+0xba>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600a:	3501      	adds	r5, #1
 800600c:	e7c3      	b.n	8005f96 <_printf_common+0x46>
 800600e:	18e1      	adds	r1, r4, r3
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	2030      	movs	r0, #48	; 0x30
 8006014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006018:	4422      	add	r2, r4
 800601a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006022:	3302      	adds	r3, #2
 8006024:	e7c5      	b.n	8005fb2 <_printf_common+0x62>
 8006026:	2301      	movs	r3, #1
 8006028:	4622      	mov	r2, r4
 800602a:	4639      	mov	r1, r7
 800602c:	4630      	mov	r0, r6
 800602e:	47c0      	blx	r8
 8006030:	3001      	adds	r0, #1
 8006032:	d0e6      	beq.n	8006002 <_printf_common+0xb2>
 8006034:	f109 0901 	add.w	r9, r9, #1
 8006038:	e7d8      	b.n	8005fec <_printf_common+0x9c>
	...

0800603c <_printf_i>:
 800603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006040:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006044:	460c      	mov	r4, r1
 8006046:	7e09      	ldrb	r1, [r1, #24]
 8006048:	b085      	sub	sp, #20
 800604a:	296e      	cmp	r1, #110	; 0x6e
 800604c:	4617      	mov	r7, r2
 800604e:	4606      	mov	r6, r0
 8006050:	4698      	mov	r8, r3
 8006052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006054:	f000 80b3 	beq.w	80061be <_printf_i+0x182>
 8006058:	d822      	bhi.n	80060a0 <_printf_i+0x64>
 800605a:	2963      	cmp	r1, #99	; 0x63
 800605c:	d036      	beq.n	80060cc <_printf_i+0x90>
 800605e:	d80a      	bhi.n	8006076 <_printf_i+0x3a>
 8006060:	2900      	cmp	r1, #0
 8006062:	f000 80b9 	beq.w	80061d8 <_printf_i+0x19c>
 8006066:	2958      	cmp	r1, #88	; 0x58
 8006068:	f000 8083 	beq.w	8006172 <_printf_i+0x136>
 800606c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006070:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006074:	e032      	b.n	80060dc <_printf_i+0xa0>
 8006076:	2964      	cmp	r1, #100	; 0x64
 8006078:	d001      	beq.n	800607e <_printf_i+0x42>
 800607a:	2969      	cmp	r1, #105	; 0x69
 800607c:	d1f6      	bne.n	800606c <_printf_i+0x30>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	0605      	lsls	r5, r0, #24
 8006084:	f103 0104 	add.w	r1, r3, #4
 8006088:	d52a      	bpl.n	80060e0 <_printf_i+0xa4>
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	da03      	bge.n	800609a <_printf_i+0x5e>
 8006092:	222d      	movs	r2, #45	; 0x2d
 8006094:	425b      	negs	r3, r3
 8006096:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800609a:	486f      	ldr	r0, [pc, #444]	; (8006258 <_printf_i+0x21c>)
 800609c:	220a      	movs	r2, #10
 800609e:	e039      	b.n	8006114 <_printf_i+0xd8>
 80060a0:	2973      	cmp	r1, #115	; 0x73
 80060a2:	f000 809d 	beq.w	80061e0 <_printf_i+0x1a4>
 80060a6:	d808      	bhi.n	80060ba <_printf_i+0x7e>
 80060a8:	296f      	cmp	r1, #111	; 0x6f
 80060aa:	d020      	beq.n	80060ee <_printf_i+0xb2>
 80060ac:	2970      	cmp	r1, #112	; 0x70
 80060ae:	d1dd      	bne.n	800606c <_printf_i+0x30>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	f043 0320 	orr.w	r3, r3, #32
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	e003      	b.n	80060c2 <_printf_i+0x86>
 80060ba:	2975      	cmp	r1, #117	; 0x75
 80060bc:	d017      	beq.n	80060ee <_printf_i+0xb2>
 80060be:	2978      	cmp	r1, #120	; 0x78
 80060c0:	d1d4      	bne.n	800606c <_printf_i+0x30>
 80060c2:	2378      	movs	r3, #120	; 0x78
 80060c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060c8:	4864      	ldr	r0, [pc, #400]	; (800625c <_printf_i+0x220>)
 80060ca:	e055      	b.n	8006178 <_printf_i+0x13c>
 80060cc:	6813      	ldr	r3, [r2, #0]
 80060ce:	1d19      	adds	r1, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6011      	str	r1, [r2, #0]
 80060d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060dc:	2301      	movs	r3, #1
 80060de:	e08c      	b.n	80061fa <_printf_i+0x1be>
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6011      	str	r1, [r2, #0]
 80060e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060e8:	bf18      	it	ne
 80060ea:	b21b      	sxthne	r3, r3
 80060ec:	e7cf      	b.n	800608e <_printf_i+0x52>
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	1d18      	adds	r0, r3, #4
 80060f4:	6010      	str	r0, [r2, #0]
 80060f6:	0628      	lsls	r0, r5, #24
 80060f8:	d501      	bpl.n	80060fe <_printf_i+0xc2>
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	e002      	b.n	8006104 <_printf_i+0xc8>
 80060fe:	0668      	lsls	r0, r5, #25
 8006100:	d5fb      	bpl.n	80060fa <_printf_i+0xbe>
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	4854      	ldr	r0, [pc, #336]	; (8006258 <_printf_i+0x21c>)
 8006106:	296f      	cmp	r1, #111	; 0x6f
 8006108:	bf14      	ite	ne
 800610a:	220a      	movne	r2, #10
 800610c:	2208      	moveq	r2, #8
 800610e:	2100      	movs	r1, #0
 8006110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006114:	6865      	ldr	r5, [r4, #4]
 8006116:	60a5      	str	r5, [r4, #8]
 8006118:	2d00      	cmp	r5, #0
 800611a:	f2c0 8095 	blt.w	8006248 <_printf_i+0x20c>
 800611e:	6821      	ldr	r1, [r4, #0]
 8006120:	f021 0104 	bic.w	r1, r1, #4
 8006124:	6021      	str	r1, [r4, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d13d      	bne.n	80061a6 <_printf_i+0x16a>
 800612a:	2d00      	cmp	r5, #0
 800612c:	f040 808e 	bne.w	800624c <_printf_i+0x210>
 8006130:	4665      	mov	r5, ip
 8006132:	2a08      	cmp	r2, #8
 8006134:	d10b      	bne.n	800614e <_printf_i+0x112>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	07db      	lsls	r3, r3, #31
 800613a:	d508      	bpl.n	800614e <_printf_i+0x112>
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	6862      	ldr	r2, [r4, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	bfde      	ittt	le
 8006144:	2330      	movle	r3, #48	; 0x30
 8006146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800614a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800614e:	ebac 0305 	sub.w	r3, ip, r5
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	f8cd 8000 	str.w	r8, [sp]
 8006158:	463b      	mov	r3, r7
 800615a:	aa03      	add	r2, sp, #12
 800615c:	4621      	mov	r1, r4
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff fef6 	bl	8005f50 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	d14d      	bne.n	8006204 <_printf_i+0x1c8>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	b005      	add	sp, #20
 800616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006172:	4839      	ldr	r0, [pc, #228]	; (8006258 <_printf_i+0x21c>)
 8006174:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	1d1d      	adds	r5, r3, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6015      	str	r5, [r2, #0]
 8006182:	060a      	lsls	r2, r1, #24
 8006184:	d50b      	bpl.n	800619e <_printf_i+0x162>
 8006186:	07ca      	lsls	r2, r1, #31
 8006188:	bf44      	itt	mi
 800618a:	f041 0120 	orrmi.w	r1, r1, #32
 800618e:	6021      	strmi	r1, [r4, #0]
 8006190:	b91b      	cbnz	r3, 800619a <_printf_i+0x15e>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	f022 0220 	bic.w	r2, r2, #32
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	2210      	movs	r2, #16
 800619c:	e7b7      	b.n	800610e <_printf_i+0xd2>
 800619e:	064d      	lsls	r5, r1, #25
 80061a0:	bf48      	it	mi
 80061a2:	b29b      	uxthmi	r3, r3
 80061a4:	e7ef      	b.n	8006186 <_printf_i+0x14a>
 80061a6:	4665      	mov	r5, ip
 80061a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061ac:	fb02 3311 	mls	r3, r2, r1, r3
 80061b0:	5cc3      	ldrb	r3, [r0, r3]
 80061b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061b6:	460b      	mov	r3, r1
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d1f5      	bne.n	80061a8 <_printf_i+0x16c>
 80061bc:	e7b9      	b.n	8006132 <_printf_i+0xf6>
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	6961      	ldr	r1, [r4, #20]
 80061c4:	1d18      	adds	r0, r3, #4
 80061c6:	6010      	str	r0, [r2, #0]
 80061c8:	0628      	lsls	r0, r5, #24
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	d501      	bpl.n	80061d2 <_printf_i+0x196>
 80061ce:	6019      	str	r1, [r3, #0]
 80061d0:	e002      	b.n	80061d8 <_printf_i+0x19c>
 80061d2:	066a      	lsls	r2, r5, #25
 80061d4:	d5fb      	bpl.n	80061ce <_printf_i+0x192>
 80061d6:	8019      	strh	r1, [r3, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	4665      	mov	r5, ip
 80061de:	e7b9      	b.n	8006154 <_printf_i+0x118>
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	1d19      	adds	r1, r3, #4
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	681d      	ldr	r5, [r3, #0]
 80061e8:	6862      	ldr	r2, [r4, #4]
 80061ea:	2100      	movs	r1, #0
 80061ec:	4628      	mov	r0, r5
 80061ee:	f7fa f807 	bl	8000200 <memchr>
 80061f2:	b108      	cbz	r0, 80061f8 <_printf_i+0x1bc>
 80061f4:	1b40      	subs	r0, r0, r5
 80061f6:	6060      	str	r0, [r4, #4]
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	2300      	movs	r3, #0
 80061fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006202:	e7a7      	b.n	8006154 <_printf_i+0x118>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	462a      	mov	r2, r5
 8006208:	4639      	mov	r1, r7
 800620a:	4630      	mov	r0, r6
 800620c:	47c0      	blx	r8
 800620e:	3001      	adds	r0, #1
 8006210:	d0aa      	beq.n	8006168 <_printf_i+0x12c>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	079b      	lsls	r3, r3, #30
 8006216:	d413      	bmi.n	8006240 <_printf_i+0x204>
 8006218:	68e0      	ldr	r0, [r4, #12]
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	4298      	cmp	r0, r3
 800621e:	bfb8      	it	lt
 8006220:	4618      	movlt	r0, r3
 8006222:	e7a3      	b.n	800616c <_printf_i+0x130>
 8006224:	2301      	movs	r3, #1
 8006226:	464a      	mov	r2, r9
 8006228:	4639      	mov	r1, r7
 800622a:	4630      	mov	r0, r6
 800622c:	47c0      	blx	r8
 800622e:	3001      	adds	r0, #1
 8006230:	d09a      	beq.n	8006168 <_printf_i+0x12c>
 8006232:	3501      	adds	r5, #1
 8006234:	68e3      	ldr	r3, [r4, #12]
 8006236:	9a03      	ldr	r2, [sp, #12]
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	42ab      	cmp	r3, r5
 800623c:	dcf2      	bgt.n	8006224 <_printf_i+0x1e8>
 800623e:	e7eb      	b.n	8006218 <_printf_i+0x1dc>
 8006240:	2500      	movs	r5, #0
 8006242:	f104 0919 	add.w	r9, r4, #25
 8006246:	e7f5      	b.n	8006234 <_printf_i+0x1f8>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ac      	bne.n	80061a6 <_printf_i+0x16a>
 800624c:	7803      	ldrb	r3, [r0, #0]
 800624e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006256:	e76c      	b.n	8006132 <_printf_i+0xf6>
 8006258:	080065cf 	.word	0x080065cf
 800625c:	080065e0 	.word	0x080065e0

08006260 <__ascii_wctomb>:
 8006260:	b149      	cbz	r1, 8006276 <__ascii_wctomb+0x16>
 8006262:	2aff      	cmp	r2, #255	; 0xff
 8006264:	bf85      	ittet	hi
 8006266:	238a      	movhi	r3, #138	; 0x8a
 8006268:	6003      	strhi	r3, [r0, #0]
 800626a:	700a      	strbls	r2, [r1, #0]
 800626c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006270:	bf98      	it	ls
 8006272:	2001      	movls	r0, #1
 8006274:	4770      	bx	lr
 8006276:	4608      	mov	r0, r1
 8006278:	4770      	bx	lr

0800627a <memcpy>:
 800627a:	b510      	push	{r4, lr}
 800627c:	1e43      	subs	r3, r0, #1
 800627e:	440a      	add	r2, r1
 8006280:	4291      	cmp	r1, r2
 8006282:	d100      	bne.n	8006286 <memcpy+0xc>
 8006284:	bd10      	pop	{r4, pc}
 8006286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800628e:	e7f7      	b.n	8006280 <memcpy+0x6>

08006290 <memmove>:
 8006290:	4288      	cmp	r0, r1
 8006292:	b510      	push	{r4, lr}
 8006294:	eb01 0302 	add.w	r3, r1, r2
 8006298:	d807      	bhi.n	80062aa <memmove+0x1a>
 800629a:	1e42      	subs	r2, r0, #1
 800629c:	4299      	cmp	r1, r3
 800629e:	d00a      	beq.n	80062b6 <memmove+0x26>
 80062a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062a8:	e7f8      	b.n	800629c <memmove+0xc>
 80062aa:	4283      	cmp	r3, r0
 80062ac:	d9f5      	bls.n	800629a <memmove+0xa>
 80062ae:	1881      	adds	r1, r0, r2
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	42d3      	cmn	r3, r2
 80062b4:	d100      	bne.n	80062b8 <memmove+0x28>
 80062b6:	bd10      	pop	{r4, pc}
 80062b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062c0:	e7f7      	b.n	80062b2 <memmove+0x22>

080062c2 <_realloc_r>:
 80062c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c4:	4607      	mov	r7, r0
 80062c6:	4614      	mov	r4, r2
 80062c8:	460e      	mov	r6, r1
 80062ca:	b921      	cbnz	r1, 80062d6 <_realloc_r+0x14>
 80062cc:	4611      	mov	r1, r2
 80062ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062d2:	f7ff bbb7 	b.w	8005a44 <_malloc_r>
 80062d6:	b922      	cbnz	r2, 80062e2 <_realloc_r+0x20>
 80062d8:	f7ff fb66 	bl	80059a8 <_free_r>
 80062dc:	4625      	mov	r5, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e2:	f000 f814 	bl	800630e <_malloc_usable_size_r>
 80062e6:	42a0      	cmp	r0, r4
 80062e8:	d20f      	bcs.n	800630a <_realloc_r+0x48>
 80062ea:	4621      	mov	r1, r4
 80062ec:	4638      	mov	r0, r7
 80062ee:	f7ff fba9 	bl	8005a44 <_malloc_r>
 80062f2:	4605      	mov	r5, r0
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0f2      	beq.n	80062de <_realloc_r+0x1c>
 80062f8:	4631      	mov	r1, r6
 80062fa:	4622      	mov	r2, r4
 80062fc:	f7ff ffbd 	bl	800627a <memcpy>
 8006300:	4631      	mov	r1, r6
 8006302:	4638      	mov	r0, r7
 8006304:	f7ff fb50 	bl	80059a8 <_free_r>
 8006308:	e7e9      	b.n	80062de <_realloc_r+0x1c>
 800630a:	4635      	mov	r5, r6
 800630c:	e7e7      	b.n	80062de <_realloc_r+0x1c>

0800630e <_malloc_usable_size_r>:
 800630e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006312:	1f18      	subs	r0, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfbc      	itt	lt
 8006318:	580b      	ldrlt	r3, [r1, r0]
 800631a:	18c0      	addlt	r0, r0, r3
 800631c:	4770      	bx	lr
	...

08006320 <_init>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	bf00      	nop
 8006324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006326:	bc08      	pop	{r3}
 8006328:	469e      	mov	lr, r3
 800632a:	4770      	bx	lr

0800632c <_fini>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	bf00      	nop
 8006330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006332:	bc08      	pop	{r3}
 8006334:	469e      	mov	lr, r3
 8006336:	4770      	bx	lr
