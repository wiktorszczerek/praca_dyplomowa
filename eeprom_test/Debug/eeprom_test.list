
eeprom_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004254  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004590  08004590  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08004608  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004608  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da3d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9d  00000000  00000000  0002dadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002f780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020538  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c7b  00000000  00000000  00051400  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c22a6  00000000  00000000  0005b07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c8  00000000  00000000  0011d39c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043cc 	.word	0x080043cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080043cc 	.word	0x080043cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0ae      	sub	sp, #184	; 0xb8
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fc9a 	bl	8000ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f83b 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f92d 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8fb 	bl	800078c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000596:	f000 f8b9 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  struct sensor_info sensor;
  create_sensor_info(&sensor);
 800059a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f98a 	bl	80008b8 <create_sensor_info>

  //zero_eeprom_useful_mem();

  write_sensor_info_to_eeprom(&sensor);
 80005a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fa91 	bl	8000ad0 <write_sensor_info_to_eeprom>
  HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 fcf9 	bl	8000fa8 <HAL_Delay>
  uint8_t res[128];
  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00, 1, res, 128*sizeof(uint8_t), 128);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2200      	movs	r2, #0
 80005c8:	21a0      	movs	r1, #160	; 0xa0
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x7c>)
 80005cc:	f001 f91a 	bl	8001804 <HAL_I2C_Mem_Read>
  HAL_UART_Transmit(&huart2, res, 128*sizeof(uint8_t), 128);
 80005d0:	f107 0108 	add.w	r1, r7, #8
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x80>)
 80005da:	f002 feb9 	bl	8003350 <HAL_UART_Transmit>
  char msg[2] = "\n\r";
 80005de:	f640 530a 	movw	r3, #3338	; 0xd0a
 80005e2:	80bb      	strh	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 2);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	2302      	movs	r3, #2
 80005e8:	2202      	movs	r2, #2
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <main+0x80>)
 80005ec:	f002 feb0 	bl	8003350 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f4:	f000 fcd8 	bl	8000fa8 <HAL_Delay>
 80005f8:	e7fa      	b.n	80005f0 <main+0x70>
 80005fa:	bf00      	nop
 80005fc:	20000098 	.word	0x20000098
 8000600:	200000e4 	.word	0x200000e4

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0ac      	sub	sp, #176	; 0xb0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 facc 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2254      	movs	r2, #84	; 0x54
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fabe 	bl	8003bb0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fcb4 	bl	8001fa0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <SystemClock_Config+0x104>)
 800063a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063e:	4a32      	ldr	r2, [pc, #200]	; (8000708 <SystemClock_Config+0x104>)
 8000640:	f023 0318 	bic.w	r3, r3, #24
 8000644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000648:	2314      	movs	r3, #20
 800064a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800065c:	2360      	movs	r3, #96	; 0x60
 800065e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067a:	2307      	movs	r3, #7
 800067c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fcf9 	bl	8002088 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800069c:	f000 fa88 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2303      	movs	r3, #3
 80006a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 f904 	bl	80028c8 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c6:	f000 fa73 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80006ca:	2342      	movs	r3, #66	; 0x42
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 faf9 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006e4:	f000 fa64 	bl	8000bb0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ec:	f001 fc76 	bl	8001fdc <HAL_PWREx_ControlVoltageScaling>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006f6:	f000 fa5b 	bl	8000bb0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006fa:	f002 fcdb 	bl	80030b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006fe:	bf00      	nop
 8000700:	37b0      	adds	r7, #176	; 0xb0
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_I2C1_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_I2C1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007088FF;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_I2C1_Init+0x74>)
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <MX_I2C1_Init+0x7c>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_I2C1_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <MX_I2C1_Init+0x74>)
 8000748:	f000 feb8 	bl	80014bc <HAL_I2C_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000752:	f000 fa2d 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <MX_I2C1_Init+0x74>)
 800075a:	f001 fb89 	bl	8001e70 <HAL_I2CEx_ConfigAnalogFilter>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000764:	f000 fa24 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_I2C1_Init+0x74>)
 800076c:	f001 fbcb 	bl	8001f06 <HAL_I2CEx_ConfigDigitalFilter>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fa1b 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000098 	.word	0x20000098
 8000784:	40005400 	.word	0x40005400
 8000788:	007088ff 	.word	0x007088ff

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	f002 fd70 	bl	80032b4 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f9e9 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000e4 	.word	0x200000e4
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_GPIO_Init+0x8c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0x90>)
 8000850:	f000 fe1c 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000854:	2308      	movs	r3, #8
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0x90>)
 800086c:	f000 fca4 	bl	80011b8 <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400

08000880 <format_to_hex>:

/* USER CODE BEGIN 4 */
void format_to_hex(uint16_t what, uint8_t num_of_signs, char* result)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	603a      	str	r2, [r7, #0]
 800088a:	80fb      	strh	r3, [r7, #6]
 800088c:	460b      	mov	r3, r1
 800088e:	717b      	strb	r3, [r7, #5]
	char flag[SIZE_OF_SPRINTF_FLAG];
	sprintf(flag,"%%0%1dx",num_of_signs);
 8000890:	797a      	ldrb	r2, [r7, #5]
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4907      	ldr	r1, [pc, #28]	; (80008b4 <format_to_hex+0x34>)
 8000898:	4618      	mov	r0, r3
 800089a:	f003 f991 	bl	8003bc0 <siprintf>
	sprintf(result,flag,what);
 800089e:	88fa      	ldrh	r2, [r7, #6]
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4619      	mov	r1, r3
 80008a6:	6838      	ldr	r0, [r7, #0]
 80008a8:	f003 f98a 	bl	8003bc0 <siprintf>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	080043e4 	.word	0x080043e4

080008b8 <create_sensor_info>:

void create_sensor_info(struct sensor_info* si)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	format_to_hex(VERSION_NUM, ONE_HEX_BYTE, si->version_num);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	461a      	mov	r2, r3
 80008c4:	2102      	movs	r1, #2
 80008c6:	2002      	movs	r0, #2
 80008c8:	f7ff ffda 	bl	8000880 <format_to_hex>
	format_to_hex(SENSOR_ID, ONE_HEX_BYTE, si->sensor_id);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3303      	adds	r3, #3
 80008d0:	461a      	mov	r2, r3
 80008d2:	2102      	movs	r1, #2
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ffd3 	bl	8000880 <format_to_hex>
	SENSOR_TYPES states_holder = SENSOR_TYPE;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
	format_to_hex((uint8_t)states_holder, ONE_HEX_BYTE, si->sensor_type);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	b298      	uxth	r0, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3306      	adds	r3, #6
 80008e6:	461a      	mov	r2, r3
 80008e8:	2102      	movs	r1, #2
 80008ea:	f7ff ffc9 	bl	8000880 <format_to_hex>
	format_to_hex(CURRENT_PER_PPM_COEFFICIENT_DEC, ONE_HEX_BYTE, si->current_per_ppm_coefficient_dec);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3309      	adds	r3, #9
 80008f2:	461a      	mov	r2, r3
 80008f4:	2102      	movs	r1, #2
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ffc2 	bl	8000880 <format_to_hex>
	format_to_hex(CURRENT_PER_PPM_COEFFICIENT_FRAC, ONE_HEX_BYTE+1,si->current_per_ppm_coefficient_frac);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	330c      	adds	r3, #12
 8000900:	461a      	mov	r2, r3
 8000902:	2103      	movs	r1, #3
 8000904:	f44f 7014 	mov.w	r0, #592	; 0x250
 8000908:	f7ff ffba 	bl	8000880 <format_to_hex>
	format_to_hex(THRESHOLD, ONE_HEX_BYTE+1,si->threshold);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3310      	adds	r3, #16
 8000910:	461a      	mov	r2, r3
 8000912:	2103      	movs	r1, #3
 8000914:	f240 509a 	movw	r0, #1434	; 0x59a
 8000918:	f7ff ffb2 	bl	8000880 <format_to_hex>
	format_to_hex(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER, 2*ONE_HEX_BYTE,si->device_turned_on_with_sensor_counter);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3314      	adds	r3, #20
 8000920:	461a      	mov	r2, r3
 8000922:	2104      	movs	r1, #4
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff ffab 	bl	8000880 <format_to_hex>
	format_to_hex(SENSOR_FIRED_COUNTER, 3*ONE_HEX_BYTE,si->sensor_fired_counter);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3319      	adds	r3, #25
 800092e:	461a      	mov	r2, r3
 8000930:	2106      	movs	r1, #6
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ffa4 	bl	8000880 <format_to_hex>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <send_to_eeprom_byte_by_byte>:

void send_to_eeprom_byte_by_byte(uint16_t where, char* what)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b09d      	sub	sp, #116	; 0x74
 8000944:	af04      	add	r7, sp, #16
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	80fb      	strh	r3, [r7, #6]
	char msg[80];
	for(uint16_t i = 0; i<strlen(what); ++i)
 800094c:	2300      	movs	r3, #0
 800094e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000952:	e02f      	b.n	80009b4 <send_to_eeprom_byte_by_byte+0x74>
	{
//		HAL_UART_Transmit(&huart2, (uint8_t*)"loop_in_sending_byte_by_byte\n", 29, HAL_MAX_DELAY);
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, where+i, 1, (uint8_t*)(&(what[i])), sizeof(what[i]), HAL_MAX_DELAY)!=HAL_OK)
 8000954:	88fa      	ldrh	r2, [r7, #6]
 8000956:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800095a:	4413      	add	r3, r2
 800095c:	b299      	uxth	r1, r3
 800095e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	f04f 32ff 	mov.w	r2, #4294967295
 800096a:	9202      	str	r2, [sp, #8]
 800096c:	2201      	movs	r2, #1
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	460a      	mov	r2, r1
 8000976:	21a0      	movs	r1, #160	; 0xa0
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <send_to_eeprom_byte_by_byte+0x8c>)
 800097a:	f000 fe2f 	bl	80015dc <HAL_I2C_Mem_Write>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00e      	beq.n	80009a2 <send_to_eeprom_byte_by_byte+0x62>
		{
			sprintf(msg,"WRITE OPERATION FAILED at %d index byte in %s.\r\n", i, what);
 8000984:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000988:	f107 000c 	add.w	r0, r7, #12
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	4910      	ldr	r1, [pc, #64]	; (80009d0 <send_to_eeprom_byte_by_byte+0x90>)
 8000990:	f003 f916 	bl	8003bc0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);
 8000994:	f107 010c 	add.w	r1, r7, #12
 8000998:	230a      	movs	r3, #10
 800099a:	2250      	movs	r2, #80	; 0x50
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <send_to_eeprom_byte_by_byte+0x94>)
 800099e:	f002 fcd7 	bl	8003350 <HAL_UART_Transmit>
		}
		HAL_Delay(500);
 80009a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a6:	f000 faff 	bl	8000fa8 <HAL_Delay>
	for(uint16_t i = 0; i<strlen(what); ++i)
 80009aa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80009ae:	3301      	adds	r3, #1
 80009b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80009b4:	f8b7 405e 	ldrh.w	r4, [r7, #94]	; 0x5e
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f7ff fc09 	bl	80001d0 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	429c      	cmp	r4, r3
 80009c2:	d3c7      	bcc.n	8000954 <send_to_eeprom_byte_by_byte+0x14>
	}
}
 80009c4:	bf00      	nop
 80009c6:	3764      	adds	r7, #100	; 0x64
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	20000098 	.word	0x20000098
 80009d0:	080043ec 	.word	0x080043ec
 80009d4:	200000e4 	.word	0x200000e4

080009d8 <send_to_eeprom_begin_and_end_markers>:

void send_to_eeprom_begin_and_end_markers()
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b09a      	sub	sp, #104	; 0x68
 80009dc:	af04      	add	r7, sp, #16
	char begin = EEPROM_DATA_START, end = EEPROM_DATA_END;
 80009de:	233c      	movs	r3, #60	; 0x3c
 80009e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80009e4:	233e      	movs	r3, #62	; 0x3e
 80009e6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	char msg[80];
	HAL_UART_Transmit(&huart2, (uint8_t*)"markers start\n\r", 15, 10);
 80009ea:	230a      	movs	r3, #10
 80009ec:	220f      	movs	r2, #15
 80009ee:	4931      	ldr	r1, [pc, #196]	; (8000ab4 <send_to_eeprom_begin_and_end_markers+0xdc>)
 80009f0:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <send_to_eeprom_begin_and_end_markers+0xe0>)
 80009f2:	f002 fcad 	bl	8003350 <HAL_UART_Transmit>
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_DATA_START_ADDR, 1, (uint8_t*)&begin, sizeof(begin), HAL_MAX_DELAY)!=HAL_OK)
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2301      	movs	r3, #1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	21a0      	movs	r1, #160	; 0xa0
 8000a0c:	482b      	ldr	r0, [pc, #172]	; (8000abc <send_to_eeprom_begin_and_end_markers+0xe4>)
 8000a0e:	f000 fde5 	bl	80015dc <HAL_I2C_Mem_Write>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d011      	beq.n	8000a3c <send_to_eeprom_begin_and_end_markers+0x64>
	{
		sprintf(msg,"WRITE OPERATION FAILED at start eeprom data");
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4a29      	ldr	r2, [pc, #164]	; (8000ac0 <send_to_eeprom_begin_and_end_markers+0xe8>)
 8000a1c:	461c      	mov	r4, r3
 8000a1e:	4615      	mov	r5, r2
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);
 8000a30:	1d39      	adds	r1, r7, #4
 8000a32:	230a      	movs	r3, #10
 8000a34:	2250      	movs	r2, #80	; 0x50
 8000a36:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <send_to_eeprom_begin_and_end_markers+0xe0>)
 8000a38:	f002 fc8a 	bl	8003350 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"markers second\n\r", 16, 10);
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	2210      	movs	r2, #16
 8000a40:	4920      	ldr	r1, [pc, #128]	; (8000ac4 <send_to_eeprom_begin_and_end_markers+0xec>)
 8000a42:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <send_to_eeprom_begin_and_end_markers+0xe0>)
 8000a44:	f002 fc84 	bl	8003350 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4c:	f000 faac 	bl	8000fa8 <HAL_Delay>

	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_DATA_END_ADDR, 1, (uint8_t*)&end, sizeof(end), HAL_MAX_DELAY)!=HAL_OK)
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	2219      	movs	r2, #25
 8000a64:	21a0      	movs	r1, #160	; 0xa0
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <send_to_eeprom_begin_and_end_markers+0xe4>)
 8000a68:	f000 fdb8 	bl	80015dc <HAL_I2C_Mem_Write>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d011      	beq.n	8000a96 <send_to_eeprom_begin_and_end_markers+0xbe>
	{
		sprintf(msg,"WRITE OPERATION FAILED at end eeprom data");
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <send_to_eeprom_begin_and_end_markers+0xf0>)
 8000a76:	461c      	mov	r4, r3
 8000a78:	4615      	mov	r5, r2
 8000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a86:	c403      	stmia	r4!, {r0, r1}
 8000a88:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 10);
 8000a8a:	1d39      	adds	r1, r7, #4
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	2250      	movs	r2, #80	; 0x50
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <send_to_eeprom_begin_and_end_markers+0xe0>)
 8000a92:	f002 fc5d 	bl	8003350 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"markers end\n\r", 13, 10);
 8000a96:	230a      	movs	r3, #10
 8000a98:	220d      	movs	r2, #13
 8000a9a:	490c      	ldr	r1, [pc, #48]	; (8000acc <send_to_eeprom_begin_and_end_markers+0xf4>)
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <send_to_eeprom_begin_and_end_markers+0xe0>)
 8000a9e:	f002 fc57 	bl	8003350 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f000 fa7f 	bl	8000fa8 <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	3758      	adds	r7, #88	; 0x58
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	08004420 	.word	0x08004420
 8000ab8:	200000e4 	.word	0x200000e4
 8000abc:	20000098 	.word	0x20000098
 8000ac0:	08004430 	.word	0x08004430
 8000ac4:	0800445c 	.word	0x0800445c
 8000ac8:	08004470 	.word	0x08004470
 8000acc:	0800449c 	.word	0x0800449c

08000ad0 <write_sensor_info_to_eeprom>:

void write_sensor_info_to_eeprom(struct sensor_info* si)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b096      	sub	sp, #88	; 0x58
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	char msg_write[80];
	sprintf(msg_write,"Sending data to EEPROM...\n\r");
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <write_sensor_info_to_eeprom+0xd4>)
 8000ade:	461c      	mov	r4, r3
 8000ae0:	4615      	mov	r5, r2
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_write, strlen(msg_write), 10);
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fb6c 	bl	80001d0 <strlen>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	f107 0108 	add.w	r1, r7, #8
 8000b00:	230a      	movs	r3, #10
 8000b02:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <write_sensor_info_to_eeprom+0xd8>)
 8000b04:	f002 fc24 	bl	8003350 <HAL_UART_Transmit>
	send_to_eeprom_begin_and_end_markers();
 8000b08:	f7ff ff66 	bl	80009d8 <send_to_eeprom_begin_and_end_markers>
	send_to_eeprom_byte_by_byte(VERSION_NUM_ADDR, si->version_num);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff ff15 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(SENSOR_ID_ADDR, si->sensor_id);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3303      	adds	r3, #3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f7ff ff0f 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(SENSOR_TYPE_ADDR, si->sensor_type);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3306      	adds	r3, #6
 8000b26:	4619      	mov	r1, r3
 8000b28:	2005      	movs	r0, #5
 8000b2a:	f7ff ff09 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_DEC_ADDR, si->current_per_ppm_coefficient_dec);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3309      	adds	r3, #9
 8000b32:	4619      	mov	r1, r3
 8000b34:	2007      	movs	r0, #7
 8000b36:	f7ff ff03 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(CURRENT_PER_PPM_COEFFICIENT_FRAC_ADDR, si->current_per_ppm_coefficient_frac);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	330c      	adds	r3, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2009      	movs	r0, #9
 8000b42:	f7ff fefd 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(THRESHOLD_ADDR, si->threshold);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3310      	adds	r3, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	200c      	movs	r0, #12
 8000b4e:	f7ff fef7 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(DEVICE_TURNED_ON_WITH_SENSOR_COUNTER_ADDR, si->device_turned_on_with_sensor_counter);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3314      	adds	r3, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	200f      	movs	r0, #15
 8000b5a:	f7ff fef1 	bl	8000940 <send_to_eeprom_byte_by_byte>
	send_to_eeprom_byte_by_byte(SENSOR_FIRED_COUNTER_ADDR, si->sensor_fired_counter);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3319      	adds	r3, #25
 8000b62:	4619      	mov	r1, r3
 8000b64:	2013      	movs	r0, #19
 8000b66:	f7ff feeb 	bl	8000940 <send_to_eeprom_byte_by_byte>
//			(uint8_t*)si->sensor_fired_counter, strlen(si->sensor_fired_counter), HAL_MAX_DELAY)!=HAL_OK)
//	{
//		sprintf(msg_write,"WRITE OPERATION FAILED at sensor_fired field in struct.\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg_write, strlen(msg_write), 10);
//	}
	sprintf(msg_write,"Data saved to EEPROM!\n\r");
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <write_sensor_info_to_eeprom+0xdc>)
 8000b70:	461c      	mov	r4, r3
 8000b72:	4615      	mov	r5, r2
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b7c:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_write, strlen(msg_write), 10);
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fb23 	bl	80001d0 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	f107 0108 	add.w	r1, r7, #8
 8000b92:	230a      	movs	r3, #10
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <write_sensor_info_to_eeprom+0xd8>)
 8000b96:	f002 fbdb 	bl	8003350 <HAL_UART_Transmit>
}
 8000b9a:	bf00      	nop
 8000b9c:	3758      	adds	r7, #88	; 0x58
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	080044ac 	.word	0x080044ac
 8000ba8:	200000e4 	.word	0x200000e4
 8000bac:	080044c8 	.word	0x080044c8

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//HAL_UART_Transmit(&huart2, "yes, this is error", 18, HAL_MAX_DELAY);
  /* USER CODE END Error_Handler_Debug */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x44>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_MspInit+0x44>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x44>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x44>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_I2C_MspInit+0x7c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d127      	bne.n	8000c7a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23c0      	movs	r3, #192	; 0xc0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c52:	2304      	movs	r3, #4
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c5e:	f000 faab 	bl	80011b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <HAL_UART_MspInit+0xa0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d13a      	bne.n	8000d28 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 fa5a 	bl	80011b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d16:	2303      	movs	r3, #3
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f000 fa48 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8ec 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 feca 	bl	8003b5c <__errno>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	230c      	movs	r3, #12
 8000dcc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20010000 	.word	0x20010000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	20000170 	.word	0x20000170

08000e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <SystemInit+0x64>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <SystemInit+0x64>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <SystemInit+0x68>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <SystemInit+0x68>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <SystemInit+0x68>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <SystemInit+0x68>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <SystemInit+0x68>)
 8000e2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <SystemInit+0x68>)
 8000e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <SystemInit+0x68>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <SystemInit+0x68>)
 8000e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <SystemInit+0x68>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SystemInit+0x64>)
 8000e52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e56:	609a      	str	r2, [r3, #8]
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	40021000 	.word	0x40021000

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff ffc6 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
	ldr	r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e90:	f842 3b04 	str.w	r3, [r2], #4

08000e94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <LoopForever+0x16>)
	cmp	r2, r3
 8000e96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f002 fe65 	bl	8003b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fb6f 	bl	8000580 <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ea8:	08004598 	.word	0x08004598
	ldr	r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eb0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000eb4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000eb8:	2000016c 	.word	0x2000016c

08000ebc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_IRQHandler>

08000ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f941 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f80e 	bl	8000ef0 <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee0:	f7ff fe6e 	bl	8000bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_InitTick+0x6c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d023      	beq.n	8000f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_InitTick+0x70>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_InitTick+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f93f 	bl	800119e <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d809      	bhi.n	8000f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f917 	bl	8001166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_InitTick+0x74>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e007      	b.n	8000f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e004      	b.n	8000f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e001      	b.n	8000f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000164 	.word	0x20000164

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000164 	.word	0x20000164

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_Delay+0x40>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff47 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff5c 	bl	8001034 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffb0 	bl	800110c <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e148      	b.n	800145a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 813a 	beq.w	8001454 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d00b      	beq.n	8001200 <HAL_GPIO_Init+0x48>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f4:	2b11      	cmp	r3, #17
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d130      	bne.n	8001262 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001236:	2201      	movs	r2, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 0201 	and.w	r2, r3, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0xea>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0203 	and.w	r2, r3, #3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8094 	beq.w	8001454 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b52      	ldr	r3, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x2c0>)
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	4a51      	ldr	r2, [pc, #324]	; (8001478 <HAL_GPIO_Init+0x2c0>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6613      	str	r3, [r2, #96]	; 0x60
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x2c0>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x2c4>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800136e:	d00d      	beq.n	800138c <HAL_GPIO_Init+0x1d4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a43      	ldr	r2, [pc, #268]	; (8001480 <HAL_GPIO_Init+0x2c8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d007      	beq.n	8001388 <HAL_GPIO_Init+0x1d0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a42      	ldr	r2, [pc, #264]	; (8001484 <HAL_GPIO_Init+0x2cc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d101      	bne.n	8001384 <HAL_GPIO_Init+0x1cc>
 8001380:	2302      	movs	r3, #2
 8001382:	e004      	b.n	800138e <HAL_GPIO_Init+0x1d6>
 8001384:	2307      	movs	r3, #7
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0x1d6>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_GPIO_Init+0x1d6>
 800138c:	2300      	movs	r3, #0
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	f002 0203 	and.w	r2, r2, #3
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	4093      	lsls	r3, r2
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800139e:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_GPIO_Init+0x2c4>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f aeaf 	bne.w	80011c8 <HAL_GPIO_Init+0x10>
  }
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e081      	b.n	80015d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fb90 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800150c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800151c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e006      	b.n	8001544 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001542:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d104      	bne.n	8001556 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	ea42 0103 	orr.w	r1, r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	021a      	lsls	r2, r3, #8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69d9      	ldr	r1, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	817b      	strh	r3, [r7, #10]
 80015ee:	460b      	mov	r3, r1
 80015f0:	813b      	strh	r3, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b20      	cmp	r3, #32
 8001600:	f040 80f9 	bne.w	80017f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_I2C_Mem_Write+0x34>
 800160a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0ed      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_I2C_Mem_Write+0x4e>
 8001626:	2302      	movs	r3, #2
 8001628:	e0e6      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001632:	f7ff fcad 	bl	8000f90 <HAL_GetTick>
 8001636:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2319      	movs	r3, #25
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 fac3 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d1      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2221      	movs	r2, #33	; 0x21
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800167c:	88f8      	ldrh	r0, [r7, #6]
 800167e:	893a      	ldrh	r2, [r7, #8]
 8001680:	8979      	ldrh	r1, [r7, #10]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4603      	mov	r3, r0
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f9d3 	bl	8001a38 <I2C_RequestMemoryWrite>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0a9      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d90e      	bls.n	80016cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	8979      	ldrh	r1, [r7, #10]
 80016bc:	2300      	movs	r3, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fba5 	bl	8001e14 <I2C_TransferConfig>
 80016ca:	e00f      	b.n	80016ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	8979      	ldrh	r1, [r7, #10]
 80016de:	2300      	movs	r3, #0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fb94 	bl	8001e14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 faad 	bl	8001c50 <I2C_WaitOnTXISFlagUntilTimeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e07b      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d034      	beq.n	80017a4 <HAL_I2C_Mem_Write+0x1c8>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	2b00      	cmp	r3, #0
 8001740:	d130      	bne.n	80017a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fa3f 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e04d      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d90e      	bls.n	8001784 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	22ff      	movs	r2, #255	; 0xff
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	b2da      	uxtb	r2, r3
 8001772:	8979      	ldrh	r1, [r7, #10]
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fb49 	bl	8001e14 <I2C_TransferConfig>
 8001782:	e00f      	b.n	80017a4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fb38 	bl	8001e14 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d19e      	bne.n	80016ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fa8c 	bl	8001cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e01a      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2220      	movs	r2, #32
 80017c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_I2C_Mem_Write+0x224>)
 80017d6:	400b      	ands	r3, r1
 80017d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	fe00e800 	.word	0xfe00e800

08001804 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4603      	mov	r3, r0
 8001814:	817b      	strh	r3, [r7, #10]
 8001816:	460b      	mov	r3, r1
 8001818:	813b      	strh	r3, [r7, #8]
 800181a:	4613      	mov	r3, r2
 800181c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	f040 80fd 	bne.w	8001a26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_I2C_Mem_Read+0x34>
 8001832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0f1      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_I2C_Mem_Read+0x4e>
 800184e:	2302      	movs	r3, #2
 8001850:	e0ea      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800185a:	f7ff fb99 	bl	8000f90 <HAL_GetTick>
 800185e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2319      	movs	r3, #25
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f9af 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0d5      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2222      	movs	r2, #34	; 0x22
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800189c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018a4:	88f8      	ldrh	r0, [r7, #6]
 80018a6:	893a      	ldrh	r2, [r7, #8]
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	4603      	mov	r3, r0
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f913 	bl	8001ae0 <I2C_RequestMemoryRead>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0ad      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d90e      	bls.n	80018f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	22ff      	movs	r2, #255	; 0xff
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	8979      	ldrh	r1, [r7, #10]
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <HAL_I2C_Mem_Read+0x22c>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fa91 	bl	8001e14 <I2C_TransferConfig>
 80018f2:	e00f      	b.n	8001914 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	b2da      	uxtb	r2, r3
 8001904:	8979      	ldrh	r1, [r7, #10]
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_I2C_Mem_Read+0x22c>)
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fa80 	bl	8001e14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	2200      	movs	r2, #0
 800191c:	2104      	movs	r1, #4
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f956 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e07c      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d034      	beq.n	80019d4 <HAL_I2C_Mem_Read+0x1d0>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	2b00      	cmp	r3, #0
 8001970:	d130      	bne.n	80019d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	2200      	movs	r2, #0
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f927 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e04d      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d90e      	bls.n	80019b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	22ff      	movs	r2, #255	; 0xff
 800199a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	8979      	ldrh	r1, [r7, #10]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fa31 	bl	8001e14 <I2C_TransferConfig>
 80019b2:	e00f      	b.n	80019d4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	8979      	ldrh	r1, [r7, #10]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fa20 	bl	8001e14 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d19a      	bne.n	8001914 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f974 	bl	8001cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e01a      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2220      	movs	r2, #32
 80019f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_I2C_Mem_Read+0x230>)
 8001a06:	400b      	ands	r3, r1
 8001a08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	80002400 	.word	0x80002400
 8001a34:	fe00e800 	.word	0xfe00e800

08001a38 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	817b      	strh	r3, [r7, #10]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	813b      	strh	r3, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	8979      	ldrh	r1, [r7, #10]
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <I2C_RequestMemoryWrite+0xa4>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f9d7 	bl	8001e14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f8f0 	bl	8001c50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e02c      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a80:	893b      	ldrh	r3, [r7, #8]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8a:	e015      	b.n	8001ab8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a8c:	893b      	ldrh	r3, [r7, #8]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	69b9      	ldr	r1, [r7, #24]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f8d6 	bl	8001c50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e012      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f884 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	80002000 	.word	0x80002000

08001ae0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	460b      	mov	r3, r1
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	8979      	ldrh	r1, [r7, #10]
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <I2C_RequestMemoryRead+0xa4>)
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f984 	bl	8001e14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f89d 	bl	8001c50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e02c      	b.n	8001b7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b26:	893b      	ldrh	r3, [r7, #8]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b30:	e015      	b.n	8001b5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b32:	893b      	ldrh	r3, [r7, #8]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f883 	bl	8001c50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e012      	b.n	8001b7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b54:	893b      	ldrh	r3, [r7, #8]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f831 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	80002000 	.word	0x80002000

08001b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d103      	bne.n	8001ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d007      	beq.n	8001bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	619a      	str	r2, [r3, #24]
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be0:	e022      	b.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d01e      	beq.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff f9d1 	bl	8000f90 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d113      	bne.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e00f      	b.n	8001c48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4013      	ands	r3, r2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d0cd      	beq.n	8001be2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c5c:	e02c      	b.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f870 	bl	8001d48 <I2C_IsAcknowledgeFailed>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e02a      	b.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d01e      	beq.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7ff f989 	bl	8000f90 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d113      	bne.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e007      	b.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d1cb      	bne.n	8001c5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cdc:	e028      	b.n	8001d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f830 	bl	8001d48 <I2C_IsAcknowledgeFailed>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e026      	b.n	8001d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7ff f94d 	bl	8000f90 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d302      	bcc.n	8001d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d113      	bne.n	8001d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e007      	b.n	8001d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d1cf      	bne.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d151      	bne.n	8001e06 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d62:	e022      	b.n	8001daa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6a:	d01e      	beq.n	8001daa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6c:	f7ff f910 	bl	8000f90 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d302      	bcc.n	8001d82 <I2C_IsAcknowledgeFailed+0x3a>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d113      	bne.n	8001daa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f043 0220 	orr.w	r2, r3, #32
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e02e      	b.n	8001e08 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d1d5      	bne.n	8001d64 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fedd 	bl	8001b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <I2C_IsAcknowledgeFailed+0xc8>)
 8001dda:	400b      	ands	r3, r1
 8001ddc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f043 0204 	orr.w	r2, r3, #4
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	fe00e800 	.word	0xfe00e800

08001e14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	4613      	mov	r3, r2
 8001e24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	0d5b      	lsrs	r3, r3, #21
 8001e30:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <I2C_TransferConfig+0x58>)
 8001e36:	430b      	orrs	r3, r1
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	ea02 0103 	and.w	r1, r2, r3
 8001e3e:	897b      	ldrh	r3, [r7, #10]
 8001e40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e44:	7a7b      	ldrb	r3, [r7, #9]
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	03ff63ff 	.word	0x03ff63ff

08001e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d138      	bne.n	8001ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e032      	b.n	8001efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6819      	ldr	r1, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d139      	bne.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e033      	b.n	8001f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2224      	movs	r2, #36	; 0x24
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40007000 	.word	0x40007000

08001fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fea:	d130      	bne.n	800204e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff8:	d038      	beq.n	800206c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2232      	movs	r2, #50	; 0x32
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002020:	e002      	b.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3b01      	subs	r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002034:	d102      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f2      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d110      	bne.n	800206c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e00f      	b.n	800206e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d007      	beq.n	800206c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002064:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40007000 	.word	0x40007000
 8002080:	20000000 	.word	0x20000000
 8002084:	431bde83 	.word	0x431bde83

08002088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f000 bc11 	b.w	80028be <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209c:	4ba0      	ldr	r3, [pc, #640]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a6:	4b9e      	ldr	r3, [pc, #632]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80e4 	beq.w	8002286 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4c>
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	f040 808b 	bne.w	80021e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	f040 8087 	bne.w	80021e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x64>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e3e8      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <HAL_RCC_OscConfig+0x7e>
 80020fc:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002104:	e005      	b.n	8002112 <HAL_RCC_OscConfig+0x8a>
 8002106:	4b86      	ldr	r3, [pc, #536]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	4293      	cmp	r3, r2
 8002114:	d223      	bcs.n	800215e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd78 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e3c9      	b.n	80028be <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212a:	4b7d      	ldr	r3, [pc, #500]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7c      	ldr	r2, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b7a      	ldr	r3, [pc, #488]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4977      	ldr	r1, [pc, #476]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	4972      	ldr	r1, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
 800215c:	e025      	b.n	80021aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6f      	ldr	r2, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	496a      	ldr	r1, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217c:	4b68      	ldr	r3, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	4965      	ldr	r1, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fd38 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e389      	b.n	80028be <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021aa:	f000 fc6f 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	4a5a      	ldr	r2, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x29c>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	fa21 f303 	lsr.w	r3, r1, r3
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x2a0>)
 80021c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ca:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_RCC_OscConfig+0x2a4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fe8e 	bl	8000ef0 <HAL_InitTick>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d052      	beq.n	8002284 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	e36d      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d032      	beq.n	8002250 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fecb 	bl	8000f90 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021fe:	f7fe fec7 	bl	8000f90 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e356      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	493a      	ldr	r1, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
 800224e:	e01a      	b.n	8002286 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a32      	ldr	r2, [pc, #200]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800225c:	f7fe fe98 	bl	8000f90 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002264:	f7fe fe94 	bl	8000f90 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e323      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1dc>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d073      	beq.n	800237a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x21c>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d10e      	bne.n	80022bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d10b      	bne.n	80022bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d063      	beq.n	8002378 <HAL_RCC_OscConfig+0x2f0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d15f      	bne.n	8002378 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e300      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x24c>
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0x288>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x270>
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0x288>
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a05      	ldr	r2, [pc, #20]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fe3a 	bl	8000f90 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	e010      	b.n	8002342 <HAL_RCC_OscConfig+0x2ba>
 8002320:	40021000 	.word	0x40021000
 8002324:	0800450c 	.word	0x0800450c
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fe2e 	bl	8000f90 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e2bd      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002342:	4baf      	ldr	r3, [pc, #700]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x2a8>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fe1e 	bl	8000f90 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fe1a 	bl	8000f90 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2a9      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236a:	4ba5      	ldr	r3, [pc, #660]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x2d0>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d060      	beq.n	8002448 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d005      	beq.n	8002398 <HAL_RCC_OscConfig+0x310>
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d116      	bne.n	80023c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	4b99      	ldr	r3, [pc, #612]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x328>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e286      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b93      	ldr	r3, [pc, #588]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	4990      	ldr	r1, [pc, #576]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c4:	e040      	b.n	8002448 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d023      	beq.n	8002416 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ce:	4b8c      	ldr	r3, [pc, #560]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a8b      	ldr	r2, [pc, #556]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fdd9 	bl	8000f90 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fdd5 	bl	8000f90 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e264      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f4:	4b82      	ldr	r3, [pc, #520]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	497c      	ldr	r1, [pc, #496]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e018      	b.n	8002448 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b7a      	ldr	r3, [pc, #488]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a79      	ldr	r2, [pc, #484]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800241c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fdb5 	bl	8000f90 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe fdb1 	bl	8000f90 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e240      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243c:	4b70      	ldr	r3, [pc, #448]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03c      	beq.n	80024ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245c:	4b68      	ldr	r3, [pc, #416]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002462:	4a67      	ldr	r2, [pc, #412]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fd90 	bl	8000f90 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7fe fd8c 	bl	8000f90 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e21b      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCC_OscConfig+0x3ec>
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b5a      	ldr	r3, [pc, #360]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249c:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe fd73 	bl	8000f90 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7fe fd6f 	bl	8000f90 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1fe      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c0:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ef      	bne.n	80024ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80a6 	beq.w	8002628 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024e0:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10d      	bne.n	8002508 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ec:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	4a43      	ldr	r2, [pc, #268]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6593      	str	r3, [r2, #88]	; 0x58
 80024f8:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002504:	2301      	movs	r3, #1
 8002506:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002508:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <HAL_RCC_OscConfig+0x57c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d118      	bne.n	8002546 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x57c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0x57c>)
 800251a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002520:	f7fe fd36 	bl	8000f90 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7fe fd32 	bl	8000f90 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1c1      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCC_OscConfig+0x57c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x4d8>
 800254e:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255e:	e024      	b.n	80025aa <HAL_RCC_OscConfig+0x522>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d110      	bne.n	800258a <HAL_RCC_OscConfig+0x502>
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	4a24      	ldr	r2, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	4a20      	ldr	r2, [pc, #128]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002588:	e00f      	b.n	80025aa <HAL_RCC_OscConfig+0x522>
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80025a2:	f023 0304 	bic.w	r3, r3, #4
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe fced 	bl	8000f90 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fce9 	bl	8000f90 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e176      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x578>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ed      	beq.n	80025ba <HAL_RCC_OscConfig+0x532>
 80025de:	e01a      	b.n	8002616 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe fcd6 	bl	8000f90 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e8:	f7fe fcd2 	bl	8000f90 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d906      	bls.n	8002608 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e15f      	b.n	80028be <HAL_RCC_OscConfig+0x836>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	4baa      	ldr	r3, [pc, #680]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e8      	bne.n	80025e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002616:	7ffb      	ldrb	r3, [r7, #31]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	4ba5      	ldr	r3, [pc, #660]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	4aa4      	ldr	r2, [pc, #656]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03c      	beq.n	80026ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01c      	beq.n	8002676 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800263c:	4b9d      	ldr	r3, [pc, #628]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800263e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002642:	4a9c      	ldr	r2, [pc, #624]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fca0 	bl	8000f90 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002654:	f7fe fc9c 	bl	8000f90 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e12b      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002666:	4b93      	ldr	r3, [pc, #588]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <HAL_RCC_OscConfig+0x5cc>
 8002674:	e01b      	b.n	80026ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002676:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800267c:	4a8d      	ldr	r2, [pc, #564]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fc83 	bl	8000f90 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800268e:	f7fe fc7f 	bl	8000f90 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e10e      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a0:	4b84      	ldr	r3, [pc, #528]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80026a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ef      	bne.n	800268e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8102 	beq.w	80028bc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	2b02      	cmp	r3, #2
 80026be:	f040 80c5 	bne.w	800284c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026c2:	4b7c      	ldr	r3, [pc, #496]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0203 	and.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d12c      	bne.n	8002730 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	3b01      	subs	r3, #1
 80026e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d123      	bne.n	8002730 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d11b      	bne.n	8002730 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d113      	bne.n	8002730 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	3b01      	subs	r3, #1
 8002716:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d109      	bne.n	8002730 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d067      	beq.n	8002800 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d062      	beq.n	80027fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002736:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0bb      	b.n	80028be <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5a      	ldr	r2, [pc, #360]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800274c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002750:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002752:	f7fe fc1d 	bl	8000f90 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe fc19 	bl	8000f90 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0a8      	b.n	80028be <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276c:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002778:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <HAL_RCC_OscConfig+0x830>)
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002788:	3a01      	subs	r2, #1
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002792:	0212      	lsls	r2, r2, #8
 8002794:	4311      	orrs	r1, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800279a:	0852      	lsrs	r2, r2, #1
 800279c:	3a01      	subs	r2, #1
 800279e:	0552      	lsls	r2, r2, #21
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	4311      	orrs	r1, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b2:	06d2      	lsls	r2, r2, #27
 80027b4:	430a      	orrs	r2, r1
 80027b6:	493f      	ldr	r1, [pc, #252]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027bc:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3c      	ldr	r2, [pc, #240]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a39      	ldr	r2, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d4:	f7fe fbdc 	bl	8000f90 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fbd8 	bl	8000f90 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e067      	b.n	80028be <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fa:	e05f      	b.n	80028bc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e05e      	b.n	80028be <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d157      	bne.n	80028bc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002818:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002824:	f7fe fbb4 	bl	8000f90 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe fbb0 	bl	8000f90 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e03f      	b.n	80028be <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x7a4>
 800284a:	e037      	b.n	80028bc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d02d      	beq.n	80028ae <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800285c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 800287c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fb83 	bl	8000f90 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe fb7f 	bl	8000f90 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e00e      	b.n	80028be <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_RCC_OscConfig+0x82c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x806>
 80028ac:	e006      	b.n	80028bc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e005      	b.n	80028be <HAL_RCC_OscConfig+0x836>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0c8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4961      	ldr	r1, [pc, #388]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b0      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d04c      	beq.n	80029b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d107      	bne.n	8002930 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002920:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d121      	bne.n	8002970 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e09e      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d115      	bne.n	8002970 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e092      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e086      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002960:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07e      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	493f      	ldr	r1, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002982:	f7fe fb05 	bl	8000f90 <HAL_GetTick>
 8002986:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298a:	f7fe fb01 	bl	8000f90 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e066      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 020c 	and.w	r2, r3, #12
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d1eb      	bne.n	800298a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	492c      	ldr	r1, [pc, #176]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d210      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4924      	ldr	r1, [pc, #144]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e036      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4918      	ldr	r1, [pc, #96]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4910      	ldr	r1, [pc, #64]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a3e:	f000 f825 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a42:	4601      	mov	r1, r0
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCC_ClockConfig+0x1b4>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	fa21 f303 	lsr.w	r3, r1, r3
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fa44 	bl	8000ef0 <HAL_InitTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	0800450c 	.word	0x0800450c
 8002a84:	20000000 	.word	0x20000000
 8002a88:	20000004 	.word	0x20000004

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa4:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d121      	bne.n	8002afe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d11e      	bne.n	8002afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac0:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e005      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	e004      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d133      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b2e:	e005      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b32:	617b      	str	r3, [r7, #20]
      break;
 8002b34:	e005      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b38:	617b      	str	r3, [r7, #20]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	617b      	str	r3, [r7, #20]
      break;
 8002b40:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	fb02 f203 	mul.w	r2, r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0e5b      	lsrs	r3, r3, #25
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b82:	69bb      	ldr	r3, [r7, #24]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3724      	adds	r7, #36	; 0x24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08004524 	.word	0x08004524
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	0800451c 	.word	0x0800451c

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be8:	f7ff ffda 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bec:	4601      	mov	r1, r0
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0adb      	lsrs	r3, r3, #11
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	0800451c 	.word	0x0800451c

08002c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f9ca 	bl	8001fc0 <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
 8002c2e:	e014      	b.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f9ba 	bl	8001fc0 <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d10b      	bne.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d919      	bls.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c6c:	d902      	bls.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6e:	2302      	movs	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e013      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c74:	2301      	movs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e010      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d902      	bls.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c80:	2303      	movs	r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e00a      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d102      	bne.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e004      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b70      	cmp	r3, #112	; 0x70
 8002c96:	d101      	bne.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 0207 	bic.w	r2, r3, #7
 8002ca4:	4909      	ldr	r1, [pc, #36]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d00:	e00f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d02:	4bac      	ldr	r3, [pc, #688]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4aab      	ldr	r2, [pc, #684]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0e:	e00c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f9dc 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d20:	e003      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	74fb      	strb	r3, [r7, #19]
      break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d30:	4ba0      	ldr	r3, [pc, #640]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	499d      	ldr	r1, [pc, #628]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8099 	beq.w	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d5e:	4b95      	ldr	r3, [pc, #596]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d74:	4b8f      	ldr	r3, [pc, #572]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	4a8e      	ldr	r2, [pc, #568]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d80:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d90:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a88      	ldr	r2, [pc, #544]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe f8f8 	bl	8000f90 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe f8f4 	bl	8000f90 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
        break;
 8002db6:	e005      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db8:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d155      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dca:	4b7a      	ldr	r3, [pc, #488]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01e      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d019      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de6:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df2:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df8:	4a6e      	ldr	r2, [pc, #440]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e02:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e12:	4a68      	ldr	r2, [pc, #416]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d016      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f8b4 	bl	8000f90 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f8b0 	bl	8000f90 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d902      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	74fb      	strb	r3, [r7, #19]
            break;
 8002e42:	e006      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e44:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ec      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	4953      	ldr	r1, [pc, #332]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e6e:	e004      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
 8002e74:	e001      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	7c7b      	ldrb	r3, [r7, #17]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	4a4b      	ldr	r2, [pc, #300]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4943      	ldr	r1, [pc, #268]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f023 020c 	bic.w	r2, r3, #12
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	493a      	ldr	r1, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	4932      	ldr	r1, [pc, #200]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	4929      	ldr	r1, [pc, #164]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4921      	ldr	r1, [pc, #132]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	4918      	ldr	r1, [pc, #96]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d02c      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa4:	d10a      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb0:	60d3      	str	r3, [r2, #12]
 8002fb2:	e015      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 f881 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d028      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	492d      	ldr	r1, [pc, #180]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800300a:	d106      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003016:	60d3      	str	r3, [r2, #12]
 8003018:	e011      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003022:	d10c      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f852 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01c      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	4915      	ldr	r1, [pc, #84]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003068:	d10c      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f82f 	bl	80030d4 <RCCEx_PLLSAI1_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000

080030d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030e2:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ee:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0203 	and.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d10d      	bne.n	800311a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
       ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003106:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
       ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d044      	beq.n	80031a4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e041      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d00c      	beq.n	8003142 <RCCEx_PLLSAI1_Config+0x6e>
 8003128:	2b03      	cmp	r3, #3
 800312a:	d013      	beq.n	8003154 <RCCEx_PLLSAI1_Config+0x80>
 800312c:	2b01      	cmp	r3, #1
 800312e:	d120      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003130:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003140:	e01a      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003142:	4b5b      	ldr	r3, [pc, #364]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003152:	e013      	b.n	800317c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003154:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003170:	e006      	b.n	8003180 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
      break;
 8003176:	e004      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003178:	bf00      	nop
 800317a:	e002      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800317c:	bf00      	nop
 800317e:	e000      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003180:	bf00      	nop
    }

    if(status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10d      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003188:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	3b01      	subs	r3, #1
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	430b      	orrs	r3, r1
 800319e:	4944      	ldr	r1, [pc, #272]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d17c      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031aa:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a40      	ldr	r2, [pc, #256]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b6:	f7fd feeb 	bl	8000f90 <HAL_GetTick>
 80031ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031bc:	e009      	b.n	80031d2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031be:	f7fd fee7 	bl	8000f90 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d902      	bls.n	80031d2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	73fb      	strb	r3, [r7, #15]
        break;
 80031d0:	e005      	b.n	80031de <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ef      	bne.n	80031be <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d15f      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d110      	bne.n	800320c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6892      	ldr	r2, [r2, #8]
 80031fa:	0211      	lsls	r1, r2, #8
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68d2      	ldr	r2, [r2, #12]
 8003200:	06d2      	lsls	r2, r2, #27
 8003202:	430a      	orrs	r2, r1
 8003204:	492a      	ldr	r1, [pc, #168]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	610b      	str	r3, [r1, #16]
 800320a:	e027      	b.n	800325c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d112      	bne.n	8003238 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800321a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6892      	ldr	r2, [r2, #8]
 8003222:	0211      	lsls	r1, r2, #8
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6912      	ldr	r2, [r2, #16]
 8003228:	0852      	lsrs	r2, r2, #1
 800322a:	3a01      	subs	r2, #1
 800322c:	0552      	lsls	r2, r2, #21
 800322e:	430a      	orrs	r2, r1
 8003230:	491f      	ldr	r1, [pc, #124]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	610b      	str	r3, [r1, #16]
 8003236:	e011      	b.n	800325c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003240:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6892      	ldr	r2, [r2, #8]
 8003248:	0211      	lsls	r1, r2, #8
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6952      	ldr	r2, [r2, #20]
 800324e:	0852      	lsrs	r2, r2, #1
 8003250:	3a01      	subs	r2, #1
 8003252:	0652      	lsls	r2, r2, #25
 8003254:	430a      	orrs	r2, r1
 8003256:	4916      	ldr	r1, [pc, #88]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003266:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd fe92 	bl	8000f90 <HAL_GetTick>
 800326c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800326e:	e009      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003270:	f7fd fe8e 	bl	8000f90 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d902      	bls.n	8003284 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	73fb      	strb	r3, [r7, #15]
          break;
 8003282:	e005      	b.n	8003290 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	4904      	ldr	r1, [pc, #16]	; (80032b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000

080032b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e040      	b.n	8003348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fcda 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8c0 	bl	8003478 <UART_SetConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e022      	b.n	8003348 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fac4 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fb4b 	bl	80039dc <UART_CheckIdleState>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	2b20      	cmp	r3, #32
 8003366:	f040 8081 	bne.w	800346c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_UART_Transmit+0x26>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e079      	b.n	800346e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_UART_Transmit+0x38>
 8003384:	2302      	movs	r3, #2
 8003386:	e072      	b.n	800346e <HAL_UART_Transmit+0x11e>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2221      	movs	r2, #33	; 0x21
 800339a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800339c:	f7fd fdf8 	bl	8000f90 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d108      	bne.n	80033ce <HAL_UART_Transmit+0x7e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e003      	b.n	80033d6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80033de:	e02d      	b.n	800343c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fb3b 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e039      	b.n	800346e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	881a      	ldrh	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340c:	b292      	uxth	r2, r2
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	3302      	adds	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e008      	b.n	800342a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b292      	uxth	r2, r2
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1cb      	bne.n	80033e0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fb07 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e005      	b.n	800346e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003478:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800347c:	b088      	sub	sp, #32
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4313      	orrs	r3, r2
 800349c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4bb0      	ldr	r3, [pc, #704]	; (8003768 <UART_SetConfig+0x2f0>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4aa6      	ldr	r2, [pc, #664]	; (800376c <UART_SetConfig+0x2f4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a9d      	ldr	r2, [pc, #628]	; (8003770 <UART_SetConfig+0x2f8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d121      	bne.n	8003544 <UART_SetConfig+0xcc>
 8003500:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <UART_SetConfig+0x2fc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b03      	cmp	r3, #3
 800350c:	d816      	bhi.n	800353c <UART_SetConfig+0xc4>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <UART_SetConfig+0x9c>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003525 	.word	0x08003525
 8003518:	08003531 	.word	0x08003531
 800351c:	0800352b 	.word	0x0800352b
 8003520:	08003537 	.word	0x08003537
 8003524:	2301      	movs	r3, #1
 8003526:	76fb      	strb	r3, [r7, #27]
 8003528:	e072      	b.n	8003610 <UART_SetConfig+0x198>
 800352a:	2302      	movs	r3, #2
 800352c:	76fb      	strb	r3, [r7, #27]
 800352e:	e06f      	b.n	8003610 <UART_SetConfig+0x198>
 8003530:	2304      	movs	r3, #4
 8003532:	76fb      	strb	r3, [r7, #27]
 8003534:	e06c      	b.n	8003610 <UART_SetConfig+0x198>
 8003536:	2308      	movs	r3, #8
 8003538:	76fb      	strb	r3, [r7, #27]
 800353a:	e069      	b.n	8003610 <UART_SetConfig+0x198>
 800353c:	2310      	movs	r3, #16
 800353e:	76fb      	strb	r3, [r7, #27]
 8003540:	bf00      	nop
 8003542:	e065      	b.n	8003610 <UART_SetConfig+0x198>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a8b      	ldr	r2, [pc, #556]	; (8003778 <UART_SetConfig+0x300>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d134      	bne.n	80035b8 <UART_SetConfig+0x140>
 800354e:	4b89      	ldr	r3, [pc, #548]	; (8003774 <UART_SetConfig+0x2fc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d829      	bhi.n	80035b0 <UART_SetConfig+0x138>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0xec>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003599 	.word	0x08003599
 8003568:	080035b1 	.word	0x080035b1
 800356c:	080035b1 	.word	0x080035b1
 8003570:	080035b1 	.word	0x080035b1
 8003574:	080035a5 	.word	0x080035a5
 8003578:	080035b1 	.word	0x080035b1
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080035b1 	.word	0x080035b1
 8003584:	0800359f 	.word	0x0800359f
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b1 	.word	0x080035b1
 8003594:	080035ab 	.word	0x080035ab
 8003598:	2300      	movs	r3, #0
 800359a:	76fb      	strb	r3, [r7, #27]
 800359c:	e038      	b.n	8003610 <UART_SetConfig+0x198>
 800359e:	2302      	movs	r3, #2
 80035a0:	76fb      	strb	r3, [r7, #27]
 80035a2:	e035      	b.n	8003610 <UART_SetConfig+0x198>
 80035a4:	2304      	movs	r3, #4
 80035a6:	76fb      	strb	r3, [r7, #27]
 80035a8:	e032      	b.n	8003610 <UART_SetConfig+0x198>
 80035aa:	2308      	movs	r3, #8
 80035ac:	76fb      	strb	r3, [r7, #27]
 80035ae:	e02f      	b.n	8003610 <UART_SetConfig+0x198>
 80035b0:	2310      	movs	r3, #16
 80035b2:	76fb      	strb	r3, [r7, #27]
 80035b4:	bf00      	nop
 80035b6:	e02b      	b.n	8003610 <UART_SetConfig+0x198>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	; (800376c <UART_SetConfig+0x2f4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d124      	bne.n	800360c <UART_SetConfig+0x194>
 80035c2:	4b6c      	ldr	r3, [pc, #432]	; (8003774 <UART_SetConfig+0x2fc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	d012      	beq.n	80035f8 <UART_SetConfig+0x180>
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d802      	bhi.n	80035de <UART_SetConfig+0x166>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <UART_SetConfig+0x174>
 80035dc:	e012      	b.n	8003604 <UART_SetConfig+0x18c>
 80035de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e2:	d006      	beq.n	80035f2 <UART_SetConfig+0x17a>
 80035e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e8:	d009      	beq.n	80035fe <UART_SetConfig+0x186>
 80035ea:	e00b      	b.n	8003604 <UART_SetConfig+0x18c>
 80035ec:	2300      	movs	r3, #0
 80035ee:	76fb      	strb	r3, [r7, #27]
 80035f0:	e00e      	b.n	8003610 <UART_SetConfig+0x198>
 80035f2:	2302      	movs	r3, #2
 80035f4:	76fb      	strb	r3, [r7, #27]
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x198>
 80035f8:	2304      	movs	r3, #4
 80035fa:	76fb      	strb	r3, [r7, #27]
 80035fc:	e008      	b.n	8003610 <UART_SetConfig+0x198>
 80035fe:	2308      	movs	r3, #8
 8003600:	76fb      	strb	r3, [r7, #27]
 8003602:	e005      	b.n	8003610 <UART_SetConfig+0x198>
 8003604:	2310      	movs	r3, #16
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	bf00      	nop
 800360a:	e001      	b.n	8003610 <UART_SetConfig+0x198>
 800360c:	2310      	movs	r3, #16
 800360e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <UART_SetConfig+0x2f4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d174      	bne.n	8003704 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800361a:	7efb      	ldrb	r3, [r7, #27]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d824      	bhi.n	800366a <UART_SetConfig+0x1f2>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x1b0>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800364d 	.word	0x0800364d
 800362c:	0800366b 	.word	0x0800366b
 8003630:	08003655 	.word	0x08003655
 8003634:	0800366b 	.word	0x0800366b
 8003638:	0800365b 	.word	0x0800365b
 800363c:	0800366b 	.word	0x0800366b
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800366b 	.word	0x0800366b
 8003648:	08003663 	.word	0x08003663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff fab4 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8003650:	6178      	str	r0, [r7, #20]
        break;
 8003652:	e00f      	b.n	8003674 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <UART_SetConfig+0x304>)
 8003656:	617b      	str	r3, [r7, #20]
        break;
 8003658:	e00c      	b.n	8003674 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7ff fa17 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 800365e:	6178      	str	r0, [r7, #20]
        break;
 8003660:	e008      	b.n	8003674 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	617b      	str	r3, [r7, #20]
        break;
 8003668:	e004      	b.n	8003674 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	76bb      	strb	r3, [r7, #26]
        break;
 8003672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8100 	beq.w	800387c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d305      	bcc.n	8003698 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d902      	bls.n	800369e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	76bb      	strb	r3, [r7, #26]
 800369c:	e0ee      	b.n	800387c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	0214      	lsls	r4, r2, #8
 80036b0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036b4:	020b      	lsls	r3, r1, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6852      	ldr	r2, [r2, #4]
 80036ba:	0852      	lsrs	r2, r2, #1
 80036bc:	4611      	mov	r1, r2
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	eb13 0b01 	adds.w	fp, r3, r1
 80036c6:	eb44 0c02 	adc.w	ip, r4, r2
 80036ca:	4658      	mov	r0, fp
 80036cc:	4661      	mov	r1, ip
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	f7fc fdd1 	bl	8000280 <__aeabi_uldivmod>
 80036de:	4603      	mov	r3, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ea:	d308      	bcc.n	80036fe <UART_SetConfig+0x286>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f2:	d204      	bcs.n	80036fe <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	e0be      	b.n	800387c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	76bb      	strb	r3, [r7, #26]
 8003702:	e0bb      	b.n	800387c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	d169      	bne.n	80037e2 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 800370e:	7efb      	ldrb	r3, [r7, #27]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d835      	bhi.n	8003780 <UART_SetConfig+0x308>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x2a4>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003741 	.word	0x08003741
 8003720:	08003749 	.word	0x08003749
 8003724:	08003751 	.word	0x08003751
 8003728:	08003781 	.word	0x08003781
 800372c:	08003757 	.word	0x08003757
 8003730:	08003781 	.word	0x08003781
 8003734:	08003781 	.word	0x08003781
 8003738:	08003781 	.word	0x08003781
 800373c:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7ff fa3a 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8003744:	6178      	str	r0, [r7, #20]
        break;
 8003746:	e020      	b.n	800378a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7ff fa4c 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 800374c:	6178      	str	r0, [r7, #20]
        break;
 800374e:	e01c      	b.n	800378a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <UART_SetConfig+0x304>)
 8003752:	617b      	str	r3, [r7, #20]
        break;
 8003754:	e019      	b.n	800378a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7ff f999 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 800375a:	6178      	str	r0, [r7, #20]
        break;
 800375c:	e015      	b.n	800378a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	617b      	str	r3, [r7, #20]
        break;
 8003764:	e011      	b.n	800378a <UART_SetConfig+0x312>
 8003766:	bf00      	nop
 8003768:	efff69f3 	.word	0xefff69f3
 800376c:	40008000 	.word	0x40008000
 8003770:	40013800 	.word	0x40013800
 8003774:	40021000 	.word	0x40021000
 8003778:	40004400 	.word	0x40004400
 800377c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	76bb      	strb	r3, [r7, #26]
        break;
 8003788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d075      	beq.n	800387c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005a      	lsls	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	d916      	bls.n	80037dc <UART_SetConfig+0x364>
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b4:	d212      	bcs.n	80037dc <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f023 030f 	bic.w	r3, r3, #15
 80037be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	89fb      	ldrh	r3, [r7, #14]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	89fa      	ldrh	r2, [r7, #14]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e04f      	b.n	800387c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	76bb      	strb	r3, [r7, #26]
 80037e0:	e04c      	b.n	800387c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e2:	7efb      	ldrb	r3, [r7, #27]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d828      	bhi.n	800383a <UART_SetConfig+0x3c2>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x378>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003815 	.word	0x08003815
 80037f4:	0800381d 	.word	0x0800381d
 80037f8:	08003825 	.word	0x08003825
 80037fc:	0800383b 	.word	0x0800383b
 8003800:	0800382b 	.word	0x0800382b
 8003804:	0800383b 	.word	0x0800383b
 8003808:	0800383b 	.word	0x0800383b
 800380c:	0800383b 	.word	0x0800383b
 8003810:	08003833 	.word	0x08003833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7ff f9d0 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8003818:	6178      	str	r0, [r7, #20]
        break;
 800381a:	e013      	b.n	8003844 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7ff f9e2 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 8003820:	6178      	str	r0, [r7, #20]
        break;
 8003822:	e00f      	b.n	8003844 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <UART_SetConfig+0x41c>)
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	e00c      	b.n	8003844 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382a:	f7ff f92f 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 800382e:	6178      	str	r0, [r7, #20]
        break;
 8003830:	e008      	b.n	8003844 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003836:	617b      	str	r3, [r7, #20]
        break;
 8003838:	e004      	b.n	8003844 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	76bb      	strb	r3, [r7, #26]
        break;
 8003842:	bf00      	nop
    }

    if (pclk != 0U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	085a      	lsrs	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	441a      	add	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	b29b      	uxth	r3, r3
 800385e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d908      	bls.n	8003878 <UART_SetConfig+0x400>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d204      	bcs.n	8003878 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e001      	b.n	800387c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003888:	7ebb      	ldrb	r3, [r7, #26]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003996:	d10a      	bne.n	80039ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039ea:	f7fd fad1 	bl	8000f90 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d10e      	bne.n	8003a1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f82a 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e020      	b.n	8003a5e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d10e      	bne.n	8003a48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f814 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e00a      	b.n	8003a5e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a76:	e05d      	b.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d059      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a80:	f7fd fa86 	bl	8000f90 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11b      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e042      	b.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02b      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aea:	d123      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b04:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e00f      	b.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d092      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <__errno>:
 8003b5c:	4b01      	ldr	r3, [pc, #4]	; (8003b64 <__errno+0x8>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0d      	ldr	r6, [pc, #52]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b6e:	1ba4      	subs	r4, r4, r6
 8003b70:	10a4      	asrs	r4, r4, #2
 8003b72:	2500      	movs	r5, #0
 8003b74:	42a5      	cmp	r5, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	4e0b      	ldr	r6, [pc, #44]	; (8003ba8 <__libc_init_array+0x40>)
 8003b7a:	4c0c      	ldr	r4, [pc, #48]	; (8003bac <__libc_init_array+0x44>)
 8003b7c:	f000 fc26 	bl	80043cc <_init>
 8003b80:	1ba4      	subs	r4, r4, r6
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	2500      	movs	r5, #0
 8003b86:	42a5      	cmp	r5, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b90:	4798      	blx	r3
 8003b92:	3501      	adds	r5, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9a:	4798      	blx	r3
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	08004590 	.word	0x08004590
 8003ba4:	08004590 	.word	0x08004590
 8003ba8:	08004590 	.word	0x08004590
 8003bac:	08004594 	.word	0x08004594

08003bb0 <memset>:
 8003bb0:	4402      	add	r2, r0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	f803 1b01 	strb.w	r1, [r3], #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <siprintf>:
 8003bc0:	b40e      	push	{r1, r2, r3}
 8003bc2:	b500      	push	{lr}
 8003bc4:	b09c      	sub	sp, #112	; 0x70
 8003bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bc8:	9002      	str	r0, [sp, #8]
 8003bca:	9006      	str	r0, [sp, #24]
 8003bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <siprintf+0x38>)
 8003bd2:	9107      	str	r1, [sp, #28]
 8003bd4:	9104      	str	r1, [sp, #16]
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <siprintf+0x3c>)
 8003bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bdc:	9105      	str	r1, [sp, #20]
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	a902      	add	r1, sp, #8
 8003be4:	f000 f866 	bl	8003cb4 <_svfiprintf_r>
 8003be8:	9b02      	ldr	r3, [sp, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	b01c      	add	sp, #112	; 0x70
 8003bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf4:	b003      	add	sp, #12
 8003bf6:	4770      	bx	lr
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	ffff0208 	.word	0xffff0208

08003c00 <__ssputs_r>:
 8003c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	688e      	ldr	r6, [r1, #8]
 8003c06:	429e      	cmp	r6, r3
 8003c08:	4682      	mov	sl, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	4690      	mov	r8, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	d837      	bhi.n	8003c82 <__ssputs_r+0x82>
 8003c12:	898a      	ldrh	r2, [r1, #12]
 8003c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c18:	d031      	beq.n	8003c7e <__ssputs_r+0x7e>
 8003c1a:	6825      	ldr	r5, [r4, #0]
 8003c1c:	6909      	ldr	r1, [r1, #16]
 8003c1e:	1a6f      	subs	r7, r5, r1
 8003c20:	6965      	ldr	r5, [r4, #20]
 8003c22:	2302      	movs	r3, #2
 8003c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c28:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c2c:	f109 0301 	add.w	r3, r9, #1
 8003c30:	443b      	add	r3, r7
 8003c32:	429d      	cmp	r5, r3
 8003c34:	bf38      	it	cc
 8003c36:	461d      	movcc	r5, r3
 8003c38:	0553      	lsls	r3, r2, #21
 8003c3a:	d530      	bpl.n	8003c9e <__ssputs_r+0x9e>
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f000 fb2b 	bl	8004298 <_malloc_r>
 8003c42:	4606      	mov	r6, r0
 8003c44:	b950      	cbnz	r0, 8003c5c <__ssputs_r+0x5c>
 8003c46:	230c      	movs	r3, #12
 8003c48:	f8ca 3000 	str.w	r3, [sl]
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5c:	463a      	mov	r2, r7
 8003c5e:	6921      	ldr	r1, [r4, #16]
 8003c60:	f000 faa8 	bl	80041b4 <memcpy>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6e:	81a3      	strh	r3, [r4, #12]
 8003c70:	6126      	str	r6, [r4, #16]
 8003c72:	6165      	str	r5, [r4, #20]
 8003c74:	443e      	add	r6, r7
 8003c76:	1bed      	subs	r5, r5, r7
 8003c78:	6026      	str	r6, [r4, #0]
 8003c7a:	60a5      	str	r5, [r4, #8]
 8003c7c:	464e      	mov	r6, r9
 8003c7e:	454e      	cmp	r6, r9
 8003c80:	d900      	bls.n	8003c84 <__ssputs_r+0x84>
 8003c82:	464e      	mov	r6, r9
 8003c84:	4632      	mov	r2, r6
 8003c86:	4641      	mov	r1, r8
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	f000 fa9e 	bl	80041ca <memmove>
 8003c8e:	68a3      	ldr	r3, [r4, #8]
 8003c90:	1b9b      	subs	r3, r3, r6
 8003c92:	60a3      	str	r3, [r4, #8]
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	441e      	add	r6, r3
 8003c98:	6026      	str	r6, [r4, #0]
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e7dc      	b.n	8003c58 <__ssputs_r+0x58>
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	f000 fb54 	bl	800434c <_realloc_r>
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d1e2      	bne.n	8003c70 <__ssputs_r+0x70>
 8003caa:	6921      	ldr	r1, [r4, #16]
 8003cac:	4650      	mov	r0, sl
 8003cae:	f000 faa5 	bl	80041fc <_free_r>
 8003cb2:	e7c8      	b.n	8003c46 <__ssputs_r+0x46>

08003cb4 <_svfiprintf_r>:
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	461d      	mov	r5, r3
 8003cba:	898b      	ldrh	r3, [r1, #12]
 8003cbc:	061f      	lsls	r7, r3, #24
 8003cbe:	b09d      	sub	sp, #116	; 0x74
 8003cc0:	4680      	mov	r8, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	4616      	mov	r6, r2
 8003cc6:	d50f      	bpl.n	8003ce8 <_svfiprintf_r+0x34>
 8003cc8:	690b      	ldr	r3, [r1, #16]
 8003cca:	b96b      	cbnz	r3, 8003ce8 <_svfiprintf_r+0x34>
 8003ccc:	2140      	movs	r1, #64	; 0x40
 8003cce:	f000 fae3 	bl	8004298 <_malloc_r>
 8003cd2:	6020      	str	r0, [r4, #0]
 8003cd4:	6120      	str	r0, [r4, #16]
 8003cd6:	b928      	cbnz	r0, 8003ce4 <_svfiprintf_r+0x30>
 8003cd8:	230c      	movs	r3, #12
 8003cda:	f8c8 3000 	str.w	r3, [r8]
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	e0c8      	b.n	8003e76 <_svfiprintf_r+0x1c2>
 8003ce4:	2340      	movs	r3, #64	; 0x40
 8003ce6:	6163      	str	r3, [r4, #20]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9309      	str	r3, [sp, #36]	; 0x24
 8003cec:	2320      	movs	r3, #32
 8003cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cf2:	2330      	movs	r3, #48	; 0x30
 8003cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cf8:	9503      	str	r5, [sp, #12]
 8003cfa:	f04f 0b01 	mov.w	fp, #1
 8003cfe:	4637      	mov	r7, r6
 8003d00:	463d      	mov	r5, r7
 8003d02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d06:	b10b      	cbz	r3, 8003d0c <_svfiprintf_r+0x58>
 8003d08:	2b25      	cmp	r3, #37	; 0x25
 8003d0a:	d13e      	bne.n	8003d8a <_svfiprintf_r+0xd6>
 8003d0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d10:	d00b      	beq.n	8003d2a <_svfiprintf_r+0x76>
 8003d12:	4653      	mov	r3, sl
 8003d14:	4632      	mov	r2, r6
 8003d16:	4621      	mov	r1, r4
 8003d18:	4640      	mov	r0, r8
 8003d1a:	f7ff ff71 	bl	8003c00 <__ssputs_r>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f000 80a4 	beq.w	8003e6c <_svfiprintf_r+0x1b8>
 8003d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d26:	4453      	add	r3, sl
 8003d28:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2a:	783b      	ldrb	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 809d 	beq.w	8003e6c <_svfiprintf_r+0x1b8>
 8003d32:	2300      	movs	r3, #0
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d3c:	9304      	str	r3, [sp, #16]
 8003d3e:	9307      	str	r3, [sp, #28]
 8003d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d44:	931a      	str	r3, [sp, #104]	; 0x68
 8003d46:	462f      	mov	r7, r5
 8003d48:	2205      	movs	r2, #5
 8003d4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d4e:	4850      	ldr	r0, [pc, #320]	; (8003e90 <_svfiprintf_r+0x1dc>)
 8003d50:	f7fc fa46 	bl	80001e0 <memchr>
 8003d54:	9b04      	ldr	r3, [sp, #16]
 8003d56:	b9d0      	cbnz	r0, 8003d8e <_svfiprintf_r+0xda>
 8003d58:	06d9      	lsls	r1, r3, #27
 8003d5a:	bf44      	itt	mi
 8003d5c:	2220      	movmi	r2, #32
 8003d5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d62:	071a      	lsls	r2, r3, #28
 8003d64:	bf44      	itt	mi
 8003d66:	222b      	movmi	r2, #43	; 0x2b
 8003d68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d6c:	782a      	ldrb	r2, [r5, #0]
 8003d6e:	2a2a      	cmp	r2, #42	; 0x2a
 8003d70:	d015      	beq.n	8003d9e <_svfiprintf_r+0xea>
 8003d72:	9a07      	ldr	r2, [sp, #28]
 8003d74:	462f      	mov	r7, r5
 8003d76:	2000      	movs	r0, #0
 8003d78:	250a      	movs	r5, #10
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d80:	3b30      	subs	r3, #48	; 0x30
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	d94d      	bls.n	8003e22 <_svfiprintf_r+0x16e>
 8003d86:	b1b8      	cbz	r0, 8003db8 <_svfiprintf_r+0x104>
 8003d88:	e00f      	b.n	8003daa <_svfiprintf_r+0xf6>
 8003d8a:	462f      	mov	r7, r5
 8003d8c:	e7b8      	b.n	8003d00 <_svfiprintf_r+0x4c>
 8003d8e:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <_svfiprintf_r+0x1dc>)
 8003d90:	1a80      	subs	r0, r0, r2
 8003d92:	fa0b f000 	lsl.w	r0, fp, r0
 8003d96:	4318      	orrs	r0, r3
 8003d98:	9004      	str	r0, [sp, #16]
 8003d9a:	463d      	mov	r5, r7
 8003d9c:	e7d3      	b.n	8003d46 <_svfiprintf_r+0x92>
 8003d9e:	9a03      	ldr	r2, [sp, #12]
 8003da0:	1d11      	adds	r1, r2, #4
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	9103      	str	r1, [sp, #12]
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	db01      	blt.n	8003dae <_svfiprintf_r+0xfa>
 8003daa:	9207      	str	r2, [sp, #28]
 8003dac:	e004      	b.n	8003db8 <_svfiprintf_r+0x104>
 8003dae:	4252      	negs	r2, r2
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	9207      	str	r2, [sp, #28]
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	783b      	ldrb	r3, [r7, #0]
 8003dba:	2b2e      	cmp	r3, #46	; 0x2e
 8003dbc:	d10c      	bne.n	8003dd8 <_svfiprintf_r+0x124>
 8003dbe:	787b      	ldrb	r3, [r7, #1]
 8003dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc2:	d133      	bne.n	8003e2c <_svfiprintf_r+0x178>
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9203      	str	r2, [sp, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfb8      	it	lt
 8003dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dd4:	3702      	adds	r7, #2
 8003dd6:	9305      	str	r3, [sp, #20]
 8003dd8:	4d2e      	ldr	r5, [pc, #184]	; (8003e94 <_svfiprintf_r+0x1e0>)
 8003dda:	7839      	ldrb	r1, [r7, #0]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7fc f9fe 	bl	80001e0 <memchr>
 8003de4:	b138      	cbz	r0, 8003df6 <_svfiprintf_r+0x142>
 8003de6:	2340      	movs	r3, #64	; 0x40
 8003de8:	1b40      	subs	r0, r0, r5
 8003dea:	fa03 f000 	lsl.w	r0, r3, r0
 8003dee:	9b04      	ldr	r3, [sp, #16]
 8003df0:	4303      	orrs	r3, r0
 8003df2:	3701      	adds	r7, #1
 8003df4:	9304      	str	r3, [sp, #16]
 8003df6:	7839      	ldrb	r1, [r7, #0]
 8003df8:	4827      	ldr	r0, [pc, #156]	; (8003e98 <_svfiprintf_r+0x1e4>)
 8003dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dfe:	2206      	movs	r2, #6
 8003e00:	1c7e      	adds	r6, r7, #1
 8003e02:	f7fc f9ed 	bl	80001e0 <memchr>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d038      	beq.n	8003e7c <_svfiprintf_r+0x1c8>
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <_svfiprintf_r+0x1e8>)
 8003e0c:	bb13      	cbnz	r3, 8003e54 <_svfiprintf_r+0x1a0>
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	3307      	adds	r3, #7
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	3308      	adds	r3, #8
 8003e18:	9303      	str	r3, [sp, #12]
 8003e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1c:	444b      	add	r3, r9
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	e76d      	b.n	8003cfe <_svfiprintf_r+0x4a>
 8003e22:	fb05 3202 	mla	r2, r5, r2, r3
 8003e26:	2001      	movs	r0, #1
 8003e28:	460f      	mov	r7, r1
 8003e2a:	e7a6      	b.n	8003d7a <_svfiprintf_r+0xc6>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	3701      	adds	r7, #1
 8003e30:	9305      	str	r3, [sp, #20]
 8003e32:	4619      	mov	r1, r3
 8003e34:	250a      	movs	r5, #10
 8003e36:	4638      	mov	r0, r7
 8003e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e3c:	3a30      	subs	r2, #48	; 0x30
 8003e3e:	2a09      	cmp	r2, #9
 8003e40:	d903      	bls.n	8003e4a <_svfiprintf_r+0x196>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0c8      	beq.n	8003dd8 <_svfiprintf_r+0x124>
 8003e46:	9105      	str	r1, [sp, #20]
 8003e48:	e7c6      	b.n	8003dd8 <_svfiprintf_r+0x124>
 8003e4a:	fb05 2101 	mla	r1, r5, r1, r2
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4607      	mov	r7, r0
 8003e52:	e7f0      	b.n	8003e36 <_svfiprintf_r+0x182>
 8003e54:	ab03      	add	r3, sp, #12
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <_svfiprintf_r+0x1ec>)
 8003e5c:	a904      	add	r1, sp, #16
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f3af 8000 	nop.w
 8003e64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e68:	4681      	mov	r9, r0
 8003e6a:	d1d6      	bne.n	8003e1a <_svfiprintf_r+0x166>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	065b      	lsls	r3, r3, #25
 8003e70:	f53f af35 	bmi.w	8003cde <_svfiprintf_r+0x2a>
 8003e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e76:	b01d      	add	sp, #116	; 0x74
 8003e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7c:	ab03      	add	r3, sp, #12
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4622      	mov	r2, r4
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <_svfiprintf_r+0x1ec>)
 8003e84:	a904      	add	r1, sp, #16
 8003e86:	4640      	mov	r0, r8
 8003e88:	f000 f882 	bl	8003f90 <_printf_i>
 8003e8c:	e7ea      	b.n	8003e64 <_svfiprintf_r+0x1b0>
 8003e8e:	bf00      	nop
 8003e90:	08004554 	.word	0x08004554
 8003e94:	0800455a 	.word	0x0800455a
 8003e98:	0800455e 	.word	0x0800455e
 8003e9c:	00000000 	.word	0x00000000
 8003ea0:	08003c01 	.word	0x08003c01

08003ea4 <_printf_common>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	4691      	mov	r9, r2
 8003eaa:	461f      	mov	r7, r3
 8003eac:	688a      	ldr	r2, [r1, #8]
 8003eae:	690b      	ldr	r3, [r1, #16]
 8003eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bfb8      	it	lt
 8003eb8:	4613      	movlt	r3, r2
 8003eba:	f8c9 3000 	str.w	r3, [r9]
 8003ebe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	b112      	cbz	r2, 8003ece <_printf_common+0x2a>
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f8c9 3000 	str.w	r3, [r9]
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	0699      	lsls	r1, r3, #26
 8003ed2:	bf42      	ittt	mi
 8003ed4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ed8:	3302      	addmi	r3, #2
 8003eda:	f8c9 3000 	strmi.w	r3, [r9]
 8003ede:	6825      	ldr	r5, [r4, #0]
 8003ee0:	f015 0506 	ands.w	r5, r5, #6
 8003ee4:	d107      	bne.n	8003ef6 <_printf_common+0x52>
 8003ee6:	f104 0a19 	add.w	sl, r4, #25
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	f8d9 2000 	ldr.w	r2, [r9]
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	42ab      	cmp	r3, r5
 8003ef4:	dc28      	bgt.n	8003f48 <_printf_common+0xa4>
 8003ef6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	3300      	adds	r3, #0
 8003efe:	bf18      	it	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	0692      	lsls	r2, r2, #26
 8003f04:	d42d      	bmi.n	8003f62 <_printf_common+0xbe>
 8003f06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	47c0      	blx	r8
 8003f10:	3001      	adds	r0, #1
 8003f12:	d020      	beq.n	8003f56 <_printf_common+0xb2>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	68e5      	ldr	r5, [r4, #12]
 8003f18:	f8d9 2000 	ldr.w	r2, [r9]
 8003f1c:	f003 0306 	and.w	r3, r3, #6
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	bf08      	it	eq
 8003f24:	1aad      	subeq	r5, r5, r2
 8003f26:	68a3      	ldr	r3, [r4, #8]
 8003f28:	6922      	ldr	r2, [r4, #16]
 8003f2a:	bf0c      	ite	eq
 8003f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f30:	2500      	movne	r5, #0
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bfc4      	itt	gt
 8003f36:	1a9b      	subgt	r3, r3, r2
 8003f38:	18ed      	addgt	r5, r5, r3
 8003f3a:	f04f 0900 	mov.w	r9, #0
 8003f3e:	341a      	adds	r4, #26
 8003f40:	454d      	cmp	r5, r9
 8003f42:	d11a      	bne.n	8003f7a <_printf_common+0xd6>
 8003f44:	2000      	movs	r0, #0
 8003f46:	e008      	b.n	8003f5a <_printf_common+0xb6>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	4652      	mov	r2, sl
 8003f4c:	4639      	mov	r1, r7
 8003f4e:	4630      	mov	r0, r6
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d103      	bne.n	8003f5e <_printf_common+0xba>
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5e:	3501      	adds	r5, #1
 8003f60:	e7c3      	b.n	8003eea <_printf_common+0x46>
 8003f62:	18e1      	adds	r1, r4, r3
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	2030      	movs	r0, #48	; 0x30
 8003f68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f6c:	4422      	add	r2, r4
 8003f6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f76:	3302      	adds	r3, #2
 8003f78:	e7c5      	b.n	8003f06 <_printf_common+0x62>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	4639      	mov	r1, r7
 8003f80:	4630      	mov	r0, r6
 8003f82:	47c0      	blx	r8
 8003f84:	3001      	adds	r0, #1
 8003f86:	d0e6      	beq.n	8003f56 <_printf_common+0xb2>
 8003f88:	f109 0901 	add.w	r9, r9, #1
 8003f8c:	e7d8      	b.n	8003f40 <_printf_common+0x9c>
	...

08003f90 <_printf_i>:
 8003f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f98:	460c      	mov	r4, r1
 8003f9a:	7e09      	ldrb	r1, [r1, #24]
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	296e      	cmp	r1, #110	; 0x6e
 8003fa0:	4617      	mov	r7, r2
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	4698      	mov	r8, r3
 8003fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fa8:	f000 80b3 	beq.w	8004112 <_printf_i+0x182>
 8003fac:	d822      	bhi.n	8003ff4 <_printf_i+0x64>
 8003fae:	2963      	cmp	r1, #99	; 0x63
 8003fb0:	d036      	beq.n	8004020 <_printf_i+0x90>
 8003fb2:	d80a      	bhi.n	8003fca <_printf_i+0x3a>
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	f000 80b9 	beq.w	800412c <_printf_i+0x19c>
 8003fba:	2958      	cmp	r1, #88	; 0x58
 8003fbc:	f000 8083 	beq.w	80040c6 <_printf_i+0x136>
 8003fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003fc8:	e032      	b.n	8004030 <_printf_i+0xa0>
 8003fca:	2964      	cmp	r1, #100	; 0x64
 8003fcc:	d001      	beq.n	8003fd2 <_printf_i+0x42>
 8003fce:	2969      	cmp	r1, #105	; 0x69
 8003fd0:	d1f6      	bne.n	8003fc0 <_printf_i+0x30>
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	0605      	lsls	r5, r0, #24
 8003fd8:	f103 0104 	add.w	r1, r3, #4
 8003fdc:	d52a      	bpl.n	8004034 <_printf_i+0xa4>
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da03      	bge.n	8003fee <_printf_i+0x5e>
 8003fe6:	222d      	movs	r2, #45	; 0x2d
 8003fe8:	425b      	negs	r3, r3
 8003fea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fee:	486f      	ldr	r0, [pc, #444]	; (80041ac <_printf_i+0x21c>)
 8003ff0:	220a      	movs	r2, #10
 8003ff2:	e039      	b.n	8004068 <_printf_i+0xd8>
 8003ff4:	2973      	cmp	r1, #115	; 0x73
 8003ff6:	f000 809d 	beq.w	8004134 <_printf_i+0x1a4>
 8003ffa:	d808      	bhi.n	800400e <_printf_i+0x7e>
 8003ffc:	296f      	cmp	r1, #111	; 0x6f
 8003ffe:	d020      	beq.n	8004042 <_printf_i+0xb2>
 8004000:	2970      	cmp	r1, #112	; 0x70
 8004002:	d1dd      	bne.n	8003fc0 <_printf_i+0x30>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	f043 0320 	orr.w	r3, r3, #32
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	e003      	b.n	8004016 <_printf_i+0x86>
 800400e:	2975      	cmp	r1, #117	; 0x75
 8004010:	d017      	beq.n	8004042 <_printf_i+0xb2>
 8004012:	2978      	cmp	r1, #120	; 0x78
 8004014:	d1d4      	bne.n	8003fc0 <_printf_i+0x30>
 8004016:	2378      	movs	r3, #120	; 0x78
 8004018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401c:	4864      	ldr	r0, [pc, #400]	; (80041b0 <_printf_i+0x220>)
 800401e:	e055      	b.n	80040cc <_printf_i+0x13c>
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	1d19      	adds	r1, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6011      	str	r1, [r2, #0]
 8004028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800402c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004030:	2301      	movs	r3, #1
 8004032:	e08c      	b.n	800414e <_printf_i+0x1be>
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6011      	str	r1, [r2, #0]
 8004038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800403c:	bf18      	it	ne
 800403e:	b21b      	sxthne	r3, r3
 8004040:	e7cf      	b.n	8003fe2 <_printf_i+0x52>
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	6825      	ldr	r5, [r4, #0]
 8004046:	1d18      	adds	r0, r3, #4
 8004048:	6010      	str	r0, [r2, #0]
 800404a:	0628      	lsls	r0, r5, #24
 800404c:	d501      	bpl.n	8004052 <_printf_i+0xc2>
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	e002      	b.n	8004058 <_printf_i+0xc8>
 8004052:	0668      	lsls	r0, r5, #25
 8004054:	d5fb      	bpl.n	800404e <_printf_i+0xbe>
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	4854      	ldr	r0, [pc, #336]	; (80041ac <_printf_i+0x21c>)
 800405a:	296f      	cmp	r1, #111	; 0x6f
 800405c:	bf14      	ite	ne
 800405e:	220a      	movne	r2, #10
 8004060:	2208      	moveq	r2, #8
 8004062:	2100      	movs	r1, #0
 8004064:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004068:	6865      	ldr	r5, [r4, #4]
 800406a:	60a5      	str	r5, [r4, #8]
 800406c:	2d00      	cmp	r5, #0
 800406e:	f2c0 8095 	blt.w	800419c <_printf_i+0x20c>
 8004072:	6821      	ldr	r1, [r4, #0]
 8004074:	f021 0104 	bic.w	r1, r1, #4
 8004078:	6021      	str	r1, [r4, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d13d      	bne.n	80040fa <_printf_i+0x16a>
 800407e:	2d00      	cmp	r5, #0
 8004080:	f040 808e 	bne.w	80041a0 <_printf_i+0x210>
 8004084:	4665      	mov	r5, ip
 8004086:	2a08      	cmp	r2, #8
 8004088:	d10b      	bne.n	80040a2 <_printf_i+0x112>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	07db      	lsls	r3, r3, #31
 800408e:	d508      	bpl.n	80040a2 <_printf_i+0x112>
 8004090:	6923      	ldr	r3, [r4, #16]
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	bfde      	ittt	le
 8004098:	2330      	movle	r3, #48	; 0x30
 800409a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800409e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040a2:	ebac 0305 	sub.w	r3, ip, r5
 80040a6:	6123      	str	r3, [r4, #16]
 80040a8:	f8cd 8000 	str.w	r8, [sp]
 80040ac:	463b      	mov	r3, r7
 80040ae:	aa03      	add	r2, sp, #12
 80040b0:	4621      	mov	r1, r4
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7ff fef6 	bl	8003ea4 <_printf_common>
 80040b8:	3001      	adds	r0, #1
 80040ba:	d14d      	bne.n	8004158 <_printf_i+0x1c8>
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	b005      	add	sp, #20
 80040c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040c6:	4839      	ldr	r0, [pc, #228]	; (80041ac <_printf_i+0x21c>)
 80040c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	6821      	ldr	r1, [r4, #0]
 80040d0:	1d1d      	adds	r5, r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6015      	str	r5, [r2, #0]
 80040d6:	060a      	lsls	r2, r1, #24
 80040d8:	d50b      	bpl.n	80040f2 <_printf_i+0x162>
 80040da:	07ca      	lsls	r2, r1, #31
 80040dc:	bf44      	itt	mi
 80040de:	f041 0120 	orrmi.w	r1, r1, #32
 80040e2:	6021      	strmi	r1, [r4, #0]
 80040e4:	b91b      	cbnz	r3, 80040ee <_printf_i+0x15e>
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	f022 0220 	bic.w	r2, r2, #32
 80040ec:	6022      	str	r2, [r4, #0]
 80040ee:	2210      	movs	r2, #16
 80040f0:	e7b7      	b.n	8004062 <_printf_i+0xd2>
 80040f2:	064d      	lsls	r5, r1, #25
 80040f4:	bf48      	it	mi
 80040f6:	b29b      	uxthmi	r3, r3
 80040f8:	e7ef      	b.n	80040da <_printf_i+0x14a>
 80040fa:	4665      	mov	r5, ip
 80040fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004100:	fb02 3311 	mls	r3, r2, r1, r3
 8004104:	5cc3      	ldrb	r3, [r0, r3]
 8004106:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800410a:	460b      	mov	r3, r1
 800410c:	2900      	cmp	r1, #0
 800410e:	d1f5      	bne.n	80040fc <_printf_i+0x16c>
 8004110:	e7b9      	b.n	8004086 <_printf_i+0xf6>
 8004112:	6813      	ldr	r3, [r2, #0]
 8004114:	6825      	ldr	r5, [r4, #0]
 8004116:	6961      	ldr	r1, [r4, #20]
 8004118:	1d18      	adds	r0, r3, #4
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	0628      	lsls	r0, r5, #24
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	d501      	bpl.n	8004126 <_printf_i+0x196>
 8004122:	6019      	str	r1, [r3, #0]
 8004124:	e002      	b.n	800412c <_printf_i+0x19c>
 8004126:	066a      	lsls	r2, r5, #25
 8004128:	d5fb      	bpl.n	8004122 <_printf_i+0x192>
 800412a:	8019      	strh	r1, [r3, #0]
 800412c:	2300      	movs	r3, #0
 800412e:	6123      	str	r3, [r4, #16]
 8004130:	4665      	mov	r5, ip
 8004132:	e7b9      	b.n	80040a8 <_printf_i+0x118>
 8004134:	6813      	ldr	r3, [r2, #0]
 8004136:	1d19      	adds	r1, r3, #4
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	681d      	ldr	r5, [r3, #0]
 800413c:	6862      	ldr	r2, [r4, #4]
 800413e:	2100      	movs	r1, #0
 8004140:	4628      	mov	r0, r5
 8004142:	f7fc f84d 	bl	80001e0 <memchr>
 8004146:	b108      	cbz	r0, 800414c <_printf_i+0x1bc>
 8004148:	1b40      	subs	r0, r0, r5
 800414a:	6060      	str	r0, [r4, #4]
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	6123      	str	r3, [r4, #16]
 8004150:	2300      	movs	r3, #0
 8004152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004156:	e7a7      	b.n	80040a8 <_printf_i+0x118>
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	462a      	mov	r2, r5
 800415c:	4639      	mov	r1, r7
 800415e:	4630      	mov	r0, r6
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d0aa      	beq.n	80040bc <_printf_i+0x12c>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	079b      	lsls	r3, r3, #30
 800416a:	d413      	bmi.n	8004194 <_printf_i+0x204>
 800416c:	68e0      	ldr	r0, [r4, #12]
 800416e:	9b03      	ldr	r3, [sp, #12]
 8004170:	4298      	cmp	r0, r3
 8004172:	bfb8      	it	lt
 8004174:	4618      	movlt	r0, r3
 8004176:	e7a3      	b.n	80040c0 <_printf_i+0x130>
 8004178:	2301      	movs	r3, #1
 800417a:	464a      	mov	r2, r9
 800417c:	4639      	mov	r1, r7
 800417e:	4630      	mov	r0, r6
 8004180:	47c0      	blx	r8
 8004182:	3001      	adds	r0, #1
 8004184:	d09a      	beq.n	80040bc <_printf_i+0x12c>
 8004186:	3501      	adds	r5, #1
 8004188:	68e3      	ldr	r3, [r4, #12]
 800418a:	9a03      	ldr	r2, [sp, #12]
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	42ab      	cmp	r3, r5
 8004190:	dcf2      	bgt.n	8004178 <_printf_i+0x1e8>
 8004192:	e7eb      	b.n	800416c <_printf_i+0x1dc>
 8004194:	2500      	movs	r5, #0
 8004196:	f104 0919 	add.w	r9, r4, #25
 800419a:	e7f5      	b.n	8004188 <_printf_i+0x1f8>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ac      	bne.n	80040fa <_printf_i+0x16a>
 80041a0:	7803      	ldrb	r3, [r0, #0]
 80041a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041aa:	e76c      	b.n	8004086 <_printf_i+0xf6>
 80041ac:	08004565 	.word	0x08004565
 80041b0:	08004576 	.word	0x08004576

080041b4 <memcpy>:
 80041b4:	b510      	push	{r4, lr}
 80041b6:	1e43      	subs	r3, r0, #1
 80041b8:	440a      	add	r2, r1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	d100      	bne.n	80041c0 <memcpy+0xc>
 80041be:	bd10      	pop	{r4, pc}
 80041c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c8:	e7f7      	b.n	80041ba <memcpy+0x6>

080041ca <memmove>:
 80041ca:	4288      	cmp	r0, r1
 80041cc:	b510      	push	{r4, lr}
 80041ce:	eb01 0302 	add.w	r3, r1, r2
 80041d2:	d807      	bhi.n	80041e4 <memmove+0x1a>
 80041d4:	1e42      	subs	r2, r0, #1
 80041d6:	4299      	cmp	r1, r3
 80041d8:	d00a      	beq.n	80041f0 <memmove+0x26>
 80041da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80041e2:	e7f8      	b.n	80041d6 <memmove+0xc>
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d9f5      	bls.n	80041d4 <memmove+0xa>
 80041e8:	1881      	adds	r1, r0, r2
 80041ea:	1ad2      	subs	r2, r2, r3
 80041ec:	42d3      	cmn	r3, r2
 80041ee:	d100      	bne.n	80041f2 <memmove+0x28>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041fa:	e7f7      	b.n	80041ec <memmove+0x22>

080041fc <_free_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4605      	mov	r5, r0
 8004200:	2900      	cmp	r1, #0
 8004202:	d045      	beq.n	8004290 <_free_r+0x94>
 8004204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004208:	1f0c      	subs	r4, r1, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfb8      	it	lt
 800420e:	18e4      	addlt	r4, r4, r3
 8004210:	f000 f8d2 	bl	80043b8 <__malloc_lock>
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <_free_r+0x98>)
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	4610      	mov	r0, r2
 800421a:	b933      	cbnz	r3, 800422a <_free_r+0x2e>
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	6014      	str	r4, [r2, #0]
 8004220:	4628      	mov	r0, r5
 8004222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004226:	f000 b8c8 	b.w	80043ba <__malloc_unlock>
 800422a:	42a3      	cmp	r3, r4
 800422c:	d90c      	bls.n	8004248 <_free_r+0x4c>
 800422e:	6821      	ldr	r1, [r4, #0]
 8004230:	1862      	adds	r2, r4, r1
 8004232:	4293      	cmp	r3, r2
 8004234:	bf04      	itt	eq
 8004236:	681a      	ldreq	r2, [r3, #0]
 8004238:	685b      	ldreq	r3, [r3, #4]
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	bf04      	itt	eq
 800423e:	1852      	addeq	r2, r2, r1
 8004240:	6022      	streq	r2, [r4, #0]
 8004242:	6004      	str	r4, [r0, #0]
 8004244:	e7ec      	b.n	8004220 <_free_r+0x24>
 8004246:	4613      	mov	r3, r2
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	b10a      	cbz	r2, 8004250 <_free_r+0x54>
 800424c:	42a2      	cmp	r2, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x4a>
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	1858      	adds	r0, r3, r1
 8004254:	42a0      	cmp	r0, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x74>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	4401      	add	r1, r0
 800425c:	1858      	adds	r0, r3, r1
 800425e:	4282      	cmp	r2, r0
 8004260:	6019      	str	r1, [r3, #0]
 8004262:	d1dd      	bne.n	8004220 <_free_r+0x24>
 8004264:	6810      	ldr	r0, [r2, #0]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	4401      	add	r1, r0
 800426c:	6019      	str	r1, [r3, #0]
 800426e:	e7d7      	b.n	8004220 <_free_r+0x24>
 8004270:	d902      	bls.n	8004278 <_free_r+0x7c>
 8004272:	230c      	movs	r3, #12
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	e7d3      	b.n	8004220 <_free_r+0x24>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428a      	cmp	r2, r1
 800427e:	bf04      	itt	eq
 8004280:	6811      	ldreq	r1, [r2, #0]
 8004282:	6852      	ldreq	r2, [r2, #4]
 8004284:	6062      	str	r2, [r4, #4]
 8004286:	bf04      	itt	eq
 8004288:	1809      	addeq	r1, r1, r0
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	605c      	str	r4, [r3, #4]
 800428e:	e7c7      	b.n	8004220 <_free_r+0x24>
 8004290:	bd38      	pop	{r3, r4, r5, pc}
 8004292:	bf00      	nop
 8004294:	20000090 	.word	0x20000090

08004298 <_malloc_r>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	1ccd      	adds	r5, r1, #3
 800429c:	f025 0503 	bic.w	r5, r5, #3
 80042a0:	3508      	adds	r5, #8
 80042a2:	2d0c      	cmp	r5, #12
 80042a4:	bf38      	it	cc
 80042a6:	250c      	movcc	r5, #12
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	4606      	mov	r6, r0
 80042ac:	db01      	blt.n	80042b2 <_malloc_r+0x1a>
 80042ae:	42a9      	cmp	r1, r5
 80042b0:	d903      	bls.n	80042ba <_malloc_r+0x22>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6033      	str	r3, [r6, #0]
 80042b6:	2000      	movs	r0, #0
 80042b8:	bd70      	pop	{r4, r5, r6, pc}
 80042ba:	f000 f87d 	bl	80043b8 <__malloc_lock>
 80042be:	4a21      	ldr	r2, [pc, #132]	; (8004344 <_malloc_r+0xac>)
 80042c0:	6814      	ldr	r4, [r2, #0]
 80042c2:	4621      	mov	r1, r4
 80042c4:	b991      	cbnz	r1, 80042ec <_malloc_r+0x54>
 80042c6:	4c20      	ldr	r4, [pc, #128]	; (8004348 <_malloc_r+0xb0>)
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	b91b      	cbnz	r3, 80042d4 <_malloc_r+0x3c>
 80042cc:	4630      	mov	r0, r6
 80042ce:	f000 f863 	bl	8004398 <_sbrk_r>
 80042d2:	6020      	str	r0, [r4, #0]
 80042d4:	4629      	mov	r1, r5
 80042d6:	4630      	mov	r0, r6
 80042d8:	f000 f85e 	bl	8004398 <_sbrk_r>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d124      	bne.n	800432a <_malloc_r+0x92>
 80042e0:	230c      	movs	r3, #12
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	4630      	mov	r0, r6
 80042e6:	f000 f868 	bl	80043ba <__malloc_unlock>
 80042ea:	e7e4      	b.n	80042b6 <_malloc_r+0x1e>
 80042ec:	680b      	ldr	r3, [r1, #0]
 80042ee:	1b5b      	subs	r3, r3, r5
 80042f0:	d418      	bmi.n	8004324 <_malloc_r+0x8c>
 80042f2:	2b0b      	cmp	r3, #11
 80042f4:	d90f      	bls.n	8004316 <_malloc_r+0x7e>
 80042f6:	600b      	str	r3, [r1, #0]
 80042f8:	50cd      	str	r5, [r1, r3]
 80042fa:	18cc      	adds	r4, r1, r3
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f85c 	bl	80043ba <__malloc_unlock>
 8004302:	f104 000b 	add.w	r0, r4, #11
 8004306:	1d23      	adds	r3, r4, #4
 8004308:	f020 0007 	bic.w	r0, r0, #7
 800430c:	1ac3      	subs	r3, r0, r3
 800430e:	d0d3      	beq.n	80042b8 <_malloc_r+0x20>
 8004310:	425a      	negs	r2, r3
 8004312:	50e2      	str	r2, [r4, r3]
 8004314:	e7d0      	b.n	80042b8 <_malloc_r+0x20>
 8004316:	428c      	cmp	r4, r1
 8004318:	684b      	ldr	r3, [r1, #4]
 800431a:	bf16      	itet	ne
 800431c:	6063      	strne	r3, [r4, #4]
 800431e:	6013      	streq	r3, [r2, #0]
 8004320:	460c      	movne	r4, r1
 8004322:	e7eb      	b.n	80042fc <_malloc_r+0x64>
 8004324:	460c      	mov	r4, r1
 8004326:	6849      	ldr	r1, [r1, #4]
 8004328:	e7cc      	b.n	80042c4 <_malloc_r+0x2c>
 800432a:	1cc4      	adds	r4, r0, #3
 800432c:	f024 0403 	bic.w	r4, r4, #3
 8004330:	42a0      	cmp	r0, r4
 8004332:	d005      	beq.n	8004340 <_malloc_r+0xa8>
 8004334:	1a21      	subs	r1, r4, r0
 8004336:	4630      	mov	r0, r6
 8004338:	f000 f82e 	bl	8004398 <_sbrk_r>
 800433c:	3001      	adds	r0, #1
 800433e:	d0cf      	beq.n	80042e0 <_malloc_r+0x48>
 8004340:	6025      	str	r5, [r4, #0]
 8004342:	e7db      	b.n	80042fc <_malloc_r+0x64>
 8004344:	20000090 	.word	0x20000090
 8004348:	20000094 	.word	0x20000094

0800434c <_realloc_r>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	4607      	mov	r7, r0
 8004350:	4614      	mov	r4, r2
 8004352:	460e      	mov	r6, r1
 8004354:	b921      	cbnz	r1, 8004360 <_realloc_r+0x14>
 8004356:	4611      	mov	r1, r2
 8004358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800435c:	f7ff bf9c 	b.w	8004298 <_malloc_r>
 8004360:	b922      	cbnz	r2, 800436c <_realloc_r+0x20>
 8004362:	f7ff ff4b 	bl	80041fc <_free_r>
 8004366:	4625      	mov	r5, r4
 8004368:	4628      	mov	r0, r5
 800436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800436c:	f000 f826 	bl	80043bc <_malloc_usable_size_r>
 8004370:	42a0      	cmp	r0, r4
 8004372:	d20f      	bcs.n	8004394 <_realloc_r+0x48>
 8004374:	4621      	mov	r1, r4
 8004376:	4638      	mov	r0, r7
 8004378:	f7ff ff8e 	bl	8004298 <_malloc_r>
 800437c:	4605      	mov	r5, r0
 800437e:	2800      	cmp	r0, #0
 8004380:	d0f2      	beq.n	8004368 <_realloc_r+0x1c>
 8004382:	4631      	mov	r1, r6
 8004384:	4622      	mov	r2, r4
 8004386:	f7ff ff15 	bl	80041b4 <memcpy>
 800438a:	4631      	mov	r1, r6
 800438c:	4638      	mov	r0, r7
 800438e:	f7ff ff35 	bl	80041fc <_free_r>
 8004392:	e7e9      	b.n	8004368 <_realloc_r+0x1c>
 8004394:	4635      	mov	r5, r6
 8004396:	e7e7      	b.n	8004368 <_realloc_r+0x1c>

08004398 <_sbrk_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4c06      	ldr	r4, [pc, #24]	; (80043b4 <_sbrk_r+0x1c>)
 800439c:	2300      	movs	r3, #0
 800439e:	4605      	mov	r5, r0
 80043a0:	4608      	mov	r0, r1
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	f7fc fcf6 	bl	8000d94 <_sbrk>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d102      	bne.n	80043b2 <_sbrk_r+0x1a>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	b103      	cbz	r3, 80043b2 <_sbrk_r+0x1a>
 80043b0:	602b      	str	r3, [r5, #0]
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	20000168 	.word	0x20000168

080043b8 <__malloc_lock>:
 80043b8:	4770      	bx	lr

080043ba <__malloc_unlock>:
 80043ba:	4770      	bx	lr

080043bc <_malloc_usable_size_r>:
 80043bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c0:	1f18      	subs	r0, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bfbc      	itt	lt
 80043c6:	580b      	ldrlt	r3, [r1, r0]
 80043c8:	18c0      	addlt	r0, r0, r3
 80043ca:	4770      	bx	lr

080043cc <_init>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr

080043d8 <_fini>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	bf00      	nop
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr
